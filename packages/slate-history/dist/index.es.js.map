{"version":3,"file":"index.es.js","sources":["../src/history.ts","../src/history-editor.ts","../src/with-history.ts"],"sourcesContent":["import isPlainObject from 'is-plain-object'\nimport { Operation } from 'slate'\n\n/**\n * `History` objects hold all of the operations that are applied to a value, so\n * they can be undone or redone as necessary.\n */\n\nexport interface History {\n  redos: Operation[][]\n  undos: Operation[][]\n}\n\nexport const History = {\n  /**\n   * Check if a value is a `History` object.\n   */\n\n  isHistory(value: any): value is History {\n    return (\n      isPlainObject(value) &&\n      Array.isArray(value.redos) &&\n      Array.isArray(value.undos) &&\n      (value.redos.length === 0 || Operation.isOperationList(value.redos[0])) &&\n      (value.undos.length === 0 || Operation.isOperationList(value.undos[0]))\n    )\n  },\n}\n","import { Editor } from 'slate'\nimport { History } from './history'\n\n/**\n * Weakmaps for attaching state to the editor.\n */\n\nexport const HISTORY = new WeakMap<Editor, History>()\nexport const SAVING = new WeakMap<Editor, boolean | undefined>()\nexport const MERGING = new WeakMap<Editor, boolean | undefined>()\n\n/**\n * `HistoryEditor` contains helpers for history-enabled editors.\n */\n\nexport interface HistoryEditor extends Editor {\n  history: History\n  undo: () => void\n  redo: () => void\n}\n\nexport const HistoryEditor = {\n  /**\n   * Check if a value is a `HistoryEditor` object.\n   */\n\n  isHistoryEditor(value: any): value is HistoryEditor {\n    return Editor.isEditor(value) && History.isHistory(value.history)\n  },\n\n  /**\n   * Get the merge flag's current value.\n   */\n\n  isMerging(editor: HistoryEditor): boolean | undefined {\n    return MERGING.get(editor)\n  },\n\n  /**\n   * Get the saving flag's current value.\n   */\n\n  isSaving(editor: HistoryEditor): boolean | undefined {\n    return SAVING.get(editor)\n  },\n\n  /**\n   * Redo to the previous saved state.\n   */\n\n  redo(editor: HistoryEditor): void {\n    editor.redo()\n  },\n\n  /**\n   * Undo to the previous saved state.\n   */\n\n  undo(editor: HistoryEditor): void {\n    editor.undo()\n  },\n\n  /**\n   * Apply a series of changes inside a synchronous `fn`, without merging any of\n   * the new operations into previous save point in the history.\n   */\n\n  withoutMerging(editor: HistoryEditor, fn: () => void): void {\n    const prev = HistoryEditor.isMerging(editor)\n    MERGING.set(editor, false)\n    fn()\n    MERGING.set(editor, prev)\n  },\n\n  /**\n   * Apply a series of changes inside a synchronous `fn`, without saving any of\n   * their operations into the history.\n   */\n\n  withoutSaving(editor: HistoryEditor, fn: () => void): void {\n    const prev = HistoryEditor.isSaving(editor)\n    SAVING.set(editor, false)\n    fn()\n    SAVING.set(editor, prev)\n  },\n}\n","import { Editor, Operation, Path } from 'slate'\n\nimport { HistoryEditor } from './history-editor'\n\n/**\n * The `withHistory` plugin keeps track of the operation history of a Slate\n * editor as operations are applied to it, using undo and redo stacks.\n */\n\nexport const withHistory = <T extends Editor>(editor: T) => {\n  const e = editor as T & HistoryEditor\n  const { apply } = e\n  e.history = { undos: [], redos: [] }\n\n  e.redo = () => {\n    const { history } = e\n    const { redos } = history\n\n    if (redos.length > 0) {\n      const batch = redos[redos.length - 1]\n\n      HistoryEditor.withoutSaving(e, () => {\n        Editor.withoutNormalizing(e, () => {\n          for (const op of batch) {\n            e.apply(op)\n          }\n        })\n      })\n\n      history.redos.pop()\n      history.undos.push(batch)\n    }\n  }\n\n  e.undo = () => {\n    const { history } = e\n    const { undos } = history\n\n    if (undos.length > 0) {\n      const batch = undos[undos.length - 1]\n\n      HistoryEditor.withoutSaving(e, () => {\n        Editor.withoutNormalizing(e, () => {\n          const inverseOps = batch.map(Operation.inverse).reverse()\n\n          for (const op of inverseOps) {\n            // If the final operation is deselecting the editor, skip it. This is\n            if (\n              op === inverseOps[inverseOps.length - 1] &&\n              op.type === 'set_selection' &&\n              op.newProperties == null\n            ) {\n              continue\n            } else {\n              e.apply(op)\n            }\n          }\n        })\n      })\n\n      history.redos.push(batch)\n      history.undos.pop()\n    }\n  }\n\n  e.apply = (op: Operation) => {\n    const { operations, history } = e\n    const { undos } = history\n    const lastBatch = undos[undos.length - 1]\n    const lastOp = lastBatch && lastBatch[lastBatch.length - 1]\n    const overwrite = shouldOverwrite(op, lastOp)\n    let save = HistoryEditor.isSaving(e)\n    let merge = HistoryEditor.isMerging(e)\n\n    if (save == null) {\n      save = shouldSave(op, lastOp)\n    }\n\n    if (save) {\n      if (merge == null) {\n        if (lastBatch == null) {\n          merge = false\n        } else if (operations.length !== 0) {\n          merge = true\n        } else {\n          merge = shouldMerge(op, lastOp) || overwrite\n        }\n      }\n\n      if (lastBatch && merge) {\n        if (overwrite) {\n          lastBatch.pop()\n        }\n\n        lastBatch.push(op)\n      } else {\n        const batch = [op]\n        undos.push(batch)\n      }\n\n      while (undos.length > 100) {\n        undos.shift()\n      }\n\n      if (shouldClear(op)) {\n        history.redos = []\n      }\n    }\n\n    apply(op)\n  }\n\n  return e\n}\n\n/**\n * Check whether to merge an operation into the previous operation.\n */\n\nconst shouldMerge = (op: Operation, prev: Operation | undefined): boolean => {\n  if (op.type === 'set_selection') {\n    return true\n  }\n\n  if (\n    prev &&\n    op.type === 'insert_text' &&\n    prev.type === 'insert_text' &&\n    op.offset === prev.offset + prev.text.length &&\n    Path.equals(op.path, prev.path)\n  ) {\n    return true\n  }\n\n  if (\n    prev &&\n    op.type === 'remove_text' &&\n    prev.type === 'remove_text' &&\n    op.offset + op.text.length === prev.offset &&\n    Path.equals(op.path, prev.path)\n  ) {\n    return true\n  }\n\n  return false\n}\n\n/**\n * Check whether an operation needs to be saved to the history.\n */\n\nconst shouldSave = (op: Operation, prev: Operation | undefined): boolean => {\n  if (op.type === 'set_selection' && op.newProperties == null) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * Check whether an operation should overwrite the previous one.\n */\n\nconst shouldOverwrite = (\n  op: Operation,\n  prev: Operation | undefined\n): boolean => {\n  if (prev && op.type === 'set_selection' && prev.type === 'set_selection') {\n    return true\n  }\n\n  return false\n}\n\n/**\n * Check whether an operation should clear the redos stack.\n */\n\nconst shouldClear = (op: Operation): boolean => {\n  if (op.type === 'set_selection') {\n    return false\n  }\n\n  return true\n}\n"],"names":["History","isHistory","value","isPlainObject","Array","isArray","redos","undos","length","Operation","isOperationList","HISTORY","WeakMap","SAVING","MERGING","HistoryEditor","isHistoryEditor","Editor","isEditor","history","isMerging","editor","get","isSaving","redo","undo","withoutMerging","fn","prev","set","withoutSaving","withHistory","e","apply","batch","withoutNormalizing","op","pop","push","inverseOps","map","inverse","reverse","type","newProperties","operations","lastBatch","lastOp","overwrite","shouldOverwrite","save","merge","shouldSave","shouldMerge","shift","shouldClear","offset","text","Path","equals","path"],"mappings":"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"}