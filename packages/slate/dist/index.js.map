{"version":3,"file":"index.js","sources":["../../../node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","../../../node_modules/@babel/runtime/helpers/iterableToArray.js","../../../node_modules/@babel/runtime/helpers/nonIterableSpread.js","../../../node_modules/@babel/runtime/helpers/toConsumableArray.js","../../../node_modules/@babel/runtime/helpers/arrayWithHoles.js","../../../node_modules/@babel/runtime/helpers/iterableToArrayLimit.js","../../../node_modules/@babel/runtime/helpers/nonIterableRest.js","../../../node_modules/@babel/runtime/helpers/slicedToArray.js","../../../node_modules/@babel/runtime/helpers/defineProperty.js","../src/utils/weak-maps.ts","../src/create-editor.ts","../../../node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js","../../../node_modules/@babel/runtime/helpers/objectWithoutProperties.js","../src/utils/string.ts","../src/interfaces/editor.ts","../src/interfaces/element.ts","../src/interfaces/location.ts","../src/interfaces/node.ts","../src/interfaces/operation.ts","../src/interfaces/path.ts","../src/interfaces/path-ref.ts","../src/interfaces/point.ts","../src/interfaces/point-ref.ts","../src/interfaces/range.ts","../src/interfaces/range-ref.ts","../src/interfaces/text.ts","../src/transforms/general.ts","../src/transforms/node.ts","../src/transforms/selection.ts","../src/transforms/text.ts","../src/transforms/index.ts"],"sourcesContent":["function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nmodule.exports = _arrayWithoutHoles;","function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nmodule.exports = _nonIterableSpread;","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nmodule.exports = _arrayWithHoles;","function _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nmodule.exports = _iterableToArrayLimit;","function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nmodule.exports = _nonIterableRest;","var arrayWithHoles = require(\"./arrayWithHoles\");\n\nvar iterableToArrayLimit = require(\"./iterableToArrayLimit\");\n\nvar nonIterableRest = require(\"./nonIterableRest\");\n\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}\n\nmodule.exports = _slicedToArray;","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;","import { Editor, Path, PathRef, PointRef, RangeRef } from '..'\n\nexport const DIRTY_PATHS: WeakMap<Editor, Path[]> = new WeakMap()\nexport const FLUSHING: WeakMap<Editor, boolean> = new WeakMap()\nexport const NORMALIZING: WeakMap<Editor, boolean> = new WeakMap()\nexport const PATH_REFS: WeakMap<Editor, Set<PathRef>> = new WeakMap()\nexport const POINT_REFS: WeakMap<Editor, Set<PointRef>> = new WeakMap()\nexport const RANGE_REFS: WeakMap<Editor, Set<RangeRef>> = new WeakMap()\n","import { enableES5 } from 'immer'\nimport {\n  Descendant,\n  Editor,\n  Element,\n  Node,\n  NodeEntry,\n  Operation,\n  Path,\n  PathRef,\n  PointRef,\n  Range,\n  RangeRef,\n  Text,\n  Transforms,\n} from './'\nimport { DIRTY_PATHS, FLUSHING } from './utils/weak-maps'\n\n/**\n * Create a new Slate `Editor` object.\n */\n\nexport const createEditor = (): Editor => {\n  if (typeof window !== 'undefined' && (window as any).msCrypto) {\n    enableES5()\n  }\n\n  const editor: Editor = {\n    children: [],\n    operations: [],\n    selection: null,\n    marks: null,\n    isInline: () => false,\n    isVoid: () => false,\n    onChange: () => {},\n\n    apply: (op: Operation) => {\n      for (const ref of Editor.pathRefs(editor)) {\n        PathRef.transform(ref, op)\n      }\n\n      for (const ref of Editor.pointRefs(editor)) {\n        PointRef.transform(ref, op)\n      }\n\n      for (const ref of Editor.rangeRefs(editor)) {\n        RangeRef.transform(ref, op)\n      }\n\n      const set = new Set()\n      const dirtyPaths: Path[] = []\n\n      const add = (path: Path | null) => {\n        if (path) {\n          const key = path.join(',')\n\n          if (!set.has(key)) {\n            set.add(key)\n            dirtyPaths.push(path)\n          }\n        }\n      }\n\n      const oldDirtyPaths = DIRTY_PATHS.get(editor) || []\n      const newDirtyPaths = getDirtyPaths(op)\n\n      for (const path of oldDirtyPaths) {\n        const newPath = Path.transform(path, op)\n        add(newPath)\n      }\n\n      for (const path of newDirtyPaths) {\n        add(path)\n      }\n\n      DIRTY_PATHS.set(editor, dirtyPaths)\n      Editor.transform(editor, op)\n      editor.operations.push(op)\n      Editor.normalize(editor)\n\n      // Clear any formats applied to the cursor if the selection changes.\n      if (op.type === 'set_selection') {\n        editor.marks = null\n      }\n\n      if (!FLUSHING.get(editor)) {\n        FLUSHING.set(editor, true)\n\n        Promise.resolve().then(() => {\n          FLUSHING.set(editor, false)\n          editor.onChange()\n          editor.operations = []\n        })\n      }\n    },\n\n    addMark: (key: string, value: any) => {\n      const { selection } = editor\n\n      if (selection) {\n        if (Range.isExpanded(selection)) {\n          Transforms.setNodes(\n            editor,\n            { [key]: value },\n            { match: Text.isText, split: true }\n          )\n        } else {\n          const marks = {\n            ...(Editor.marks(editor) || {}),\n            [key]: value,\n          }\n\n          editor.marks = marks\n          editor.onChange()\n        }\n      }\n    },\n\n    deleteBackward: (unit: 'character' | 'word' | 'line' | 'block') => {\n      const { selection } = editor\n\n      if (selection && Range.isCollapsed(selection)) {\n        Transforms.delete(editor, { unit, reverse: true })\n      }\n    },\n\n    deleteForward: (unit: 'character' | 'word' | 'line' | 'block') => {\n      const { selection } = editor\n\n      if (selection && Range.isCollapsed(selection)) {\n        Transforms.delete(editor, { unit })\n      }\n    },\n\n    deleteFragment: () => {\n      const { selection } = editor\n\n      if (selection && Range.isExpanded(selection)) {\n        Transforms.delete(editor)\n      }\n    },\n\n    getFragment: () => {\n      const { selection } = editor\n\n      if (selection) {\n        return Node.fragment(editor, selection)\n      }\n      return []\n    },\n\n    insertBreak: () => {\n      Transforms.splitNodes(editor, { always: true })\n    },\n\n    insertFragment: (fragment: Node[]) => {\n      Transforms.insertFragment(editor, fragment)\n    },\n\n    insertNode: (node: Node) => {\n      Transforms.insertNodes(editor, node)\n    },\n\n    insertText: (text: string) => {\n      const { selection, marks } = editor\n\n      if (selection) {\n        // If the cursor is at the end of an inline, move it outside of\n        // the inline before inserting\n        if (Range.isCollapsed(selection)) {\n          const inline = Editor.above(editor, {\n            match: n => Editor.isInline(editor, n),\n            mode: 'highest',\n          })\n\n          if (inline) {\n            const [, inlinePath] = inline\n\n            if (Editor.isEnd(editor, selection.anchor, inlinePath)) {\n              const point = Editor.after(editor, inlinePath)!\n              Transforms.setSelection(editor, {\n                anchor: point,\n                focus: point,\n              })\n            }\n          }\n        }\n\n        if (marks) {\n          const node = { text, ...marks }\n          Transforms.insertNodes(editor, node)\n        } else {\n          Transforms.insertText(editor, text)\n        }\n\n        editor.marks = null\n      }\n    },\n\n    normalizeNode: (entry: NodeEntry) => {\n      const [node, path] = entry\n\n      // There are no core normalizations for text nodes.\n      if (Text.isText(node)) {\n        return\n      }\n\n      // Ensure that block and inline nodes have at least one text child.\n      if (Element.isElement(node) && node.children.length === 0) {\n        const child = { text: '' }\n        Transforms.insertNodes(editor, child, {\n          at: path.concat(0),\n          voids: true,\n        })\n        return\n      }\n\n      // Determine whether the node should have block or inline children.\n      const shouldHaveInlines = Editor.isEditor(node)\n        ? false\n        : Element.isElement(node) &&\n          (editor.isInline(node) ||\n            node.children.length === 0 ||\n            Text.isText(node.children[0]) ||\n            editor.isInline(node.children[0]))\n\n      // Since we'll be applying operations while iterating, keep track of an\n      // index that accounts for any added/removed nodes.\n      let n = 0\n\n      for (let i = 0; i < node.children.length; i++, n++) {\n        const child = node.children[i] as Descendant\n        const prev = node.children[i - 1] as Descendant\n        const isLast = i === node.children.length - 1\n        const isInlineOrText =\n          Text.isText(child) ||\n          (Element.isElement(child) && editor.isInline(child))\n\n        // Only allow block nodes in the top-level children and parent blocks\n        // that only contain block nodes. Similarly, only allow inline nodes in\n        // other inline nodes, or parent blocks that only contain inlines and\n        // text.\n        if (isInlineOrText !== shouldHaveInlines) {\n          Transforms.removeNodes(editor, { at: path.concat(n), voids: true })\n          n--\n        } else if (Element.isElement(child)) {\n          // Ensure that inline nodes are surrounded by text nodes.\n          if (editor.isInline(child)) {\n            if (prev == null || !Text.isText(prev)) {\n              const newChild = { text: '' }\n              Transforms.insertNodes(editor, newChild, {\n                at: path.concat(n),\n                voids: true,\n              })\n              n++\n            } else if (isLast) {\n              const newChild = { text: '' }\n              Transforms.insertNodes(editor, newChild, {\n                at: path.concat(n + 1),\n                voids: true,\n              })\n              n++\n            }\n          }\n        } else {\n          // Merge adjacent text nodes that are empty or match.\n          if (prev != null && Text.isText(prev)) {\n            if (Text.equals(child, prev, { loose: true })) {\n              Transforms.mergeNodes(editor, { at: path.concat(n), voids: true })\n              n--\n            } else if (prev.text === '') {\n              Transforms.removeNodes(editor, {\n                at: path.concat(n - 1),\n                voids: true,\n              })\n              n--\n            } else if (isLast && child.text === '') {\n              Transforms.removeNodes(editor, {\n                at: path.concat(n),\n                voids: true,\n              })\n              n--\n            }\n          }\n        }\n      }\n    },\n\n    removeMark: (key: string) => {\n      const { selection } = editor\n\n      if (selection) {\n        if (Range.isExpanded(selection)) {\n          Transforms.unsetNodes(editor, key, {\n            match: Text.isText,\n            split: true,\n          })\n        } else {\n          const marks = { ...(Editor.marks(editor) || {}) }\n          delete marks[key]\n          editor.marks = marks\n          editor.onChange()\n        }\n      }\n    },\n  }\n\n  return editor\n}\n\n/**\n * Get the \"dirty\" paths generated from an operation.\n */\n\nconst getDirtyPaths = (op: Operation) => {\n  switch (op.type) {\n    case 'insert_text':\n    case 'remove_text':\n    case 'set_node': {\n      const { path } = op\n      return Path.levels(path)\n    }\n\n    case 'insert_node': {\n      const { node, path } = op\n      const levels = Path.levels(path)\n      const descendants = Text.isText(node)\n        ? []\n        : Array.from(Node.nodes(node), ([, p]) => path.concat(p))\n\n      return [...levels, ...descendants]\n    }\n\n    case 'merge_node': {\n      const { path } = op\n      const ancestors = Path.ancestors(path)\n      const previousPath = Path.previous(path)\n      return [...ancestors, previousPath]\n    }\n\n    case 'move_node': {\n      const { path, newPath } = op\n\n      if (Path.equals(path, newPath)) {\n        return []\n      }\n\n      const oldAncestors: Path[] = []\n      const newAncestors: Path[] = []\n\n      for (const ancestor of Path.ancestors(path)) {\n        const p = Path.transform(ancestor, op)\n        oldAncestors.push(p!)\n      }\n\n      for (const ancestor of Path.ancestors(newPath)) {\n        const p = Path.transform(ancestor, op)\n        newAncestors.push(p!)\n      }\n\n      return [...oldAncestors, ...newAncestors]\n    }\n\n    case 'remove_node': {\n      const { path } = op\n      const ancestors = Path.ancestors(path)\n      return [...ancestors]\n    }\n\n    case 'split_node': {\n      const { path } = op\n      const levels = Path.levels(path)\n      const nextPath = Path.next(path)\n      return [...levels, nextPath]\n    }\n\n    default: {\n      return []\n    }\n  }\n}\n","function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutPropertiesLoose;","var objectWithoutPropertiesLoose = require(\"./objectWithoutPropertiesLoose\");\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutProperties;","/**\n * Constants for string distance checking.\n */\n\nconst SPACE = /\\s/\nconst PUNCTUATION = /[\\u0021-\\u0023\\u0025-\\u002A\\u002C-\\u002F\\u003A\\u003B\\u003F\\u0040\\u005B-\\u005D\\u005F\\u007B\\u007D\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E3B\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\nconst CHAMELEON = /['\\u2018\\u2019]/\nconst SURROGATE_START = 0xd800\nconst SURROGATE_END = 0xdfff\nconst ZERO_WIDTH_JOINER = 0x200d\n\n/**\n * Get the distance to the end of the first character in a string of text.\n */\n\nexport const getCharacterDistance = (text: string): number => {\n  let offset = 0\n  // prev types:\n  // SURR: surrogate pair\n  // MOD: modifier (technically also surrogate pair)\n  // ZWJ: zero width joiner\n  // VAR: variation selector\n  // BMP: sequenceable character from basic multilingual plane\n  let prev: 'SURR' | 'MOD' | 'ZWJ' | 'VAR' | 'BMP' | null = null\n  let charCode = text.charCodeAt(0)\n\n  while (charCode) {\n    if (isSurrogate(charCode)) {\n      const modifier = isModifier(charCode, text, offset)\n\n      // Early returns are the heart of this function, where we decide if previous and current\n      // codepoints should form a single character (in terms of how many of them should selection\n      // jump over).\n      if (prev === 'SURR' || prev === 'BMP') {\n        break\n      }\n\n      offset += 2\n      prev = modifier ? 'MOD' : 'SURR'\n      charCode = text.charCodeAt(offset)\n      // Absolutely fine to `continue` without any checks because if `charCode` is NaN (which\n      // is the case when out of `text` range), next `while` loop won\"t execute and we\"re done.\n      continue\n    }\n\n    if (charCode === ZERO_WIDTH_JOINER) {\n      offset += 1\n      prev = 'ZWJ'\n      charCode = text.charCodeAt(offset)\n\n      continue\n    }\n\n    if (isBMPEmoji(charCode)) {\n      if (prev && prev !== 'ZWJ' && prev !== 'VAR') {\n        break\n      }\n      offset += 1\n      prev = 'BMP'\n      charCode = text.charCodeAt(offset)\n\n      continue\n    }\n\n    if (isVariationSelector(charCode)) {\n      if (prev && prev !== 'ZWJ') {\n        break\n      }\n      offset += 1\n      prev = 'VAR'\n      charCode = text.charCodeAt(offset)\n      continue\n    }\n\n    // Modifier 'groups up' with what ever character is before that (even whitespace), need to\n    // look ahead.\n    if (prev === 'MOD') {\n      offset += 1\n      break\n    }\n\n    // If while loop ever gets here, we're done (e.g latin chars).\n    break\n  }\n\n  return offset || 1\n}\n\n/**\n * Get the distance to the end of the first word in a string of text.\n */\n\nexport const getWordDistance = (text: string): number => {\n  let length = 0\n  let i = 0\n  let started = false\n  let char\n\n  while ((char = text.charAt(i))) {\n    const l = getCharacterDistance(char)\n    char = text.slice(i, i + l)\n    const rest = text.slice(i + l)\n\n    if (isWordCharacter(char, rest)) {\n      started = true\n      length += l\n    } else if (!started) {\n      length += l\n    } else {\n      break\n    }\n\n    i += l\n  }\n\n  return length\n}\n\n/**\n * Check if a character is a word character. The `remaining` argument is used\n * because sometimes you must read subsequent characters to truly determine it.\n */\n\nconst isWordCharacter = (char: string, remaining: string): boolean => {\n  if (SPACE.test(char)) {\n    return false\n  }\n\n  // Chameleons count as word characters as long as they're in a word, so\n  // recurse to see if the next one is a word character or not.\n  if (CHAMELEON.test(char)) {\n    let next = remaining.charAt(0)\n    const length = getCharacterDistance(next)\n    next = remaining.slice(0, length)\n    const rest = remaining.slice(length)\n\n    if (isWordCharacter(next, rest)) {\n      return true\n    }\n  }\n\n  if (PUNCTUATION.test(char)) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * Determines if `code` is a surrogate\n */\n\nconst isSurrogate = (code: number): boolean =>\n  SURROGATE_START <= code && code <= SURROGATE_END\n\n/**\n * Does `code` form Modifier with next one.\n *\n * https://emojipedia.org/modifiers/\n */\n\nconst isModifier = (code: number, text: string, offset: number): boolean => {\n  if (code === 0xd83c) {\n    const next = text.charCodeAt(offset + 1)\n    return next <= 0xdfff && next >= 0xdffb\n  }\n  return false\n}\n\n/**\n * Is `code` a Variation Selector.\n *\n * https://codepoints.net/variation_selectors\n */\n\nconst isVariationSelector = (code: number): boolean => {\n  return code <= 0xfe0f && code >= 0xfe00\n}\n\n/**\n * Is `code` one of the BMP codes used in emoji sequences.\n *\n * https://emojipedia.org/emoji-zwj-sequences/\n */\n\nconst isBMPEmoji = (code: number): boolean => {\n  // This requires tiny bit of maintanance, better ideas?\n  // Fortunately it only happens if new Unicode Standard\n  // is released. Fails gracefully if upkeep lags behind,\n  // same way Slate previously behaved with all emojis.\n  return (\n    code === 0x2764 || // heart (❤)\n    code === 0x2642 || // male (♂)\n    code === 0x2640 || // female (♀)\n    code === 0x2620 || // scull (☠)\n    code === 0x2695 || // medical (⚕)\n    code === 0x2708 || // plane (✈️)\n    code === 0x25ef // large circle (◯)\n  )\n}\n","import isPlainObject from 'is-plain-object'\nimport { createDraft, finishDraft, isDraft } from 'immer'\nimport { reverse as reverseText } from 'esrever'\n\nimport {\n  Ancestor,\n  Descendant,\n  Element,\n  Location,\n  Node,\n  NodeEntry,\n  Operation,\n  Path,\n  PathRef,\n  Point,\n  PointRef,\n  Range,\n  RangeRef,\n  Span,\n  Text,\n} from '..'\nimport {\n  DIRTY_PATHS,\n  NORMALIZING,\n  PATH_REFS,\n  POINT_REFS,\n  RANGE_REFS,\n} from '../utils/weak-maps'\nimport { getWordDistance, getCharacterDistance } from '../utils/string'\n\n/**\n * The `Editor` interface stores all the state of a Slate editor. It is extended\n * by plugins that wish to add their own helpers and implement new behaviors.\n */\n\nexport interface Editor {\n  children: Node[]\n  selection: Range | null\n  operations: Operation[]\n  marks: Record<string, any> | null\n  [key: string]: unknown\n\n  // Schema-specific node behaviors.\n  isInline: (element: Element) => boolean\n  isVoid: (element: Element) => boolean\n  normalizeNode: (entry: NodeEntry) => void\n  onChange: () => void\n\n  // Overrideable core actions.\n  addMark: (key: string, value: any) => void\n  apply: (operation: Operation) => void\n  deleteBackward: (unit: 'character' | 'word' | 'line' | 'block') => void\n  deleteForward: (unit: 'character' | 'word' | 'line' | 'block') => void\n  deleteFragment: () => void\n  getFragment: () => Descendant[]\n  insertBreak: () => void\n  insertFragment: (fragment: Node[]) => void\n  insertNode: (node: Node) => void\n  insertText: (text: string) => void\n  removeMark: (key: string) => void\n}\n\nexport const Editor = {\n  /**\n   * Get the ancestor above a location in the document.\n   */\n\n  above<T extends Ancestor>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ): NodeEntry<T> | undefined {\n    const {\n      voids = false,\n      mode = 'lowest',\n      at = editor.selection,\n      match,\n    } = options\n\n    if (!at) {\n      return\n    }\n\n    const path = Editor.path(editor, at)\n    const reverse = mode === 'lowest'\n\n    for (const [n, p] of Editor.levels(editor, {\n      at: path,\n      voids,\n      match,\n      reverse,\n    })) {\n      if (!Text.isText(n) && !Path.equals(path, p)) {\n        return [n, p]\n      }\n    }\n  },\n\n  /**\n   * Add a custom property to the leaf text nodes in the current selection.\n   *\n   * If the selection is currently collapsed, the marks will be added to the\n   * `editor.marks` property instead, and applied when text is inserted next.\n   */\n\n  addMark(editor: Editor, key: string, value: any): void {\n    editor.addMark(key, value)\n  },\n\n  /**\n   * Get the point after a location.\n   */\n\n  after(\n    editor: Editor,\n    at: Location,\n    options: {\n      distance?: number\n      unit?: 'offset' | 'character' | 'word' | 'line' | 'block'\n    } = {}\n  ): Point | undefined {\n    const anchor = Editor.point(editor, at, { edge: 'end' })\n    const focus = Editor.end(editor, [])\n    const range = { anchor, focus }\n    const { distance = 1 } = options\n    let d = 0\n    let target\n\n    for (const p of Editor.positions(editor, { ...options, at: range })) {\n      if (d > distance) {\n        break\n      }\n\n      if (d !== 0) {\n        target = p\n      }\n\n      d++\n    }\n\n    return target\n  },\n\n  /**\n   * Get the point before a location.\n   */\n\n  before(\n    editor: Editor,\n    at: Location,\n    options: {\n      distance?: number\n      unit?: 'offset' | 'character' | 'word' | 'line' | 'block'\n    } = {}\n  ): Point | undefined {\n    const anchor = Editor.start(editor, [])\n    const focus = Editor.point(editor, at, { edge: 'start' })\n    const range = { anchor, focus }\n    const { distance = 1 } = options\n    let d = 0\n    let target\n\n    for (const p of Editor.positions(editor, {\n      ...options,\n      at: range,\n      reverse: true,\n    })) {\n      if (d > distance) {\n        break\n      }\n\n      if (d !== 0) {\n        target = p\n      }\n\n      d++\n    }\n\n    return target\n  },\n\n  /**\n   * Delete content in the editor backward from the current selection.\n   */\n\n  deleteBackward(\n    editor: Editor,\n    options: {\n      unit?: 'character' | 'word' | 'line' | 'block'\n    } = {}\n  ): void {\n    const { unit = 'character' } = options\n    editor.deleteBackward(unit)\n  },\n\n  /**\n   * Delete content in the editor forward from the current selection.\n   */\n\n  deleteForward(\n    editor: Editor,\n    options: {\n      unit?: 'character' | 'word' | 'line' | 'block'\n    } = {}\n  ): void {\n    const { unit = 'character' } = options\n    editor.deleteForward(unit)\n  },\n\n  /**\n   * Delete the content in the current selection.\n   */\n\n  deleteFragment(editor: Editor): void {\n    editor.deleteFragment()\n  },\n\n  /**\n   * Get the start and end points of a location.\n   */\n\n  edges(editor: Editor, at: Location): [Point, Point] {\n    return [Editor.start(editor, at), Editor.end(editor, at)]\n  },\n\n  /**\n   * Get the end point of a location.\n   */\n\n  end(editor: Editor, at: Location): Point {\n    return Editor.point(editor, at, { edge: 'end' })\n  },\n\n  /**\n   * Get the first node at a location.\n   */\n\n  first(editor: Editor, at: Location): NodeEntry {\n    const path = Editor.path(editor, at, { edge: 'start' })\n    return Editor.node(editor, path)\n  },\n\n  /**\n   * Get the fragment at a location.\n   */\n\n  fragment(editor: Editor, at: Location): Descendant[] {\n    const range = Editor.range(editor, at)\n    const fragment = Node.fragment(editor, range)\n    return fragment\n  },\n  /**\n   * Check if a node has block children.\n   */\n\n  hasBlocks(editor: Editor, element: Element): boolean {\n    return element.children.some(n => Editor.isBlock(editor, n))\n  },\n\n  /**\n   * Check if a node has inline and text children.\n   */\n\n  hasInlines(editor: Editor, element: Element): boolean {\n    return element.children.some(\n      n => Text.isText(n) || Editor.isInline(editor, n)\n    )\n  },\n\n  /**\n   * Check if a node has text children.\n   */\n\n  hasTexts(editor: Editor, element: Element): boolean {\n    return element.children.every(n => Text.isText(n))\n  },\n\n  /**\n   * Insert a block break at the current selection.\n   *\n   * If the selection is currently expanded, it will be deleted first.\n   */\n\n  insertBreak(editor: Editor): void {\n    editor.insertBreak()\n  },\n\n  /**\n   * Insert a fragment at the current selection.\n   *\n   * If the selection is currently expanded, it will be deleted first.\n   */\n\n  insertFragment(editor: Editor, fragment: Node[]): void {\n    editor.insertFragment(fragment)\n  },\n\n  /**\n   * Insert a node at the current selection.\n   *\n   * If the selection is currently expanded, it will be deleted first.\n   */\n\n  insertNode(editor: Editor, node: Node): void {\n    editor.insertNode(node)\n  },\n\n  /**\n   * Insert text at the current selection.\n   *\n   * If the selection is currently expanded, it will be deleted first.\n   */\n\n  insertText(editor: Editor, text: string): void {\n    editor.insertText(text)\n  },\n\n  /**\n   * Check if a value is a block `Element` object.\n   */\n\n  isBlock(editor: Editor, value: any): value is Element {\n    return Element.isElement(value) && !editor.isInline(value)\n  },\n\n  /**\n   * Check if a value is an `Editor` object.\n   */\n\n  isEditor(value: any): value is Editor {\n    return (\n      isPlainObject(value) &&\n      typeof value.addMark === 'function' &&\n      typeof value.apply === 'function' &&\n      typeof value.deleteBackward === 'function' &&\n      typeof value.deleteForward === 'function' &&\n      typeof value.deleteFragment === 'function' &&\n      typeof value.insertBreak === 'function' &&\n      typeof value.insertFragment === 'function' &&\n      typeof value.insertNode === 'function' &&\n      typeof value.insertText === 'function' &&\n      typeof value.isInline === 'function' &&\n      typeof value.isVoid === 'function' &&\n      typeof value.normalizeNode === 'function' &&\n      typeof value.onChange === 'function' &&\n      typeof value.removeMark === 'function' &&\n      (value.marks === null || isPlainObject(value.marks)) &&\n      (value.selection === null || Range.isRange(value.selection)) &&\n      Node.isNodeList(value.children) &&\n      Operation.isOperationList(value.operations)\n    )\n  },\n\n  /**\n   * Check if a point is the end point of a location.\n   */\n\n  isEnd(editor: Editor, point: Point, at: Location): boolean {\n    const end = Editor.end(editor, at)\n    return Point.equals(point, end)\n  },\n\n  /**\n   * Check if a point is an edge of a location.\n   */\n\n  isEdge(editor: Editor, point: Point, at: Location): boolean {\n    return Editor.isStart(editor, point, at) || Editor.isEnd(editor, point, at)\n  },\n\n  /**\n   * Check if an element is empty, accounting for void nodes.\n   */\n\n  isEmpty(editor: Editor, element: Element): boolean {\n    const { children } = element\n    const [first] = children\n    return (\n      children.length === 0 ||\n      (children.length === 1 &&\n        Text.isText(first) &&\n        first.text === '' &&\n        !editor.isVoid(element))\n    )\n  },\n\n  /**\n   * Check if a value is an inline `Element` object.\n   */\n\n  isInline(editor: Editor, value: any): value is Element {\n    return Element.isElement(value) && editor.isInline(value)\n  },\n\n  /**\n   * Check if the editor is currently normalizing after each operation.\n   */\n\n  isNormalizing(editor: Editor): boolean {\n    const isNormalizing = NORMALIZING.get(editor)\n    return isNormalizing === undefined ? true : isNormalizing\n  },\n\n  /**\n   * Check if a point is the start point of a location.\n   */\n\n  isStart(editor: Editor, point: Point, at: Location): boolean {\n    // PERF: If the offset isn't `0` we know it's not the start.\n    if (point.offset !== 0) {\n      return false\n    }\n\n    const start = Editor.start(editor, at)\n    return Point.equals(point, start)\n  },\n\n  /**\n   * Check if a value is a void `Element` object.\n   */\n\n  isVoid(editor: Editor, value: any): value is Element {\n    return Element.isElement(value) && editor.isVoid(value)\n  },\n\n  /**\n   * Get the last node at a location.\n   */\n\n  last(editor: Editor, at: Location): NodeEntry {\n    const path = Editor.path(editor, at, { edge: 'end' })\n    return Editor.node(editor, path)\n  },\n\n  /**\n   * Get the leaf text node at a location.\n   */\n\n  leaf(\n    editor: Editor,\n    at: Location,\n    options: {\n      depth?: number\n      edge?: 'start' | 'end'\n    } = {}\n  ): NodeEntry<Text> {\n    const path = Editor.path(editor, at, options)\n    const node = Node.leaf(editor, path)\n    return [node, path]\n  },\n\n  /**\n   * Iterate through all of the levels at a location.\n   */\n\n  *levels<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      reverse?: boolean\n      voids?: boolean\n    } = {}\n  ): Iterable<NodeEntry<T>> {\n    const { at = editor.selection, reverse = false, voids = false } = options\n    let { match } = options\n\n    if (match == null) {\n      match = () => true\n    }\n\n    if (!at) {\n      return\n    }\n\n    const levels: NodeEntry<T>[] = []\n    const path = Editor.path(editor, at)\n\n    for (const [n, p] of Node.levels(editor, path)) {\n      if (!match(n)) {\n        continue\n      }\n\n      levels.push([n, p])\n\n      if (!voids && Editor.isVoid(editor, n)) {\n        break\n      }\n    }\n\n    if (reverse) {\n      levels.reverse()\n    }\n\n    yield* levels\n  },\n\n  /**\n   * Get the marks that would be added to text at the current selection.\n   */\n\n  marks(editor: Editor): Record<string, any> | null {\n    const { marks, selection } = editor\n\n    if (!selection) {\n      return null\n    }\n\n    if (marks) {\n      return marks\n    }\n\n    if (Range.isExpanded(selection)) {\n      const [match] = Editor.nodes(editor, { match: Text.isText })\n\n      if (match) {\n        const [node] = match as NodeEntry<Text>\n        const { text, ...rest } = node\n        return rest\n      } else {\n        return {}\n      }\n    }\n\n    const { anchor } = selection\n    const { path } = anchor\n    let [node] = Editor.leaf(editor, path)\n\n    if (anchor.offset === 0) {\n      const prev = Editor.previous(editor, { at: path, match: Text.isText })\n      const block = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n      })\n\n      if (prev && block) {\n        const [prevNode, prevPath] = prev\n        const [, blockPath] = block\n\n        if (Path.isAncestor(blockPath, prevPath)) {\n          node = prevNode as Text\n        }\n      }\n    }\n\n    const { text, ...rest } = node\n    return rest\n  },\n\n  /**\n   * Get the matching node in the branch of the document after a location.\n   */\n\n  next<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ): NodeEntry<T> | undefined {\n    const { mode = 'lowest', voids = false } = options\n    let { match, at = editor.selection } = options\n\n    if (!at) {\n      return\n    }\n\n    const [, from] = Editor.last(editor, at)\n    const [, to] = Editor.last(editor, [])\n    const span: Span = [from, to]\n\n    if (Path.isPath(at) && at.length === 0) {\n      throw new Error(`Cannot get the next node from the root node!`)\n    }\n\n    if (match == null) {\n      if (Path.isPath(at)) {\n        const [parent] = Editor.parent(editor, at)\n        match = n => parent.children.includes(n)\n      } else {\n        match = () => true\n      }\n    }\n\n    const [, next] = Editor.nodes(editor, { at: span, match, mode, voids })\n    return next\n  },\n\n  /**\n   * Get the node at a location.\n   */\n\n  node(\n    editor: Editor,\n    at: Location,\n    options: {\n      depth?: number\n      edge?: 'start' | 'end'\n    } = {}\n  ): NodeEntry {\n    const path = Editor.path(editor, at, options)\n    const node = Node.get(editor, path)\n    return [node, path]\n  },\n\n  /**\n   * Iterate through all of the nodes in the Editor.\n   */\n\n  *nodes<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location | Span\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      universal?: boolean\n      reverse?: boolean\n      voids?: boolean\n    } = {}\n  ): Iterable<NodeEntry<T>> {\n    const {\n      at = editor.selection,\n      mode = 'all',\n      universal = false,\n      reverse = false,\n      voids = false,\n    } = options\n    let { match } = options\n\n    if (!match) {\n      match = () => true\n    }\n\n    if (!at) {\n      return\n    }\n\n    let from\n    let to\n\n    if (Span.isSpan(at)) {\n      from = at[0]\n      to = at[1]\n    } else {\n      const first = Editor.path(editor, at, { edge: 'start' })\n      const last = Editor.path(editor, at, { edge: 'end' })\n      from = reverse ? last : first\n      to = reverse ? first : last\n    }\n\n    const iterable = Node.nodes(editor, {\n      reverse,\n      from,\n      to,\n      pass: ([n]) => (voids ? false : Editor.isVoid(editor, n)),\n    })\n\n    const matches: NodeEntry<T>[] = []\n    let hit: NodeEntry<T> | undefined\n\n    for (const [node, path] of iterable) {\n      const isLower = hit && Path.compare(path, hit[1]) === 0\n\n      // In highest mode any node lower than the last hit is not a match.\n      if (mode === 'highest' && isLower) {\n        continue\n      }\n\n      if (!match(node)) {\n        // If we've arrived at a leaf text node that is not lower than the last\n        // hit, then we've found a branch that doesn't include a match, which\n        // means the match is not universal.\n        if (universal && !isLower && Text.isText(node)) {\n          return\n        } else {\n          continue\n        }\n      }\n\n      // If there's a match and it's lower than the last, update the hit.\n      if (mode === 'lowest' && isLower) {\n        hit = [node, path]\n        continue\n      }\n\n      // In lowest mode we emit the last hit, once it's guaranteed lowest.\n      const emit: NodeEntry<T> | undefined =\n        mode === 'lowest' ? hit : [node, path]\n\n      if (emit) {\n        if (universal) {\n          matches.push(emit)\n        } else {\n          yield emit\n        }\n      }\n\n      hit = [node, path]\n    }\n\n    // Since lowest is always emitting one behind, catch up at the end.\n    if (mode === 'lowest' && hit) {\n      if (universal) {\n        matches.push(hit)\n      } else {\n        yield hit\n      }\n    }\n\n    // Universal defers to ensure that the match occurs in every branch, so we\n    // yield all of the matches after iterating.\n    if (universal) {\n      yield* matches\n    }\n  },\n  /**\n   * Normalize any dirty objects in the editor.\n   */\n\n  normalize(\n    editor: Editor,\n    options: {\n      force?: boolean\n    } = {}\n  ) {\n    const { force = false } = options\n    const getDirtyPaths = (editor: Editor) => {\n      return DIRTY_PATHS.get(editor) || []\n    }\n\n    if (!Editor.isNormalizing(editor)) {\n      return\n    }\n\n    if (force) {\n      const allPaths = Array.from(Node.nodes(editor), ([, p]) => p)\n      DIRTY_PATHS.set(editor, allPaths)\n    }\n\n    if (getDirtyPaths(editor).length === 0) {\n      return\n    }\n\n    Editor.withoutNormalizing(editor, () => {\n      const max = getDirtyPaths(editor).length * 42 // HACK: better way?\n      let m = 0\n\n      while (getDirtyPaths(editor).length !== 0) {\n        if (m > max) {\n          throw new Error(`\n            Could not completely normalize the editor after ${max} iterations! This is usually due to incorrect normalization logic that leaves a node in an invalid state.\n          `)\n        }\n\n        const path = getDirtyPaths(editor).pop()!\n        const entry = Editor.node(editor, path)\n        editor.normalizeNode(entry)\n        m++\n      }\n    })\n  },\n\n  /**\n   * Get the parent node of a location.\n   */\n\n  parent(\n    editor: Editor,\n    at: Location,\n    options: {\n      depth?: number\n      edge?: 'start' | 'end'\n    } = {}\n  ): NodeEntry<Ancestor> {\n    const path = Editor.path(editor, at, options)\n    const parentPath = Path.parent(path)\n    const entry = Editor.node(editor, parentPath)\n    return entry as NodeEntry<Ancestor>\n  },\n\n  /**\n   * Get the path of a location.\n   */\n\n  path(\n    editor: Editor,\n    at: Location,\n    options: {\n      depth?: number\n      edge?: 'start' | 'end'\n    } = {}\n  ): Path {\n    const { depth, edge } = options\n\n    if (Path.isPath(at)) {\n      if (edge === 'start') {\n        const [, firstPath] = Node.first(editor, at)\n        at = firstPath\n      } else if (edge === 'end') {\n        const [, lastPath] = Node.last(editor, at)\n        at = lastPath\n      }\n    }\n\n    if (Range.isRange(at)) {\n      if (edge === 'start') {\n        at = Range.start(at)\n      } else if (edge === 'end') {\n        at = Range.end(at)\n      } else {\n        at = Path.common(at.anchor.path, at.focus.path)\n      }\n    }\n\n    if (Point.isPoint(at)) {\n      at = at.path\n    }\n\n    if (depth != null) {\n      at = at.slice(0, depth)\n    }\n\n    return at\n  },\n\n  /**\n   * Create a mutable ref for a `Path` object, which will stay in sync as new\n   * operations are applied to the editor.\n   */\n\n  pathRef(\n    editor: Editor,\n    path: Path,\n    options: {\n      affinity?: 'backward' | 'forward' | null\n    } = {}\n  ): PathRef {\n    const { affinity = 'forward' } = options\n    const ref: PathRef = {\n      current: path,\n      affinity,\n      unref() {\n        const { current } = ref\n        const pathRefs = Editor.pathRefs(editor)\n        pathRefs.delete(ref)\n        ref.current = null\n        return current\n      },\n    }\n\n    const refs = Editor.pathRefs(editor)\n    refs.add(ref)\n    return ref\n  },\n\n  /**\n   * Get the set of currently tracked path refs of the editor.\n   */\n\n  pathRefs(editor: Editor): Set<PathRef> {\n    let refs = PATH_REFS.get(editor)\n\n    if (!refs) {\n      refs = new Set()\n      PATH_REFS.set(editor, refs)\n    }\n\n    return refs\n  },\n\n  /**\n   * Get the start or end point of a location.\n   */\n\n  point(\n    editor: Editor,\n    at: Location,\n    options: {\n      edge?: 'start' | 'end'\n    } = {}\n  ): Point {\n    const { edge = 'start' } = options\n\n    if (Path.isPath(at)) {\n      let path\n\n      if (edge === 'end') {\n        const [, lastPath] = Node.last(editor, at)\n        path = lastPath\n      } else {\n        const [, firstPath] = Node.first(editor, at)\n        path = firstPath\n      }\n\n      const node = Node.get(editor, path)\n\n      if (!Text.isText(node)) {\n        throw new Error(\n          `Cannot get the ${edge} point in the node at path [${at}] because it has no ${edge} text node.`\n        )\n      }\n\n      return { path, offset: edge === 'end' ? node.text.length : 0 }\n    }\n\n    if (Range.isRange(at)) {\n      const [start, end] = Range.edges(at)\n      return edge === 'start' ? start : end\n    }\n\n    return at\n  },\n\n  /**\n   * Create a mutable ref for a `Point` object, which will stay in sync as new\n   * operations are applied to the editor.\n   */\n\n  pointRef(\n    editor: Editor,\n    point: Point,\n    options: {\n      affinity?: 'backward' | 'forward' | null\n    } = {}\n  ): PointRef {\n    const { affinity = 'forward' } = options\n    const ref: PointRef = {\n      current: point,\n      affinity,\n      unref() {\n        const { current } = ref\n        const pointRefs = Editor.pointRefs(editor)\n        pointRefs.delete(ref)\n        ref.current = null\n        return current\n      },\n    }\n\n    const refs = Editor.pointRefs(editor)\n    refs.add(ref)\n    return ref\n  },\n\n  /**\n   * Get the set of currently tracked point refs of the editor.\n   */\n\n  pointRefs(editor: Editor): Set<PointRef> {\n    let refs = POINT_REFS.get(editor)\n\n    if (!refs) {\n      refs = new Set()\n      POINT_REFS.set(editor, refs)\n    }\n\n    return refs\n  },\n\n  /**\n   * Iterate through all of the positions in the document where a `Point` can be\n   * placed.\n   *\n   * By default it will move forward by individual offsets at a time,  but you\n   * can pass the `unit: 'character'` option to moved forward one character, word,\n   * or line at at time.\n   *\n   * Note: void nodes are treated as a single point, and iteration will not\n   * happen inside their content.\n   */\n\n  *positions(\n    editor: Editor,\n    options: {\n      at?: Location\n      unit?: 'offset' | 'character' | 'word' | 'line' | 'block'\n      reverse?: boolean\n    } = {}\n  ): Iterable<Point> {\n    const { at = editor.selection, unit = 'offset', reverse = false } = options\n\n    if (!at) {\n      return\n    }\n\n    const range = Editor.range(editor, at)\n    const [start, end] = Range.edges(range)\n    const first = reverse ? end : start\n    let string = ''\n    let available = 0\n    let offset = 0\n    let distance: number | null = null\n    let isNewBlock = false\n\n    const advance = () => {\n      if (distance == null) {\n        if (unit === 'character') {\n          distance = getCharacterDistance(string)\n        } else if (unit === 'word') {\n          distance = getWordDistance(string)\n        } else if (unit === 'line' || unit === 'block') {\n          distance = string.length\n        } else {\n          distance = 1\n        }\n\n        string = string.slice(distance)\n      }\n\n      // Add or substract the offset.\n      offset = reverse ? offset - distance : offset + distance\n      // Subtract the distance traveled from the available text.\n      available = available - distance!\n      // If the available had room to spare, reset the distance so that it will\n      // advance again next time. Otherwise, set it to the overflow amount.\n      distance = available >= 0 ? null : 0 - available\n    }\n\n    for (const [node, path] of Editor.nodes(editor, { at, reverse })) {\n      if (Element.isElement(node)) {\n        // Void nodes are a special case, since we don't want to iterate over\n        // their content. We instead always just yield their first point.\n        if (editor.isVoid(node)) {\n          yield Editor.start(editor, path)\n          continue\n        }\n\n        if (editor.isInline(node)) {\n          continue\n        }\n\n        if (Editor.hasInlines(editor, node)) {\n          const e = Path.isAncestor(path, end.path)\n            ? end\n            : Editor.end(editor, path)\n          const s = Path.isAncestor(path, start.path)\n            ? start\n            : Editor.start(editor, path)\n\n          const text = Editor.string(editor, { anchor: s, focus: e })\n          string = reverse ? reverseText(text) : text\n          isNewBlock = true\n        }\n      }\n\n      if (Text.isText(node)) {\n        const isFirst = Path.equals(path, first.path)\n        available = node.text.length\n        offset = reverse ? available : 0\n\n        if (isFirst) {\n          available = reverse ? first.offset : available - first.offset\n          offset = first.offset\n        }\n\n        if (isFirst || isNewBlock || unit === 'offset') {\n          yield { path, offset }\n        }\n\n        while (true) {\n          // If there's no more string, continue to the next block.\n          if (string === '') {\n            break\n          } else {\n            advance()\n          }\n\n          // If the available space hasn't overflow, we have another point to\n          // yield in the current text node.\n          if (available >= 0) {\n            yield { path, offset }\n          } else {\n            break\n          }\n        }\n\n        isNewBlock = false\n      }\n    }\n  },\n\n  /**\n   * Get the matching node in the branch of the document before a location.\n   */\n\n  previous<T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: 'all' | 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ): NodeEntry<T> | undefined {\n    const { mode = 'lowest', voids = false } = options\n    let { match, at = editor.selection } = options\n\n    if (!at) {\n      return\n    }\n\n    const [, from] = Editor.first(editor, at)\n    const [, to] = Editor.first(editor, [])\n    const span: Span = [from, to]\n\n    if (Path.isPath(at) && at.length === 0) {\n      throw new Error(`Cannot get the previous node from the root node!`)\n    }\n\n    if (match == null) {\n      if (Path.isPath(at)) {\n        const [parent] = Editor.parent(editor, at)\n        match = n => parent.children.includes(n)\n      } else {\n        match = () => true\n      }\n    }\n\n    const [, previous] = Editor.nodes(editor, {\n      reverse: true,\n      at: span,\n      match,\n      mode,\n      voids,\n    })\n\n    return previous\n  },\n\n  /**\n   * Get a range of a location.\n   */\n\n  range(editor: Editor, at: Location, to?: Location): Range {\n    if (Range.isRange(at) && !to) {\n      return at\n    }\n\n    const start = Editor.start(editor, at)\n    const end = Editor.end(editor, to || at)\n    return { anchor: start, focus: end }\n  },\n\n  /**\n   * Create a mutable ref for a `Range` object, which will stay in sync as new\n   * operations are applied to the editor.\n   */\n\n  rangeRef(\n    editor: Editor,\n    range: Range,\n    options: {\n      affinity?: 'backward' | 'forward' | 'outward' | 'inward' | null\n    } = {}\n  ): RangeRef {\n    const { affinity = 'forward' } = options\n    const ref: RangeRef = {\n      current: range,\n      affinity,\n      unref() {\n        const { current } = ref\n        const rangeRefs = Editor.rangeRefs(editor)\n        rangeRefs.delete(ref)\n        ref.current = null\n        return current\n      },\n    }\n\n    const refs = Editor.rangeRefs(editor)\n    refs.add(ref)\n    return ref\n  },\n\n  /**\n   * Get the set of currently tracked range refs of the editor.\n   */\n\n  rangeRefs(editor: Editor): Set<RangeRef> {\n    let refs = RANGE_REFS.get(editor)\n\n    if (!refs) {\n      refs = new Set()\n      RANGE_REFS.set(editor, refs)\n    }\n\n    return refs\n  },\n\n  /**\n   * Remove a custom property from all of the leaf text nodes in the current\n   * selection.\n   *\n   * If the selection is currently collapsed, the removal will be stored on\n   * `editor.marks` and applied to the text inserted next.\n   */\n\n  removeMark(editor: Editor, key: string): void {\n    editor.removeMark(key)\n  },\n\n  /**\n   * Get the start point of a location.\n   */\n\n  start(editor: Editor, at: Location): Point {\n    return Editor.point(editor, at, { edge: 'start' })\n  },\n\n  /**\n   * Get the text string content of a location.\n   *\n   * Note: the text of void nodes is presumed to be an empty string, regardless\n   * of what their actual content is.\n   */\n\n  string(editor: Editor, at: Location): string {\n    const range = Editor.range(editor, at)\n    const [start, end] = Range.edges(range)\n    let text = ''\n\n    for (const [node, path] of Editor.nodes(editor, {\n      at: range,\n      match: Text.isText,\n    })) {\n      let t = node.text\n\n      if (Path.equals(path, end.path)) {\n        t = t.slice(0, end.offset)\n      }\n\n      if (Path.equals(path, start.path)) {\n        t = t.slice(start.offset)\n      }\n\n      text += t\n    }\n\n    return text\n  },\n\n  /**\n   * Transform the editor by an operation.\n   */\n\n  transform(editor: Editor, op: Operation) {\n    editor.children = createDraft(editor.children)\n    let selection = editor.selection && createDraft(editor.selection)\n\n    switch (op.type) {\n      case 'insert_node': {\n        const { path, node } = op\n        const parent = Node.parent(editor, path)\n        const index = path[path.length - 1]\n        parent.children.splice(index, 0, node)\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'insert_text': {\n        const { path, offset, text } = op\n        const node = Node.leaf(editor, path)\n        const before = node.text.slice(0, offset)\n        const after = node.text.slice(offset)\n        node.text = before + text + after\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'merge_node': {\n        const { path } = op\n        const node = Node.get(editor, path)\n        const prevPath = Path.previous(path)\n        const prev = Node.get(editor, prevPath)\n        const parent = Node.parent(editor, path)\n        const index = path[path.length - 1]\n\n        if (Text.isText(node) && Text.isText(prev)) {\n          prev.text += node.text\n        } else if (!Text.isText(node) && !Text.isText(prev)) {\n          prev.children.push(...node.children)\n        } else {\n          throw new Error(\n            `Cannot apply a \"merge_node\" operation at path [${path}] to nodes of different interaces: ${node} ${prev}`\n          )\n        }\n\n        parent.children.splice(index, 1)\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'move_node': {\n        const { path, newPath } = op\n\n        if (Path.isAncestor(path, newPath)) {\n          throw new Error(\n            `Cannot move a path [${path}] to new path [${newPath}] because the destination is inside itself.`\n          )\n        }\n\n        const node = Node.get(editor, path)\n        const parent = Node.parent(editor, path)\n        const index = path[path.length - 1]\n\n        // This is tricky, but since the `path` and `newPath` both refer to\n        // the same snapshot in time, there's a mismatch. After either\n        // removing the original position, the second step's path can be out\n        // of date. So instead of using the `op.newPath` directly, we\n        // transform `op.path` to ascertain what the `newPath` would be after\n        // the operation was applied.\n        parent.children.splice(index, 1)\n        const truePath = Path.transform(path, op)!\n        const newParent = Node.get(editor, Path.parent(truePath)) as Ancestor\n        const newIndex = truePath[truePath.length - 1]\n\n        newParent.children.splice(newIndex, 0, node)\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'remove_node': {\n        const { path } = op\n        const index = path[path.length - 1]\n        const parent = Node.parent(editor, path)\n        parent.children.splice(index, 1)\n\n        // Transform all of the points in the value, but if the point was in the\n        // node that was removed we need to update the range or remove it.\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            const result = Point.transform(point, op)\n\n            if (selection != null && result != null) {\n              selection[key] = result\n            } else {\n              let prev: NodeEntry<Text> | undefined\n              let next: NodeEntry<Text> | undefined\n\n              for (const [n, p] of Node.texts(editor)) {\n                if (Path.compare(p, path) === -1) {\n                  prev = [n, p]\n                } else {\n                  next = [n, p]\n                  break\n                }\n              }\n\n              if (prev) {\n                point.path = prev[1]\n                point.offset = prev[0].text.length\n              } else if (next) {\n                point.path = next[1]\n                point.offset = 0\n              } else {\n                selection = null\n              }\n            }\n          }\n        }\n\n        break\n      }\n\n      case 'remove_text': {\n        const { path, offset, text } = op\n        const node = Node.leaf(editor, path)\n        const before = node.text.slice(0, offset)\n        const after = node.text.slice(offset + text.length)\n        node.text = before + after\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'set_node': {\n        const { path, newProperties } = op\n\n        if (path.length === 0) {\n          throw new Error(`Cannot set properties on the root node!`)\n        }\n\n        const node = Node.get(editor, path)\n\n        for (const key in newProperties) {\n          if (key === 'children' || key === 'text') {\n            throw new Error(`Cannot set the \"${key}\" property of nodes!`)\n          }\n\n          const value = newProperties[key]\n\n          if (value == null) {\n            delete node[key]\n          } else {\n            node[key] = value\n          }\n        }\n\n        break\n      }\n\n      case 'set_selection': {\n        const { newProperties } = op\n\n        if (newProperties == null) {\n          selection = newProperties\n        } else if (selection == null) {\n          if (!Range.isRange(newProperties)) {\n            throw new Error(\n              `Cannot apply an incomplete \"set_selection\" operation properties ${JSON.stringify(\n                newProperties\n              )} when there is no current selection.`\n            )\n          }\n\n          selection = newProperties\n        } else {\n          Object.assign(selection, newProperties)\n        }\n\n        break\n      }\n\n      case 'split_node': {\n        const { path, position, properties } = op\n\n        if (path.length === 0) {\n          throw new Error(\n            `Cannot apply a \"split_node\" operation at path [${path}] because the root node cannot be split.`\n          )\n        }\n\n        const node = Node.get(editor, path)\n        const parent = Node.parent(editor, path)\n        const index = path[path.length - 1]\n        let newNode: Descendant\n\n        if (Text.isText(node)) {\n          const before = node.text.slice(0, position)\n          const after = node.text.slice(position)\n          node.text = before\n          newNode = {\n            ...node,\n            ...(properties as Partial<Text>),\n            text: after,\n          }\n        } else {\n          const before = node.children.slice(0, position)\n          const after = node.children.slice(position)\n          node.children = before\n\n          newNode = {\n            ...node,\n            ...(properties as Partial<Element>),\n            children: after,\n          }\n        }\n\n        parent.children.splice(index + 1, 0, newNode)\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n    }\n\n    editor.children = finishDraft(editor.children) as Node[]\n\n    if (selection) {\n      editor.selection = isDraft(selection)\n        ? (finishDraft(selection) as Range)\n        : selection\n    } else {\n      editor.selection = null\n    }\n  },\n\n  /**\n   * Convert a range into a non-hanging one.\n   */\n\n  unhangRange(\n    editor: Editor,\n    range: Range,\n    options: {\n      voids?: boolean\n    } = {}\n  ): Range {\n    const { voids = false } = options\n    let [start, end] = Range.edges(range)\n\n    // PERF: exit early if we can guarantee that the range isn't hanging.\n    if (start.offset !== 0 || end.offset !== 0 || Range.isCollapsed(range)) {\n      return range\n    }\n\n    const endBlock = Editor.above(editor, {\n      at: end,\n      match: n => Editor.isBlock(editor, n),\n    })\n    const blockPath = endBlock ? endBlock[1] : []\n    const first = Editor.start(editor, [])\n    const before = { anchor: first, focus: end }\n    let skip = true\n\n    for (const [node, path] of Editor.nodes(editor, {\n      at: before,\n      match: Text.isText,\n      reverse: true,\n      voids,\n    })) {\n      if (skip) {\n        skip = false\n        continue\n      }\n\n      if (node.text !== '' || Path.isBefore(path, blockPath)) {\n        end = { path, offset: node.text.length }\n        break\n      }\n    }\n\n    return { anchor: start, focus: end }\n  },\n\n  /**\n   * Match a void node in the current branch of the editor.\n   */\n\n  void(\n    editor: Editor,\n    options: {\n      at?: Location\n      mode?: 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ): NodeEntry<Element> | undefined {\n    return Editor.above(editor, {\n      ...options,\n      match: n => Editor.isVoid(editor, n),\n    })\n  },\n\n  /**\n   * Call a function, deferring normalization until after it completes.\n   */\n\n  withoutNormalizing(editor: Editor, fn: () => void): void {\n    const value = Editor.isNormalizing(editor)\n    NORMALIZING.set(editor, false)\n    fn()\n    NORMALIZING.set(editor, value)\n    Editor.normalize(editor)\n  },\n}\n\n/**\n * A helper type for narrowing matched nodes with a predicate.\n */\n\ntype NodeMatch<T extends Node> =\n  | ((node: Node) => node is T)\n  | ((node: Node) => boolean)\n","import isPlainObject from 'is-plain-object'\nimport { Editor, Node, Path } from '..'\n\n/**\n * `Element` objects are a type of node in a Slate document that contain other\n * element nodes or text nodes. They can be either \"blocks\" or \"inlines\"\n * depending on the Slate editor's configuration.\n */\n\nexport interface Element {\n  children: Node[]\n  [key: string]: unknown\n}\n\nexport const Element = {\n  /**\n   * Check if a value implements the `Element` interface.\n   */\n\n  isElement(value: any): value is Element {\n    return (\n      isPlainObject(value) &&\n      Node.isNodeList(value.children) &&\n      !Editor.isEditor(value)\n    )\n  },\n\n  /**\n   * Check if a value is an array of `Element` objects.\n   */\n\n  isElementList(value: any): value is Element[] {\n    return (\n      Array.isArray(value) &&\n      (value.length === 0 || Element.isElement(value[0]))\n    )\n  },\n\n  /**\n   * Check if an element matches set of properties.\n   *\n   * Note: this checks custom properties, and it does not ensure that any\n   * children are equivalent.\n   */\n\n  matches(element: Element, props: Partial<Element>): boolean {\n    for (const key in props) {\n      if (key === 'children') {\n        continue\n      }\n\n      if (element[key] !== props[key]) {\n        return false\n      }\n    }\n\n    return true\n  },\n}\n\n/**\n * `ElementEntry` objects refer to an `Element` and the `Path` where it can be\n * found inside a root node.\n */\n\nexport type ElementEntry = [Element, Path]\n","import { Path, Point, Range } from '..'\n\n/**\n * The `Location` interface is a union of the ways to refer to a specific\n * location in a Slate document: paths, points or ranges.\n *\n * Methods will often accept a `Location` instead of requiring only a `Path`,\n * `Point` or `Range`. This eliminates the need for developers to manage\n * converting between the different interfaces in their own code base.\n */\n\nexport type Location = Path | Point | Range\n\nexport const Location = {\n  /**\n   * Check if a value implements the `Location` interface.\n   */\n\n  isLocation(value: any): value is Location {\n    return Path.isPath(value) || Point.isPoint(value) || Range.isRange(value)\n  },\n}\n\n/**\n * The `Span` interface is a low-level way to refer to locations in nodes\n * without using `Point` which requires leaf text nodes to be present.\n */\n\nexport type Span = [Path, Path]\n\nexport const Span = {\n  /**\n   * Check if a value implements the `Span` interface.\n   */\n\n  isSpan(value: any): value is Span {\n    return (\n      Array.isArray(value) && value.length === 2 && value.every(Path.isPath)\n    )\n  },\n}\n","import { produce } from 'immer'\nimport { Editor, Element, ElementEntry, Path, Range, Text } from '..'\n\n/**\n * The `Node` union type represents all of the different types of nodes that\n * occur in a Slate document tree.\n */\n\nexport type Node = Editor | Element | Text\n\nexport const Node = {\n  /**\n   * Get the node at a specific path, asserting that it's an ancestor node.\n   */\n\n  ancestor(root: Node, path: Path): Ancestor {\n    const node = Node.get(root, path)\n\n    if (Text.isText(node)) {\n      throw new Error(\n        `Cannot get the ancestor node at path [${path}] because it refers to a text node instead: ${node}`\n      )\n    }\n\n    return node\n  },\n\n  /**\n   * Return an iterable of all the ancestor nodes above a specific path.\n   *\n   * By default the order is bottom-up, from lowest to highest ancestor in\n   * the tree, but you can pass the `reverse: true` option to go top-down.\n   */\n\n  *ancestors(\n    root: Node,\n    path: Path,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): Iterable<NodeEntry<Ancestor>> {\n    for (const p of Path.ancestors(path, options)) {\n      const n = Node.ancestor(root, p)\n      const entry: NodeEntry<Ancestor> = [n, p]\n      yield entry\n    }\n  },\n\n  /**\n   * Get the child of a node at a specific index.\n   */\n\n  child(root: Node, index: number): Descendant {\n    if (Text.isText(root)) {\n      throw new Error(\n        `Cannot get the child of a text node: ${JSON.stringify(root)}`\n      )\n    }\n\n    const c = root.children[index] as Descendant\n\n    if (c == null) {\n      throw new Error(\n        `Cannot get child at index \\`${index}\\` in node: ${JSON.stringify(\n          root\n        )}`\n      )\n    }\n\n    return c\n  },\n\n  /**\n   * Iterate over the children of a node at a specific path.\n   */\n\n  *children(\n    root: Node,\n    path: Path,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): Iterable<NodeEntry<Descendant>> {\n    const { reverse = false } = options\n    const ancestor = Node.ancestor(root, path)\n    const { children } = ancestor\n    let index = reverse ? children.length - 1 : 0\n\n    while (reverse ? index >= 0 : index < children.length) {\n      const child = Node.child(ancestor, index)\n      const childPath = path.concat(index)\n      yield [child, childPath]\n      index = reverse ? index - 1 : index + 1\n    }\n  },\n\n  /**\n   * Get an entry for the common ancesetor node of two paths.\n   */\n\n  common(root: Node, path: Path, another: Path): NodeEntry {\n    const p = Path.common(path, another)\n    const n = Node.get(root, p)\n    return [n, p]\n  },\n\n  /**\n   * Get the node at a specific path, asserting that it's a descendant node.\n   */\n\n  descendant(root: Node, path: Path): Descendant {\n    const node = Node.get(root, path)\n\n    if (Editor.isEditor(node)) {\n      throw new Error(\n        `Cannot get the descendant node at path [${path}] because it refers to the root editor node instead: ${node}`\n      )\n    }\n\n    return node\n  },\n\n  /**\n   * Return an iterable of all the descendant node entries inside a root node.\n   */\n\n  *descendants(\n    root: Node,\n    options: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (node: NodeEntry) => boolean\n    } = {}\n  ): Iterable<NodeEntry<Descendant>> {\n    for (const [node, path] of Node.nodes(root, options)) {\n      if (path.length !== 0) {\n        // NOTE: we have to coerce here because checking the path's length does\n        // guarantee that `node` is not a `Editor`, but TypeScript doesn't know.\n        yield [node, path] as NodeEntry<Descendant>\n      }\n    }\n  },\n\n  /**\n   * Return an iterable of all the element nodes inside a root node. Each iteration\n   * will return an `ElementEntry` tuple consisting of `[Element, Path]`. If the\n   * root node is an element it will be included in the iteration as well.\n   */\n\n  *elements(\n    root: Node,\n    options: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (node: NodeEntry) => boolean\n    } = {}\n  ): Iterable<ElementEntry> {\n    for (const [node, path] of Node.nodes(root, options)) {\n      if (Element.isElement(node)) {\n        yield [node, path]\n      }\n    }\n  },\n\n  /**\n   * Get the first node entry in a root node from a path.\n   */\n\n  first(root: Node, path: Path): NodeEntry {\n    const p = path.slice()\n    let n = Node.get(root, p)\n\n    while (n) {\n      if (Text.isText(n) || n.children.length === 0) {\n        break\n      } else {\n        n = n.children[0]\n        p.push(0)\n      }\n    }\n\n    return [n, p]\n  },\n\n  /**\n   * Get the sliced fragment represented by a range inside a root node.\n   */\n\n  fragment(root: Node, range: Range): Descendant[] {\n    if (Text.isText(root)) {\n      throw new Error(\n        `Cannot get a fragment starting from a root text node: ${JSON.stringify(\n          root\n        )}`\n      )\n    }\n\n    const newRoot = produce(root, r => {\n      const [start, end] = Range.edges(range)\n      const iterable = Node.nodes(r, {\n        reverse: true,\n        pass: ([, path]) => !Range.includes(range, path),\n      })\n\n      for (const [, path] of iterable) {\n        if (!Range.includes(range, path)) {\n          const parent = Node.parent(r, path)\n          const index = path[path.length - 1]\n          parent.children.splice(index, 1)\n        }\n\n        if (Path.equals(path, end.path)) {\n          const leaf = Node.leaf(r, path)\n          leaf.text = leaf.text.slice(0, end.offset)\n        }\n\n        if (Path.equals(path, start.path)) {\n          const leaf = Node.leaf(r, path)\n          leaf.text = leaf.text.slice(start.offset)\n        }\n      }\n\n      delete r.selection\n    })\n\n    return newRoot.children\n  },\n\n  /**\n   * Get the descendant node referred to by a specific path. If the path is an\n   * empty array, it refers to the root node itself.\n   */\n\n  get(root: Node, path: Path): Node {\n    let node = root\n\n    for (let i = 0; i < path.length; i++) {\n      const p = path[i]\n\n      if (Text.isText(node) || !node.children[p]) {\n        throw new Error(\n          `Cannot find a descendant at path [${path}] in node: ${JSON.stringify(\n            root\n          )}`\n        )\n      }\n\n      node = node.children[p]\n    }\n\n    return node\n  },\n\n  /**\n   * Check if a descendant node exists at a specific path.\n   */\n\n  has(root: Node, path: Path): boolean {\n    let node = root\n\n    for (let i = 0; i < path.length; i++) {\n      const p = path[i]\n\n      if (Text.isText(node) || !node.children[p]) {\n        return false\n      }\n\n      node = node.children[p]\n    }\n\n    return true\n  },\n\n  /**\n   * Check if a value implements the `Node` interface.\n   */\n\n  isNode(value: any): value is Node {\n    return (\n      Text.isText(value) || Element.isElement(value) || Editor.isEditor(value)\n    )\n  },\n\n  /**\n   * Check if a value is a list of `Node` objects.\n   */\n\n  isNodeList(value: any): value is Node[] {\n    return Array.isArray(value) && (value.length === 0 || Node.isNode(value[0]))\n  },\n\n  /**\n   * Get the lash node entry in a root node from a path.\n   */\n\n  last(root: Node, path: Path): NodeEntry {\n    const p = path.slice()\n    let n = Node.get(root, p)\n\n    while (n) {\n      if (Text.isText(n) || n.children.length === 0) {\n        break\n      } else {\n        const i = n.children.length - 1\n        n = n.children[i]\n        p.push(i)\n      }\n    }\n\n    return [n, p]\n  },\n\n  /**\n   * Get the node at a specific path, ensuring it's a leaf text node.\n   */\n\n  leaf(root: Node, path: Path): Text {\n    const node = Node.get(root, path)\n\n    if (!Text.isText(node)) {\n      throw new Error(\n        `Cannot get the leaf node at path [${path}] because it refers to a non-leaf node: ${node}`\n      )\n    }\n\n    return node\n  },\n\n  /**\n   * Return an iterable of the in a branch of the tree, from a specific path.\n   *\n   * By default the order is top-down, from lowest to highest node in the tree,\n   * but you can pass the `reverse: true` option to go bottom-up.\n   */\n\n  *levels(\n    root: Node,\n    path: Path,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): Iterable<NodeEntry> {\n    for (const p of Path.levels(path, options)) {\n      const n = Node.get(root, p)\n      yield [n, p]\n    }\n  },\n\n  /**\n   * Check if a node matches a set of props.\n   */\n\n  matches(node: Node, props: Partial<Node>): boolean {\n    return (\n      (Element.isElement(node) && Element.matches(node, props)) ||\n      (Text.isText(node) && Text.matches(node, props))\n    )\n  },\n\n  /**\n   * Return an iterable of all the node entries of a root node. Each entry is\n   * returned as a `[Node, Path]` tuple, with the path referring to the node's\n   * position inside the root node.\n   */\n\n  *nodes(\n    root: Node,\n    options: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (entry: NodeEntry) => boolean\n    } = {}\n  ): Iterable<NodeEntry> {\n    const { pass, reverse = false } = options\n    const { from = [], to } = options\n    const visited = new Set()\n    let p: Path = []\n    let n = root\n\n    while (true) {\n      if (to && (reverse ? Path.isBefore(p, to) : Path.isAfter(p, to))) {\n        break\n      }\n\n      if (!visited.has(n)) {\n        yield [n, p]\n      }\n\n      // If we're allowed to go downward and we haven't decsended yet, do.\n      if (\n        !visited.has(n) &&\n        !Text.isText(n) &&\n        n.children.length !== 0 &&\n        (pass == null || pass([n, p]) === false)\n      ) {\n        visited.add(n)\n        let nextIndex = reverse ? n.children.length - 1 : 0\n\n        if (Path.isAncestor(p, from)) {\n          nextIndex = from[p.length]\n        }\n\n        p = p.concat(nextIndex)\n        n = Node.get(root, p)\n        continue\n      }\n\n      // If we're at the root and we can't go down, we're done.\n      if (p.length === 0) {\n        break\n      }\n\n      // If we're going forward...\n      if (!reverse) {\n        const newPath = Path.next(p)\n\n        if (Node.has(root, newPath)) {\n          p = newPath\n          n = Node.get(root, p)\n          continue\n        }\n      }\n\n      // If we're going backward...\n      if (reverse && p[p.length - 1] !== 0) {\n        const newPath = Path.previous(p)\n        p = newPath\n        n = Node.get(root, p)\n        continue\n      }\n\n      // Otherwise we're going upward...\n      p = Path.parent(p)\n      n = Node.get(root, p)\n      visited.add(n)\n    }\n  },\n\n  /**\n   * Get the parent of a node at a specific path.\n   */\n\n  parent(root: Node, path: Path): Ancestor {\n    const parentPath = Path.parent(path)\n    const p = Node.get(root, parentPath)\n\n    if (Text.isText(p)) {\n      throw new Error(\n        `Cannot get the parent of path [${path}] because it does not exist in the root.`\n      )\n    }\n\n    return p\n  },\n\n  /**\n   * Get the concatenated text string of a node's content.\n   *\n   * Note that this will not include spaces or line breaks between block nodes.\n   * It is not a user-facing string, but a string for performing offset-related\n   * computations for a node.\n   */\n\n  string(node: Node): string {\n    if (Text.isText(node)) {\n      return node.text\n    } else {\n      return node.children.map(Node.string).join('')\n    }\n  },\n\n  /**\n   * Return an iterable of all leaf text nodes in a root node.\n   */\n\n  *texts(\n    root: Node,\n    options: {\n      from?: Path\n      to?: Path\n      reverse?: boolean\n      pass?: (node: NodeEntry) => boolean\n    } = {}\n  ): Iterable<NodeEntry<Text>> {\n    for (const [node, path] of Node.nodes(root, options)) {\n      if (Text.isText(node)) {\n        yield [node, path]\n      }\n    }\n  },\n}\n\n/**\n * The `Descendant` union type represents nodes that are descendants in the\n * tree. It is returned as a convenience in certain cases to narrow a value\n * further than the more generic `Node` union.\n */\n\nexport type Descendant = Element | Text\n\n/**\n * The `Ancestor` union type represents nodes that are ancestors in the tree.\n * It is returned as a convenience in certain cases to narrow a value further\n * than the more generic `Node` union.\n */\n\nexport type Ancestor = Editor | Element\n\n/**\n * `NodeEntry` objects are returned when iterating over the nodes in a Slate\n * document tree. They consist of the node and its `Path` relative to the root\n * node in the document.\n */\n\nexport type NodeEntry<T extends Node = Node> = [T, Path]\n","import { Node, Path, Range } from '..'\nimport isPlainObject from 'is-plain-object'\n\nexport type InsertNodeOperation = {\n  type: 'insert_node'\n  path: Path\n  node: Node\n  [key: string]: unknown\n}\n\nexport type InsertTextOperation = {\n  type: 'insert_text'\n  path: Path\n  offset: number\n  text: string\n  [key: string]: unknown\n}\n\nexport type MergeNodeOperation = {\n  type: 'merge_node'\n  path: Path\n  position: number\n  properties: Partial<Node>\n  [key: string]: unknown\n}\n\nexport type MoveNodeOperation = {\n  type: 'move_node'\n  path: Path\n  newPath: Path\n  [key: string]: unknown\n}\n\nexport type RemoveNodeOperation = {\n  type: 'remove_node'\n  path: Path\n  node: Node\n  [key: string]: unknown\n}\n\nexport type RemoveTextOperation = {\n  type: 'remove_text'\n  path: Path\n  offset: number\n  text: string\n  [key: string]: unknown\n}\n\nexport type SetNodeOperation = {\n  type: 'set_node'\n  path: Path\n  properties: Partial<Node>\n  newProperties: Partial<Node>\n  [key: string]: unknown\n}\n\nexport type SetSelectionOperation =\n  | {\n      type: 'set_selection'\n      [key: string]: unknown\n      properties: null\n      newProperties: Range\n    }\n  | {\n      type: 'set_selection'\n      [key: string]: unknown\n      properties: Partial<Range>\n      newProperties: Partial<Range>\n    }\n  | {\n      type: 'set_selection'\n      [key: string]: unknown\n      properties: Range\n      newProperties: null\n    }\n\nexport type SplitNodeOperation = {\n  type: 'split_node'\n  path: Path\n  position: number\n  properties: Partial<Node>\n  [key: string]: unknown\n}\n\nexport type NodeOperation =\n  | InsertNodeOperation\n  | MergeNodeOperation\n  | MoveNodeOperation\n  | RemoveNodeOperation\n  | SetNodeOperation\n  | SplitNodeOperation\n\nexport type SelectionOperation = SetSelectionOperation\n\nexport type TextOperation = InsertTextOperation | RemoveTextOperation\n\n/**\n * `Operation` objects define the low-level instructions that Slate editors use\n * to apply changes to their internal state. Representing all changes as\n * operations is what allows Slate editors to easily implement history,\n * collaboration, and other features.\n */\n\nexport type Operation = NodeOperation | SelectionOperation | TextOperation\n\nexport const Operation = {\n  /**\n   * Check of a value is a `NodeOperation` object.\n   */\n\n  isNodeOperation(value: any): value is NodeOperation {\n    return Operation.isOperation(value) && value.type.endsWith('_node')\n  },\n\n  /**\n   * Check of a value is an `Operation` object.\n   */\n\n  isOperation(value: any): value is Operation {\n    if (!isPlainObject(value)) {\n      return false\n    }\n\n    switch (value.type) {\n      case 'insert_node':\n        return Path.isPath(value.path) && Node.isNode(value.node)\n      case 'insert_text':\n        return (\n          typeof value.offset === 'number' &&\n          typeof value.text === 'string' &&\n          Path.isPath(value.path)\n        )\n      case 'merge_node':\n        return (\n          typeof value.position === 'number' &&\n          Path.isPath(value.path) &&\n          isPlainObject(value.properties)\n        )\n      case 'move_node':\n        return Path.isPath(value.path) && Path.isPath(value.newPath)\n      case 'remove_node':\n        return Path.isPath(value.path) && Node.isNode(value.node)\n      case 'remove_text':\n        return (\n          typeof value.offset === 'number' &&\n          typeof value.text === 'string' &&\n          Path.isPath(value.path)\n        )\n      case 'set_node':\n        return (\n          Path.isPath(value.path) &&\n          isPlainObject(value.properties) &&\n          isPlainObject(value.newProperties)\n        )\n      case 'set_selection':\n        return (\n          (value.properties === null && Range.isRange(value.newProperties)) ||\n          (value.newProperties === null && Range.isRange(value.properties)) ||\n          (isPlainObject(value.properties) &&\n            isPlainObject(value.newProperties))\n        )\n      case 'split_node':\n        return (\n          Path.isPath(value.path) &&\n          typeof value.position === 'number' &&\n          isPlainObject(value.properties)\n        )\n      default:\n        return false\n    }\n  },\n\n  /**\n   * Check if a value is a list of `Operation` objects.\n   */\n\n  isOperationList(value: any): value is Operation[] {\n    return (\n      Array.isArray(value) &&\n      (value.length === 0 || Operation.isOperation(value[0]))\n    )\n  },\n\n  /**\n   * Check of a value is a `SelectionOperation` object.\n   */\n\n  isSelectionOperation(value: any): value is SelectionOperation {\n    return Operation.isOperation(value) && value.type.endsWith('_selection')\n  },\n\n  /**\n   * Check of a value is a `TextOperation` object.\n   */\n\n  isTextOperation(value: any): value is TextOperation {\n    return Operation.isOperation(value) && value.type.endsWith('_text')\n  },\n\n  /**\n   * Invert an operation, returning a new operation that will exactly undo the\n   * original when applied.\n   */\n\n  inverse(op: Operation): Operation {\n    switch (op.type) {\n      case 'insert_node': {\n        return { ...op, type: 'remove_node' }\n      }\n\n      case 'insert_text': {\n        return { ...op, type: 'remove_text' }\n      }\n\n      case 'merge_node': {\n        return { ...op, type: 'split_node', path: Path.previous(op.path) }\n      }\n\n      case 'move_node': {\n        const { newPath, path } = op\n\n        // PERF: in this case the move operation is a no-op anyways.\n        if (Path.equals(newPath, path)) {\n          return op\n        }\n\n        // If the move happens completely within a single parent the path and\n        // newPath are stable with respect to each other.\n        if (Path.isSibling(path, newPath)) {\n          return { ...op, path: newPath, newPath: path }\n        }\n\n        // If the move does not happen within a single parent it is possible\n        // for the move to impact the true path to the location where the node\n        // was removed from and where it was inserted. We have to adjust for this\n        // and find the original path. We can accomplish this (only in non-sibling)\n        // moves by looking at the impact of the move operation on the node\n        // after the original move path.\n        const inversePath = Path.transform(path, op)!\n        const inverseNewPath = Path.transform(Path.next(path), op)!\n        return { ...op, path: inversePath, newPath: inverseNewPath }\n      }\n\n      case 'remove_node': {\n        return { ...op, type: 'insert_node' }\n      }\n\n      case 'remove_text': {\n        return { ...op, type: 'insert_text' }\n      }\n\n      case 'set_node': {\n        const { properties, newProperties } = op\n        return { ...op, properties: newProperties, newProperties: properties }\n      }\n\n      case 'set_selection': {\n        const { properties, newProperties } = op\n\n        if (properties == null) {\n          return {\n            ...op,\n            properties: newProperties as Range,\n            newProperties: null,\n          }\n        } else if (newProperties == null) {\n          return {\n            ...op,\n            properties: null,\n            newProperties: properties as Range,\n          }\n        } else {\n          return { ...op, properties: newProperties, newProperties: properties }\n        }\n      }\n\n      case 'split_node': {\n        return { ...op, type: 'merge_node', path: Path.next(op.path) }\n      }\n    }\n  },\n}\n","import { produce } from 'immer'\nimport { Operation } from '..'\n\n/**\n * `Path` arrays are a list of indexes that describe a node's exact position in\n * a Slate node tree. Although they are usually relative to the root `Editor`\n * object, they can be relative to any `Node` object.\n */\n\nexport type Path = number[]\n\nexport const Path = {\n  /**\n   * Get a list of ancestor paths for a given path.\n   *\n   * The paths are sorted from deepest to shallowest ancestor. However, if the\n   * `reverse: true` option is passed, they are reversed.\n   */\n\n  ancestors(path: Path, options: { reverse?: boolean } = {}): Path[] {\n    const { reverse = false } = options\n    let paths = Path.levels(path, options)\n\n    if (reverse) {\n      paths = paths.slice(1)\n    } else {\n      paths = paths.slice(0, -1)\n    }\n\n    return paths\n  },\n\n  /**\n   * Get the common ancestor path of two paths.\n   */\n\n  common(path: Path, another: Path): Path {\n    const common: Path = []\n\n    for (let i = 0; i < path.length && i < another.length; i++) {\n      const av = path[i]\n      const bv = another[i]\n\n      if (av !== bv) {\n        break\n      }\n\n      common.push(av)\n    }\n\n    return common\n  },\n\n  /**\n   * Compare a path to another, returning an integer indicating whether the path\n   * was before, at, or after the other.\n   *\n   * Note: Two paths of unequal length can still receive a `0` result if one is\n   * directly above or below the other. If you want exact matching, use\n   * [[Path.equals]] instead.\n   */\n\n  compare(path: Path, another: Path): -1 | 0 | 1 {\n    const min = Math.min(path.length, another.length)\n\n    for (let i = 0; i < min; i++) {\n      if (path[i] < another[i]) return -1\n      if (path[i] > another[i]) return 1\n    }\n\n    return 0\n  },\n\n  /**\n   * Check if a path ends after one of the indexes in another.\n   */\n\n  endsAfter(path: Path, another: Path): boolean {\n    const i = path.length - 1\n    const as = path.slice(0, i)\n    const bs = another.slice(0, i)\n    const av = path[i]\n    const bv = another[i]\n    return Path.equals(as, bs) && av > bv\n  },\n\n  /**\n   * Check if a path ends at one of the indexes in another.\n   */\n\n  endsAt(path: Path, another: Path): boolean {\n    const i = path.length\n    const as = path.slice(0, i)\n    const bs = another.slice(0, i)\n    return Path.equals(as, bs)\n  },\n\n  /**\n   * Check if a path ends before one of the indexes in another.\n   */\n\n  endsBefore(path: Path, another: Path): boolean {\n    const i = path.length - 1\n    const as = path.slice(0, i)\n    const bs = another.slice(0, i)\n    const av = path[i]\n    const bv = another[i]\n    return Path.equals(as, bs) && av < bv\n  },\n\n  /**\n   * Check if a path is exactly equal to another.\n   */\n\n  equals(path: Path, another: Path): boolean {\n    return (\n      path.length === another.length && path.every((n, i) => n === another[i])\n    )\n  },\n\n  /**\n   * Check if a path is after another.\n   */\n\n  isAfter(path: Path, another: Path): boolean {\n    return Path.compare(path, another) === 1\n  },\n\n  /**\n   * Check if a path is an ancestor of another.\n   */\n\n  isAncestor(path: Path, another: Path): boolean {\n    return path.length < another.length && Path.compare(path, another) === 0\n  },\n\n  /**\n   * Check if a path is before another.\n   */\n\n  isBefore(path: Path, another: Path): boolean {\n    return Path.compare(path, another) === -1\n  },\n\n  /**\n   * Check if a path is a child of another.\n   */\n\n  isChild(path: Path, another: Path): boolean {\n    return (\n      path.length === another.length + 1 && Path.compare(path, another) === 0\n    )\n  },\n\n  /**\n   * Check if a path is equal to or an ancestor of another.\n   */\n\n  isCommon(path: Path, another: Path): boolean {\n    return path.length <= another.length && Path.compare(path, another) === 0\n  },\n\n  /**\n   * Check if a path is a descendant of another.\n   */\n\n  isDescendant(path: Path, another: Path): boolean {\n    return path.length > another.length && Path.compare(path, another) === 0\n  },\n\n  /**\n   * Check if a path is the parent of another.\n   */\n\n  isParent(path: Path, another: Path): boolean {\n    return (\n      path.length + 1 === another.length && Path.compare(path, another) === 0\n    )\n  },\n\n  /**\n   * Check is a value implements the `Path` interface.\n   */\n\n  isPath(value: any): value is Path {\n    return (\n      Array.isArray(value) &&\n      (value.length === 0 || typeof value[0] === 'number')\n    )\n  },\n\n  /**\n   * Check if a path is a sibling of another.\n   */\n\n  isSibling(path: Path, another: Path): boolean {\n    if (path.length !== another.length) {\n      return false\n    }\n\n    const as = path.slice(0, -1)\n    const bs = another.slice(0, -1)\n    const al = path[path.length - 1]\n    const bl = another[another.length - 1]\n    return al !== bl && Path.equals(as, bs)\n  },\n\n  /**\n   * Get a list of paths at every level down to a path. Note: this is the same\n   * as `Path.ancestors`, but including the path itself.\n   *\n   * The paths are sorted from shallowest to deepest. However, if the `reverse:\n   * true` option is passed, they are reversed.\n   */\n\n  levels(\n    path: Path,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): Path[] {\n    const { reverse = false } = options\n    const list: Path[] = []\n\n    for (let i = 0; i <= path.length; i++) {\n      list.push(path.slice(0, i))\n    }\n\n    if (reverse) {\n      list.reverse()\n    }\n\n    return list\n  },\n\n  /**\n   * Given a path, get the path to the next sibling node.\n   */\n\n  next(path: Path): Path {\n    if (path.length === 0) {\n      throw new Error(\n        `Cannot get the next path of a root path [${path}], because it has no next index.`\n      )\n    }\n\n    const last = path[path.length - 1]\n    return path.slice(0, -1).concat(last + 1)\n  },\n\n  /**\n   * Given a path, return a new path referring to the parent node above it.\n   */\n\n  parent(path: Path): Path {\n    if (path.length === 0) {\n      throw new Error(`Cannot get the parent path of the root path [${path}].`)\n    }\n\n    return path.slice(0, -1)\n  },\n\n  /**\n   * Given a path, get the path to the previous sibling node.\n   */\n\n  previous(path: Path): Path {\n    if (path.length === 0) {\n      throw new Error(\n        `Cannot get the previous path of a root path [${path}], because it has no previous index.`\n      )\n    }\n\n    const last = path[path.length - 1]\n\n    if (last <= 0) {\n      throw new Error(\n        `Cannot get the previous path of a first child path [${path}] because it would result in a negative index.`\n      )\n    }\n\n    return path.slice(0, -1).concat(last - 1)\n  },\n\n  /**\n   * Get a path relative to an ancestor.\n   */\n\n  relative(path: Path, ancestor: Path): Path {\n    if (!Path.isAncestor(ancestor, path) && !Path.equals(path, ancestor)) {\n      throw new Error(\n        `Cannot get the relative path of [${path}] inside ancestor [${ancestor}], because it is not above or equal to the path.`\n      )\n    }\n\n    return path.slice(ancestor.length)\n  },\n\n  /**\n   * Transform a path by an operation.\n   */\n\n  transform(\n    path: Path,\n    operation: Operation,\n    options: { affinity?: 'forward' | 'backward' | null } = {}\n  ): Path | null {\n    return produce(path, p => {\n      const { affinity = 'forward' } = options\n\n      // PERF: Exit early if the operation is guaranteed not to have an effect.\n      if (path.length === 0) {\n        return\n      }\n\n      switch (operation.type) {\n        case 'insert_node': {\n          const { path: op } = operation\n\n          if (\n            Path.equals(op, p) ||\n            Path.endsBefore(op, p) ||\n            Path.isAncestor(op, p)\n          ) {\n            p[op.length - 1] += 1\n          }\n\n          break\n        }\n\n        case 'remove_node': {\n          const { path: op } = operation\n\n          if (Path.equals(op, p) || Path.isAncestor(op, p)) {\n            return null\n          } else if (Path.endsBefore(op, p)) {\n            p[op.length - 1] -= 1\n          }\n\n          break\n        }\n\n        case 'merge_node': {\n          const { path: op, position } = operation\n\n          if (Path.equals(op, p) || Path.endsBefore(op, p)) {\n            p[op.length - 1] -= 1\n          } else if (Path.isAncestor(op, p)) {\n            p[op.length - 1] -= 1\n            p[op.length] += position\n          }\n\n          break\n        }\n\n        case 'split_node': {\n          const { path: op, position } = operation\n\n          if (Path.equals(op, p)) {\n            if (affinity === 'forward') {\n              p[p.length - 1] += 1\n            } else if (affinity === 'backward') {\n              // Nothing, because it still refers to the right path.\n            } else {\n              return null\n            }\n          } else if (Path.endsBefore(op, p)) {\n            p[op.length - 1] += 1\n          } else if (Path.isAncestor(op, p) && path[op.length] >= position) {\n            p[op.length - 1] += 1\n            p[op.length] -= position\n          }\n\n          break\n        }\n\n        case 'move_node': {\n          const { path: op, newPath: onp } = operation\n\n          // If the old and new path are the same, it's a no-op.\n          if (Path.equals(op, onp)) {\n            return\n          }\n\n          if (Path.isAncestor(op, p) || Path.equals(op, p)) {\n            const copy = onp.slice()\n\n            if (Path.endsBefore(op, onp) && op.length < onp.length) {\n              copy[op.length - 1] -= 1\n            }\n\n            return copy.concat(p.slice(op.length))\n          } else if (\n            Path.isSibling(op, onp) &&\n            (Path.isAncestor(onp, p) || Path.equals(onp, p))\n          ) {\n            if (Path.endsBefore(op, p)) {\n              p[op.length - 1] -= 1\n            } else {\n              p[op.length - 1] += 1\n            }\n          } else if (\n            Path.endsBefore(onp, p) ||\n            Path.equals(onp, p) ||\n            Path.isAncestor(onp, p)\n          ) {\n            if (Path.endsBefore(op, p)) {\n              p[op.length - 1] -= 1\n            }\n\n            p[onp.length - 1] += 1\n          } else if (Path.endsBefore(op, p)) {\n            if (Path.equals(onp, p)) {\n              p[onp.length - 1] += 1\n            }\n\n            p[op.length - 1] -= 1\n          }\n\n          break\n        }\n      }\n    })\n  },\n}\n","import { Operation, Path } from '..'\n\n/**\n * `PathRef` objects keep a specific path in a document synced over time as new\n * operations are applied to the editor. You can access their `current` property\n * at any time for the up-to-date path value.\n */\n\nexport interface PathRef {\n  current: Path | null\n  affinity: 'forward' | 'backward' | null\n  unref(): Path | null\n}\n\nexport const PathRef = {\n  /**\n   * Transform the path ref's current value by an operation.\n   */\n\n  transform(ref: PathRef, op: Operation): void {\n    const { current, affinity } = ref\n\n    if (current == null) {\n      return\n    }\n\n    const path = Path.transform(current, op, { affinity })\n    ref.current = path\n\n    if (path == null) {\n      ref.unref()\n    }\n  },\n}\n","import isPlainObject from 'is-plain-object'\nimport { produce } from 'immer'\nimport { Operation, Path } from '..'\n\n/**\n * `Point` objects refer to a specific location in a text node in a Slate\n * document. Its path refers to the location of the node in the tree, and its\n * offset refers to the distance into the node's string of text. Points can\n * only refer to `Text` nodes.\n */\n\nexport interface Point {\n  path: Path\n  offset: number\n  [key: string]: unknown\n}\n\nexport const Point = {\n  /**\n   * Compare a point to another, returning an integer indicating whether the\n   * point was before, at, or after the other.\n   */\n\n  compare(point: Point, another: Point): -1 | 0 | 1 {\n    const result = Path.compare(point.path, another.path)\n\n    if (result === 0) {\n      if (point.offset < another.offset) return -1\n      if (point.offset > another.offset) return 1\n      return 0\n    }\n\n    return result\n  },\n\n  /**\n   * Check if a point is after another.\n   */\n\n  isAfter(point: Point, another: Point): boolean {\n    return Point.compare(point, another) === 1\n  },\n\n  /**\n   * Check if a point is before another.\n   */\n\n  isBefore(point: Point, another: Point): boolean {\n    return Point.compare(point, another) === -1\n  },\n\n  /**\n   * Check if a point is exactly equal to another.\n   */\n\n  equals(point: Point, another: Point): boolean {\n    // PERF: ensure the offsets are equal first since they are cheaper to check.\n    return (\n      point.offset === another.offset && Path.equals(point.path, another.path)\n    )\n  },\n\n  /**\n   * Check if a value implements the `Point` interface.\n   */\n\n  isPoint(value: any): value is Point {\n    return (\n      isPlainObject(value) &&\n      typeof value.offset === 'number' &&\n      Path.isPath(value.path)\n    )\n  },\n\n  /**\n   * Transform a point by an operation.\n   */\n\n  transform(\n    point: Point,\n    op: Operation,\n    options: { affinity?: 'forward' | 'backward' | null } = {}\n  ): Point | null {\n    return produce(point, p => {\n      const { affinity = 'forward' } = options\n      const { path, offset } = p\n\n      switch (op.type) {\n        case 'insert_node':\n        case 'move_node': {\n          p.path = Path.transform(path, op, options)!\n          break\n        }\n\n        case 'insert_text': {\n          if (Path.equals(op.path, path) && op.offset <= offset) {\n            p.offset += op.text.length\n          }\n\n          break\n        }\n\n        case 'merge_node': {\n          if (Path.equals(op.path, path)) {\n            p.offset += op.position\n          }\n\n          p.path = Path.transform(path, op, options)!\n          break\n        }\n\n        case 'remove_text': {\n          if (Path.equals(op.path, path) && op.offset <= offset) {\n            p.offset -= Math.min(offset - op.offset, op.text.length)\n          }\n\n          break\n        }\n\n        case 'remove_node': {\n          if (Path.equals(op.path, path) || Path.isAncestor(op.path, path)) {\n            return null\n          }\n\n          p.path = Path.transform(path, op, options)!\n          break\n        }\n\n        case 'split_node': {\n          if (Path.equals(op.path, path)) {\n            if (op.position === offset && affinity == null) {\n              return null\n            } else if (\n              op.position < offset ||\n              (op.position === offset && affinity === 'forward')\n            ) {\n              p.offset -= op.position\n\n              p.path = Path.transform(path, op, {\n                ...options,\n                affinity: 'forward',\n              })!\n            }\n          } else {\n            p.path = Path.transform(path, op, options)!\n          }\n\n          break\n        }\n      }\n    })\n  },\n}\n\n/**\n * `PointEntry` objects are returned when iterating over `Point` objects that\n * belong to a range.\n */\n\nexport type PointEntry = [Point, 'anchor' | 'focus']\n","import { Operation, Point } from '..'\n\n/**\n * `PointRef` objects keep a specific point in a document synced over time as new\n * operations are applied to the editor. You can access their `current` property\n * at any time for the up-to-date point value.\n */\n\nexport interface PointRef {\n  current: Point | null\n  affinity: 'forward' | 'backward' | null\n  unref(): Point | null\n}\n\nexport const PointRef = {\n  /**\n   * Transform the point ref's current value by an operation.\n   */\n\n  transform(ref: PointRef, op: Operation): void {\n    const { current, affinity } = ref\n\n    if (current == null) {\n      return\n    }\n\n    const point = Point.transform(current, op, { affinity })\n    ref.current = point\n\n    if (point == null) {\n      ref.unref()\n    }\n  },\n}\n","import { produce } from 'immer'\nimport isPlainObject from 'is-plain-object'\nimport { Operation, Path, Point, PointEntry } from '..'\n\n/**\n * `Range` objects are a set of points that refer to a specific span of a Slate\n * document. They can define a span inside a single node or a can span across\n * multiple nodes.\n */\n\nexport interface Range {\n  anchor: Point\n  focus: Point\n  [key: string]: unknown\n}\n\nexport const Range = {\n  /**\n   * Get the start and end points of a range, in the order in which they appear\n   * in the document.\n   */\n\n  edges(\n    range: Range,\n    options: {\n      reverse?: boolean\n    } = {}\n  ): [Point, Point] {\n    const { reverse = false } = options\n    const { anchor, focus } = range\n    return Range.isBackward(range) === reverse\n      ? [anchor, focus]\n      : [focus, anchor]\n  },\n\n  /**\n   * Get the end point of a range.\n   */\n\n  end(range: Range): Point {\n    const [, end] = Range.edges(range)\n    return end\n  },\n\n  /**\n   * Check if a range is exactly equal to another.\n   */\n\n  equals(range: Range, another: Range): boolean {\n    return (\n      Point.equals(range.anchor, another.anchor) &&\n      Point.equals(range.focus, another.focus)\n    )\n  },\n\n  /**\n   * Check if a range includes a path, a point or part of another range.\n   */\n\n  includes(range: Range, target: Path | Point | Range): boolean {\n    if (Range.isRange(target)) {\n      if (\n        Range.includes(range, target.anchor) ||\n        Range.includes(range, target.focus)\n      ) {\n        return true\n      }\n\n      const [rs, re] = Range.edges(range)\n      const [ts, te] = Range.edges(target)\n      return Point.isBefore(rs, ts) && Point.isAfter(re, te)\n    }\n\n    const [start, end] = Range.edges(range)\n    let isAfterStart = false\n    let isBeforeEnd = false\n\n    if (Point.isPoint(target)) {\n      isAfterStart = Point.compare(target, start) >= 0\n      isBeforeEnd = Point.compare(target, end) <= 0\n    } else {\n      isAfterStart = Path.compare(target, start.path) >= 0\n      isBeforeEnd = Path.compare(target, end.path) <= 0\n    }\n\n    return isAfterStart && isBeforeEnd\n  },\n\n  /**\n   * Get the intersection of a range with another.\n   */\n\n  intersection(range: Range, another: Range): Range | null {\n    const { anchor, focus, ...rest } = range\n    const [s1, e1] = Range.edges(range)\n    const [s2, e2] = Range.edges(another)\n    const start = Point.isBefore(s1, s2) ? s2 : s1\n    const end = Point.isBefore(e1, e2) ? e1 : e2\n\n    if (Point.isBefore(end, start)) {\n      return null\n    } else {\n      return { anchor: start, focus: end, ...rest }\n    }\n  },\n\n  /**\n   * Check if a range is backward, meaning that its anchor point appears in the\n   * document _after_ its focus point.\n   */\n\n  isBackward(range: Range): boolean {\n    const { anchor, focus } = range\n    return Point.isAfter(anchor, focus)\n  },\n\n  /**\n   * Check if a range is collapsed, meaning that both its anchor and focus\n   * points refer to the exact same position in the document.\n   */\n\n  isCollapsed(range: Range): boolean {\n    const { anchor, focus } = range\n    return Point.equals(anchor, focus)\n  },\n\n  /**\n   * Check if a range is expanded.\n   *\n   * This is the opposite of [[Range.isCollapsed]] and is provided for legibility.\n   */\n\n  isExpanded(range: Range): boolean {\n    return !Range.isCollapsed(range)\n  },\n\n  /**\n   * Check if a range is forward.\n   *\n   * This is the opposite of [[Range.isBackward]] and is provided for legibility.\n   */\n\n  isForward(range: Range): boolean {\n    return !Range.isBackward(range)\n  },\n\n  /**\n   * Check if a value implements the [[Range]] interface.\n   */\n\n  isRange(value: any): value is Range {\n    return (\n      isPlainObject(value) &&\n      Point.isPoint(value.anchor) &&\n      Point.isPoint(value.focus)\n    )\n  },\n\n  /**\n   * Iterate through all of the point entries in a range.\n   */\n\n  *points(range: Range): Iterable<PointEntry> {\n    yield [range.anchor, 'anchor']\n    yield [range.focus, 'focus']\n  },\n\n  /**\n   * Get the start point of a range.\n   */\n\n  start(range: Range): Point {\n    const [start] = Range.edges(range)\n    return start\n  },\n\n  /**\n   * Transform a range by an operation.\n   */\n\n  transform(\n    range: Range,\n    op: Operation,\n    options: { affinity: 'forward' | 'backward' | 'outward' | 'inward' | null }\n  ): Range | null {\n    const { affinity = 'inward' } = options\n    let affinityAnchor: 'forward' | 'backward' | null\n    let affinityFocus: 'forward' | 'backward' | null\n\n    if (affinity === 'inward') {\n      if (Range.isForward(range)) {\n        affinityAnchor = 'forward'\n        affinityFocus = 'backward'\n      } else {\n        affinityAnchor = 'backward'\n        affinityFocus = 'forward'\n      }\n    } else if (affinity === 'outward') {\n      if (Range.isForward(range)) {\n        affinityAnchor = 'backward'\n        affinityFocus = 'forward'\n      } else {\n        affinityAnchor = 'forward'\n        affinityFocus = 'backward'\n      }\n    } else {\n      affinityAnchor = affinity\n      affinityFocus = affinity\n    }\n\n    return produce(range, r => {\n      const anchor = Point.transform(r.anchor, op, { affinity: affinityAnchor })\n      const focus = Point.transform(r.focus, op, { affinity: affinityFocus })\n\n      if (!anchor || !focus) {\n        return null\n      }\n\n      r.anchor = anchor\n      r.focus = focus\n    })\n  },\n}\n","import { Operation, Range } from '..'\n\n/**\n * `RangeRef` objects keep a specific range in a document synced over time as new\n * operations are applied to the editor. You can access their `current` property\n * at any time for the up-to-date range value.\n */\n\nexport interface RangeRef {\n  current: Range | null\n  affinity: 'forward' | 'backward' | 'outward' | 'inward' | null\n  unref(): Range | null\n}\n\nexport const RangeRef = {\n  /**\n   * Transform the range ref's current value by an operation.\n   */\n\n  transform(ref: RangeRef, op: Operation): void {\n    const { current, affinity } = ref\n\n    if (current == null) {\n      return\n    }\n\n    const path = Range.transform(current, op, { affinity })\n    ref.current = path\n\n    if (path == null) {\n      ref.unref()\n    }\n  },\n}\n","import isPlainObject from 'is-plain-object'\nimport { Range } from '..'\n\n/**\n * `Text` objects represent the nodes that contain the actual text content of a\n * Slate document along with any formatting properties. They are always leaf\n * nodes in the document tree as they cannot contain any children.\n */\n\nexport interface Text {\n  text: string\n  [key: string]: unknown\n}\n\nexport const Text = {\n  /**\n   * Check if two text nodes are equal.\n   */\n\n  equals(\n    text: Text,\n    another: Text,\n    options: { loose?: boolean } = {}\n  ): boolean {\n    const { loose = false } = options\n\n    for (const key in text) {\n      if (loose && key === 'text') {\n        continue\n      }\n\n      if (text[key] !== another[key]) {\n        return false\n      }\n    }\n\n    for (const key in another) {\n      if (loose && key === 'text') {\n        continue\n      }\n\n      if (text[key] !== another[key]) {\n        return false\n      }\n    }\n\n    return true\n  },\n\n  /**\n   * Check if a value implements the `Text` interface.\n   */\n\n  isText(value: any): value is Text {\n    return isPlainObject(value) && typeof value.text === 'string'\n  },\n\n  /**\n   * Check if a value is a list of `Text` objects.\n   */\n\n  isTextList(value: any): value is Text[] {\n    return Array.isArray(value) && (value.length === 0 || Text.isText(value[0]))\n  },\n\n  /**\n   * Check if an text matches set of properties.\n   *\n   * Note: this is for matching custom properties, and it does not ensure that\n   * the `text` property are two nodes equal.\n   */\n\n  matches(text: Text, props: Partial<Text>): boolean {\n    for (const key in props) {\n      if (key === 'text') {\n        continue\n      }\n\n      if (text[key] !== props[key]) {\n        return false\n      }\n    }\n\n    return true\n  },\n\n  /**\n   * Get the leaves for a text node given decorations.\n   */\n\n  decorations(node: Text, decorations: Range[]): Text[] {\n    let leaves: Text[] = [{ ...node }]\n\n    for (const dec of decorations) {\n      const { anchor, focus, ...rest } = dec\n      const [start, end] = Range.edges(dec)\n      const next = []\n      let o = 0\n\n      for (const leaf of leaves) {\n        const { length } = leaf.text\n        const offset = o\n        o += length\n\n        // If the range encompases the entire leaf, add the range.\n        if (start.offset <= offset && end.offset >= offset + length) {\n          Object.assign(leaf, rest)\n          next.push(leaf)\n          continue\n        }\n\n        // If the range starts after the leaf, or ends before it, continue.\n        if (\n          start.offset > offset + length ||\n          end.offset < offset ||\n          (end.offset === offset && offset !== 0)\n        ) {\n          next.push(leaf)\n          continue\n        }\n\n        // Otherwise we need to split the leaf, at the start, end, or both,\n        // and add the range to the middle intersecting section. Do the end\n        // split first since we don't need to update the offset that way.\n        let middle = leaf\n        let before\n        let after\n\n        if (end.offset < offset + length) {\n          const off = end.offset - offset\n          after = { ...middle, text: middle.text.slice(off) }\n          middle = { ...middle, text: middle.text.slice(0, off) }\n        }\n\n        if (start.offset > offset) {\n          const off = start.offset - offset\n          before = { ...middle, text: middle.text.slice(0, off) }\n          middle = { ...middle, text: middle.text.slice(off) }\n        }\n\n        Object.assign(middle, rest)\n\n        if (before) {\n          next.push(before)\n        }\n\n        next.push(middle)\n\n        if (after) {\n          next.push(after)\n        }\n      }\n\n      leaves = next\n    }\n\n    return leaves\n  },\n}\n","import { createDraft, finishDraft, isDraft } from 'immer'\nimport {\n  Node,\n  Editor,\n  Range,\n  Point,\n  Text,\n  Element,\n  Operation,\n  Descendant,\n  NodeEntry,\n  Path,\n  Ancestor,\n} from '..'\n\nexport const GeneralTransforms = {\n  /**\n   * Transform the editor by an operation.\n   */\n\n  transform(editor: Editor, op: Operation) {\n    editor.children = createDraft(editor.children)\n    let selection = editor.selection && createDraft(editor.selection)\n\n    switch (op.type) {\n      case 'insert_node': {\n        const { path, node } = op\n        const parent = Node.parent(editor, path)\n        const index = path[path.length - 1]\n        parent.children.splice(index, 0, node)\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'insert_text': {\n        const { path, offset, text } = op\n        const node = Node.leaf(editor, path)\n        const before = node.text.slice(0, offset)\n        const after = node.text.slice(offset)\n        node.text = before + text + after\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'merge_node': {\n        const { path } = op\n        const node = Node.get(editor, path)\n        const prevPath = Path.previous(path)\n        const prev = Node.get(editor, prevPath)\n        const parent = Node.parent(editor, path)\n        const index = path[path.length - 1]\n\n        if (Text.isText(node) && Text.isText(prev)) {\n          prev.text += node.text\n        } else if (!Text.isText(node) && !Text.isText(prev)) {\n          prev.children.push(...node.children)\n        } else {\n          throw new Error(\n            `Cannot apply a \"merge_node\" operation at path [${path}] to nodes of different interaces: ${node} ${prev}`\n          )\n        }\n\n        parent.children.splice(index, 1)\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'move_node': {\n        const { path, newPath } = op\n\n        if (Path.isAncestor(path, newPath)) {\n          throw new Error(\n            `Cannot move a path [${path}] to new path [${newPath}] because the destination is inside itself.`\n          )\n        }\n\n        const node = Node.get(editor, path)\n        const parent = Node.parent(editor, path)\n        const index = path[path.length - 1]\n\n        // This is tricky, but since the `path` and `newPath` both refer to\n        // the same snapshot in time, there's a mismatch. After either\n        // removing the original position, the second step's path can be out\n        // of date. So instead of using the `op.newPath` directly, we\n        // transform `op.path` to ascertain what the `newPath` would be after\n        // the operation was applied.\n        parent.children.splice(index, 1)\n        const truePath = Path.transform(path, op)!\n        const newParent = Node.get(editor, Path.parent(truePath)) as Ancestor\n        const newIndex = truePath[truePath.length - 1]\n\n        newParent.children.splice(newIndex, 0, node)\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'remove_node': {\n        const { path } = op\n        const index = path[path.length - 1]\n        const parent = Node.parent(editor, path)\n        parent.children.splice(index, 1)\n\n        // Transform all of the points in the value, but if the point was in the\n        // node that was removed we need to update the range or remove it.\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            const result = Point.transform(point, op)\n\n            if (selection != null && result != null) {\n              selection[key] = result\n            } else {\n              let prev: NodeEntry<Text> | undefined\n              let next: NodeEntry<Text> | undefined\n\n              for (const [n, p] of Node.texts(editor)) {\n                if (Path.compare(p, path) === -1) {\n                  prev = [n, p]\n                } else {\n                  next = [n, p]\n                  break\n                }\n              }\n\n              if (prev) {\n                point.path = prev[1]\n                point.offset = prev[0].text.length\n              } else if (next) {\n                point.path = next[1]\n                point.offset = 0\n              } else {\n                selection = null\n              }\n            }\n          }\n        }\n\n        break\n      }\n\n      case 'remove_text': {\n        const { path, offset, text } = op\n        const node = Node.leaf(editor, path)\n        const before = node.text.slice(0, offset)\n        const after = node.text.slice(offset + text.length)\n        node.text = before + after\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n\n      case 'set_node': {\n        const { path, newProperties } = op\n\n        if (path.length === 0) {\n          throw new Error(`Cannot set properties on the root node!`)\n        }\n\n        const node = Node.get(editor, path)\n\n        for (const key in newProperties) {\n          if (key === 'children' || key === 'text') {\n            throw new Error(`Cannot set the \"${key}\" property of nodes!`)\n          }\n\n          const value = newProperties[key]\n\n          if (value == null) {\n            delete node[key]\n          } else {\n            node[key] = value\n          }\n        }\n\n        break\n      }\n\n      case 'set_selection': {\n        const { newProperties } = op\n\n        if (newProperties == null) {\n          selection = newProperties\n        } else if (selection == null) {\n          if (!Range.isRange(newProperties)) {\n            throw new Error(\n              `Cannot apply an incomplete \"set_selection\" operation properties ${JSON.stringify(\n                newProperties\n              )} when there is no current selection.`\n            )\n          }\n\n          selection = newProperties\n        } else {\n          Object.assign(selection, newProperties)\n        }\n\n        break\n      }\n\n      case 'split_node': {\n        const { path, position, properties } = op\n\n        if (path.length === 0) {\n          throw new Error(\n            `Cannot apply a \"split_node\" operation at path [${path}] because the root node cannot be split.`\n          )\n        }\n\n        const node = Node.get(editor, path)\n        const parent = Node.parent(editor, path)\n        const index = path[path.length - 1]\n        let newNode: Descendant\n\n        if (Text.isText(node)) {\n          const before = node.text.slice(0, position)\n          const after = node.text.slice(position)\n          node.text = before\n          newNode = {\n            ...node,\n            ...(properties as Partial<Text>),\n            text: after,\n          }\n        } else {\n          const before = node.children.slice(0, position)\n          const after = node.children.slice(position)\n          node.children = before\n\n          newNode = {\n            ...node,\n            ...(properties as Partial<Element>),\n            children: after,\n          }\n        }\n\n        parent.children.splice(index + 1, 0, newNode)\n\n        if (selection) {\n          for (const [point, key] of Range.points(selection)) {\n            selection[key] = Point.transform(point, op)!\n          }\n        }\n\n        break\n      }\n    }\n\n    editor.children = finishDraft(editor.children) as Node[]\n\n    if (selection) {\n      editor.selection = isDraft(selection)\n        ? (finishDraft(selection) as Range)\n        : selection\n    } else {\n      editor.selection = null\n    }\n  },\n}\n","import {\n  Editor,\n  Element,\n  Location,\n  Node,\n  Path,\n  Point,\n  Range,\n  Text,\n  Transforms,\n  NodeEntry,\n  Ancestor,\n} from '..'\n\nexport const NodeTransforms = {\n  /**\n   * Insert nodes at a specific location in the Editor.\n   */\n\n  insertNodes(\n    editor: Editor,\n    nodes: Node | Node[],\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'highest' | 'lowest'\n      hanging?: boolean\n      select?: boolean\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const { hanging = false, voids = false, mode = 'lowest' } = options\n      let { at, match, select } = options\n\n      if (Node.isNode(nodes)) {\n        nodes = [nodes]\n      }\n\n      if (nodes.length === 0) {\n        return\n      }\n\n      const [node] = nodes\n\n      // By default, use the selection as the target location. But if there is\n      // no selection, insert at the end of the document since that is such a\n      // common use case when inserting from a non-selected state.\n      if (!at) {\n        if (editor.selection) {\n          at = editor.selection\n        } else if (editor.children.length > 0) {\n          at = Editor.end(editor, [])\n        } else {\n          at = [0]\n        }\n\n        select = true\n      }\n\n      if (select == null) {\n        select = false\n      }\n\n      if (Range.isRange(at)) {\n        if (!hanging) {\n          at = Editor.unhangRange(editor, at)\n        }\n\n        if (Range.isCollapsed(at)) {\n          at = at.anchor\n        } else {\n          const [, end] = Range.edges(at)\n          const pointRef = Editor.pointRef(editor, end)\n          Transforms.delete(editor, { at })\n          at = pointRef.unref()!\n        }\n      }\n\n      if (Point.isPoint(at)) {\n        if (match == null) {\n          if (Text.isText(node)) {\n            match = n => Text.isText(n)\n          } else if (editor.isInline(node)) {\n            match = n => Text.isText(n) || Editor.isInline(editor, n)\n          } else {\n            match = n => Editor.isBlock(editor, n)\n          }\n        }\n\n        const [entry] = Editor.nodes(editor, {\n          at: at.path,\n          match,\n          mode,\n          voids,\n        })\n\n        if (entry) {\n          const [, matchPath] = entry\n          const pathRef = Editor.pathRef(editor, matchPath)\n          const isAtEnd = Editor.isEnd(editor, at, matchPath)\n          Transforms.splitNodes(editor, { at, match, mode, voids })\n          const path = pathRef.unref()!\n          at = isAtEnd ? Path.next(path) : path\n        } else {\n          return\n        }\n      }\n\n      const parentPath = Path.parent(at)\n      let index = at[at.length - 1]\n\n      if (!voids && Editor.void(editor, { at: parentPath })) {\n        return\n      }\n\n      for (const node of nodes) {\n        const path = parentPath.concat(index)\n        index++\n        editor.apply({ type: 'insert_node', path, node })\n      }\n\n      if (select) {\n        const point = Editor.end(editor, at)\n\n        if (point) {\n          Transforms.select(editor, point)\n        }\n      }\n    })\n  },\n\n  /**\n   * Lift nodes at a specific location upwards in the document tree, splitting\n   * their parent in two if necessary.\n   */\n\n  liftNodes(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'all' | 'highest' | 'lowest'\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const { at = editor.selection, mode = 'lowest', voids = false } = options\n      let { match } = options\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      if (!at) {\n        return\n      }\n\n      const matches = Editor.nodes(editor, { at, match, mode, voids })\n      const pathRefs = Array.from(matches, ([, p]) => Editor.pathRef(editor, p))\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n\n        if (path.length < 2) {\n          throw new Error(\n            `Cannot lift node at a path [${path}] because it has a depth of less than \\`2\\`.`\n          )\n        }\n\n        const parentNodeEntry = Editor.node(editor, Path.parent(path))\n        const [parent, parentPath] = parentNodeEntry as NodeEntry<Ancestor>\n        const index = path[path.length - 1]\n        const { length } = parent.children\n\n        if (length === 1) {\n          const toPath = Path.next(parentPath)\n          Transforms.moveNodes(editor, { at: path, to: toPath, voids })\n          Transforms.removeNodes(editor, { at: parentPath, voids })\n        } else if (index === 0) {\n          Transforms.moveNodes(editor, { at: path, to: parentPath, voids })\n        } else if (index === length - 1) {\n          const toPath = Path.next(parentPath)\n          Transforms.moveNodes(editor, { at: path, to: toPath, voids })\n        } else {\n          const splitPath = Path.next(path)\n          const toPath = Path.next(parentPath)\n          Transforms.splitNodes(editor, { at: splitPath, voids })\n          Transforms.moveNodes(editor, { at: path, to: toPath, voids })\n        }\n      }\n    })\n  },\n\n  /**\n   * Merge a node at a location with the previous node of the same depth,\n   * removing any empty containing nodes after the merge if necessary.\n   */\n\n  mergeNodes(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'highest' | 'lowest'\n      hanging?: boolean\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      let { match, at = editor.selection } = options\n      const { hanging = false, voids = false, mode = 'lowest' } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        if (Path.isPath(at)) {\n          const [parent] = Editor.parent(editor, at)\n          match = n => parent.children.includes(n)\n        } else {\n          match = n => Editor.isBlock(editor, n)\n        }\n      }\n\n      if (!hanging && Range.isRange(at)) {\n        at = Editor.unhangRange(editor, at)\n      }\n\n      if (Range.isRange(at)) {\n        if (Range.isCollapsed(at)) {\n          at = at.anchor\n        } else {\n          const [, end] = Range.edges(at)\n          const pointRef = Editor.pointRef(editor, end)\n          Transforms.delete(editor, { at })\n          at = pointRef.unref()!\n\n          if (options.at == null) {\n            Transforms.select(editor, at)\n          }\n        }\n      }\n\n      const [current] = Editor.nodes(editor, { at, match, voids, mode })\n      const prev = Editor.previous(editor, { at, match, voids, mode })\n\n      if (!current || !prev) {\n        return\n      }\n\n      const [node, path] = current\n      const [prevNode, prevPath] = prev\n\n      if (path.length === 0 || prevPath.length === 0) {\n        return\n      }\n\n      const newPath = Path.next(prevPath)\n      const commonPath = Path.common(path, prevPath)\n      const isPreviousSibling = Path.isSibling(path, prevPath)\n      const levels = Array.from(Editor.levels(editor, { at: path }), ([n]) => n)\n        .slice(commonPath.length)\n        .slice(0, -1)\n\n      // Determine if the merge will leave an ancestor of the path empty as a\n      // result, in which case we'll want to remove it after merging.\n      const emptyAncestor = Editor.above(editor, {\n        at: path,\n        mode: 'highest',\n        match: n =>\n          levels.includes(n) && Element.isElement(n) && n.children.length === 1,\n      })\n\n      const emptyRef = emptyAncestor && Editor.pathRef(editor, emptyAncestor[1])\n      let properties\n      let position\n\n      // Ensure that the nodes are equivalent, and figure out what the position\n      // and extra properties of the merge will be.\n      if (Text.isText(node) && Text.isText(prevNode)) {\n        const { text, ...rest } = node\n        position = prevNode.text.length\n        properties = rest as Partial<Text>\n      } else if (Element.isElement(node) && Element.isElement(prevNode)) {\n        const { children, ...rest } = node\n        position = prevNode.children.length\n        properties = rest as Partial<Element>\n      } else {\n        throw new Error(\n          `Cannot merge the node at path [${path}] with the previous sibling because it is not the same kind: ${JSON.stringify(\n            node\n          )} ${JSON.stringify(prevNode)}`\n        )\n      }\n\n      // If the node isn't already the next sibling of the previous node, move\n      // it so that it is before merging.\n      if (!isPreviousSibling) {\n        Transforms.moveNodes(editor, { at: path, to: newPath, voids })\n      }\n\n      // If there was going to be an empty ancestor of the node that was merged,\n      // we remove it from the tree.\n      if (emptyRef) {\n        Transforms.removeNodes(editor, { at: emptyRef.current!, voids })\n      }\n\n      // If the target node that we're merging with is empty, remove it instead\n      // of merging the two. This is a common rich text editor behavior to\n      // prevent losing formatting when deleting entire nodes when you have a\n      // hanging selection.\n      if (\n        (Element.isElement(prevNode) && Editor.isEmpty(editor, prevNode)) ||\n        (Text.isText(prevNode) && prevNode.text === '')\n      ) {\n        Transforms.removeNodes(editor, { at: prevPath, voids })\n      } else {\n        editor.apply({\n          type: 'merge_node',\n          path: newPath,\n          position,\n          properties,\n        })\n      }\n\n      if (emptyRef) {\n        emptyRef.unref()\n      }\n    })\n  },\n\n  /**\n   * Move the nodes at a location to a new location.\n   */\n\n  moveNodes(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'all' | 'highest' | 'lowest'\n      to: Path\n      voids?: boolean\n    }\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const {\n        to,\n        at = editor.selection,\n        mode = 'lowest',\n        voids = false,\n      } = options\n      let { match } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      const toRef = Editor.pathRef(editor, to)\n      const targets = Editor.nodes(editor, { at, match, mode, voids })\n      const pathRefs = Array.from(targets, ([, p]) => Editor.pathRef(editor, p))\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n        const newPath = toRef.current!\n\n        if (path.length !== 0) {\n          editor.apply({ type: 'move_node', path, newPath })\n        }\n      }\n\n      toRef.unref()\n    })\n  },\n\n  /**\n   * Remove the nodes at a specific location in the document.\n   */\n\n  removeNodes(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'highest' | 'lowest'\n      hanging?: boolean\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const { hanging = false, voids = false, mode = 'lowest' } = options\n      let { at = editor.selection, match } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      if (!hanging && Range.isRange(at)) {\n        at = Editor.unhangRange(editor, at)\n      }\n\n      const depths = Editor.nodes(editor, { at, match, mode, voids })\n      const pathRefs = Array.from(depths, ([, p]) => Editor.pathRef(editor, p))\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n\n        if (path) {\n          const [node] = Editor.node(editor, path)\n          editor.apply({ type: 'remove_node', path, node })\n        }\n      }\n    })\n  },\n\n  /**\n   * Set new properties on the nodes at a location.\n   */\n\n  setNodes(\n    editor: Editor,\n    props: Partial<Node>,\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'all' | 'highest' | 'lowest'\n      hanging?: boolean\n      split?: boolean\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      let { match, at = editor.selection } = options\n      const {\n        hanging = false,\n        mode = 'lowest',\n        split = false,\n        voids = false,\n      } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      if (!hanging && Range.isRange(at)) {\n        at = Editor.unhangRange(editor, at)\n      }\n\n      if (split && Range.isRange(at)) {\n        const rangeRef = Editor.rangeRef(editor, at, { affinity: 'inward' })\n        const [start, end] = Range.edges(at)\n        const splitMode = mode === 'lowest' ? 'lowest' : 'highest'\n        Transforms.splitNodes(editor, {\n          at: end,\n          match,\n          mode: splitMode,\n          voids,\n        })\n        Transforms.splitNodes(editor, {\n          at: start,\n          match,\n          mode: splitMode,\n          voids,\n        })\n        at = rangeRef.unref()!\n\n        if (options.at == null) {\n          Transforms.select(editor, at)\n        }\n      }\n\n      for (const [node, path] of Editor.nodes(editor, {\n        at,\n        match,\n        mode,\n        voids,\n      })) {\n        const properties: Partial<Node> = {}\n        const newProperties: Partial<Node> = {}\n\n        // You can't set properties on the editor node.\n        if (path.length === 0) {\n          continue\n        }\n\n        for (const k in props) {\n          if (k === 'children' || k === 'text') {\n            continue\n          }\n\n          if (props[k] !== node[k]) {\n            properties[k] = node[k]\n            newProperties[k] = props[k]\n          }\n        }\n\n        if (Object.keys(newProperties).length !== 0) {\n          editor.apply({\n            type: 'set_node',\n            path,\n            properties,\n            newProperties,\n          })\n        }\n      }\n    })\n  },\n\n  /**\n   * Split the nodes at a specific location.\n   */\n\n  splitNodes(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'highest' | 'lowest'\n      always?: boolean\n      height?: number\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const { mode = 'lowest', voids = false } = options\n      let { match, at = editor.selection, height = 0, always = false } = options\n\n      if (match == null) {\n        match = n => Editor.isBlock(editor, n)\n      }\n\n      if (Range.isRange(at)) {\n        at = deleteRange(editor, at)\n      }\n\n      // If the target is a path, the default height-skipping and position\n      // counters need to account for us potentially splitting at a non-leaf.\n      if (Path.isPath(at)) {\n        const path = at\n        const point = Editor.point(editor, path)\n        const [parent] = Editor.parent(editor, path)\n        match = n => n === parent\n        height = point.path.length - path.length + 1\n        at = point\n        always = true\n      }\n\n      if (!at) {\n        return\n      }\n\n      const beforeRef = Editor.pointRef(editor, at, {\n        affinity: 'backward',\n      })\n      const [highest] = Editor.nodes(editor, { at, match, mode, voids })\n\n      if (!highest) {\n        return\n      }\n\n      const voidMatch = Editor.void(editor, { at, mode: 'highest' })\n      const nudge = 0\n\n      if (!voids && voidMatch) {\n        const [voidNode, voidPath] = voidMatch\n\n        if (Element.isElement(voidNode) && editor.isInline(voidNode)) {\n          let after = Editor.after(editor, voidPath)\n\n          if (!after) {\n            const text = { text: '' }\n            const afterPath = Path.next(voidPath)\n            Transforms.insertNodes(editor, text, { at: afterPath, voids })\n            after = Editor.point(editor, afterPath)!\n          }\n\n          at = after\n          always = true\n        }\n\n        const siblingHeight = at.path.length - voidPath.length\n        height = siblingHeight + 1\n        always = true\n      }\n\n      const afterRef = Editor.pointRef(editor, at)\n      const depth = at.path.length - height\n      const [, highestPath] = highest\n      const lowestPath = at.path.slice(0, depth)\n      let position = height === 0 ? at.offset : at.path[depth] + nudge\n\n      for (const [node, path] of Editor.levels(editor, {\n        at: lowestPath,\n        reverse: true,\n        voids,\n      })) {\n        let split = false\n\n        if (\n          path.length < highestPath.length ||\n          path.length === 0 ||\n          (!voids && Editor.isVoid(editor, node))\n        ) {\n          break\n        }\n\n        const point = beforeRef.current!\n        const isEnd = Editor.isEnd(editor, point, path)\n\n        if (always || !beforeRef || !Editor.isEdge(editor, point, path)) {\n          split = true\n          const { text, children, ...properties } = node\n          editor.apply({\n            type: 'split_node',\n            path,\n            position,\n            properties,\n          })\n        }\n\n        position = path[path.length - 1] + (split || isEnd ? 1 : 0)\n      }\n\n      if (options.at == null) {\n        const point = afterRef.current || Editor.end(editor, [])\n        Transforms.select(editor, point)\n      }\n\n      beforeRef.unref()\n      afterRef.unref()\n    })\n  },\n\n  /**\n   * Unset properties on the nodes at a location.\n   */\n\n  unsetNodes(\n    editor: Editor,\n    props: string | string[],\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'all' | 'highest' | 'lowest'\n      split?: boolean\n      voids?: boolean\n    } = {}\n  ) {\n    if (!Array.isArray(props)) {\n      props = [props]\n    }\n\n    const obj = {}\n\n    for (const key of props) {\n      obj[key] = null\n    }\n\n    Transforms.setNodes(editor, obj, options)\n  },\n\n  /**\n   * Unwrap the nodes at a location from a parent node, splitting the parent if\n   * necessary to ensure that only the content in the range is unwrapped.\n   */\n\n  unwrapNodes(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'all' | 'highest' | 'lowest'\n      split?: boolean\n      voids?: boolean\n    }\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const { mode = 'lowest', split = false, voids = false } = options\n      let { at = editor.selection, match } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        match = Path.isPath(at)\n          ? matchPath(editor, at)\n          : n => Editor.isBlock(editor, n)\n      }\n\n      if (Path.isPath(at)) {\n        at = Editor.range(editor, at)\n      }\n\n      const rangeRef = Range.isRange(at) ? Editor.rangeRef(editor, at) : null\n      const matches = Editor.nodes(editor, { at, match, mode, voids })\n      const pathRefs = Array.from(matches, ([, p]) => Editor.pathRef(editor, p))\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n        const [node] = Editor.node(editor, path) as NodeEntry<Ancestor>\n        let range = Editor.range(editor, path)\n\n        if (split && rangeRef) {\n          range = Range.intersection(rangeRef.current!, range)!\n        }\n\n        Transforms.liftNodes(editor, {\n          at: range,\n          match: n => node.children.includes(n),\n          voids,\n        })\n      }\n\n      if (rangeRef) {\n        rangeRef.unref()\n      }\n    })\n  },\n\n  /**\n   * Wrap the nodes at a location in a new container node, splitting the edges\n   * of the range first to ensure that only the content in the range is wrapped.\n   */\n\n  wrapNodes(\n    editor: Editor,\n    element: Element,\n    options: {\n      at?: Location\n      match?: (node: Node) => boolean\n      mode?: 'all' | 'highest' | 'lowest'\n      split?: boolean\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const { mode = 'lowest', split = false, voids = false } = options\n      let { match, at = editor.selection } = options\n\n      if (!at) {\n        return\n      }\n\n      if (match == null) {\n        if (Path.isPath(at)) {\n          match = matchPath(editor, at)\n        } else if (editor.isInline(element)) {\n          match = n => Editor.isInline(editor, n) || Text.isText(n)\n        } else {\n          match = n => Editor.isBlock(editor, n)\n        }\n      }\n\n      if (split && Range.isRange(at)) {\n        const [start, end] = Range.edges(at)\n        const rangeRef = Editor.rangeRef(editor, at, {\n          affinity: 'inward',\n        })\n        Transforms.splitNodes(editor, { at: end, match, voids })\n        Transforms.splitNodes(editor, { at: start, match, voids })\n        at = rangeRef.unref()!\n\n        if (options.at == null) {\n          Transforms.select(editor, at)\n        }\n      }\n\n      const roots = Array.from(\n        Editor.nodes(editor, {\n          at,\n          match: editor.isInline(element)\n            ? n => Editor.isBlock(editor, n)\n            : n => Editor.isEditor(n),\n          mode: 'lowest',\n          voids,\n        })\n      )\n\n      for (const [, rootPath] of roots) {\n        const a = Range.isRange(at)\n          ? Range.intersection(at, Editor.range(editor, rootPath))\n          : at\n\n        if (!a) {\n          continue\n        }\n\n        const matches = Array.from(\n          Editor.nodes(editor, { at: a, match, mode, voids })\n        )\n\n        if (matches.length > 0) {\n          const [first] = matches\n          const last = matches[matches.length - 1]\n          const [, firstPath] = first\n          const [, lastPath] = last\n          const commonPath = Path.equals(firstPath, lastPath)\n            ? Path.parent(firstPath)\n            : Path.common(firstPath, lastPath)\n\n          const range = Editor.range(editor, firstPath, lastPath)\n          const commonNodeEntry = Editor.node(editor, commonPath)\n          const [commonNode] = commonNodeEntry as NodeEntry<Ancestor>\n          const depth = commonPath.length + 1\n          const wrapperPath = Path.next(lastPath.slice(0, depth))\n          const wrapper = { ...element, children: [] }\n          Transforms.insertNodes(editor, wrapper, { at: wrapperPath, voids })\n\n          Transforms.moveNodes(editor, {\n            at: range,\n            match: n => commonNode.children.includes(n),\n            to: wrapperPath.concat(0),\n            voids,\n          })\n        }\n      }\n    })\n  },\n}\n\n/**\n * Convert a range into a point by deleting it's content.\n */\n\nconst deleteRange = (editor: Editor, range: Range): Point | null => {\n  if (Range.isCollapsed(range)) {\n    return range.anchor\n  } else {\n    const [, end] = Range.edges(range)\n    const pointRef = Editor.pointRef(editor, end)\n    Transforms.delete(editor, { at: range })\n    return pointRef.unref()\n  }\n}\n\nconst matchPath = (editor: Editor, path: Path): ((node: Node) => boolean) => {\n  const [node] = Editor.node(editor, path)\n  return n => n === node\n}\n","import { Editor, Location, Point, Range, Transforms } from '..'\n\nexport const SelectionTransforms = {\n  /**\n   * Collapse the selection.\n   */\n\n  collapse(\n    editor: Editor,\n    options: {\n      edge?: 'anchor' | 'focus' | 'start' | 'end'\n    } = {}\n  ) {\n    const { edge = 'anchor' } = options\n    const { selection } = editor\n\n    if (!selection) {\n      return\n    } else if (edge === 'anchor') {\n      Transforms.select(editor, selection.anchor)\n    } else if (edge === 'focus') {\n      Transforms.select(editor, selection.focus)\n    } else if (edge === 'start') {\n      const [start] = Range.edges(selection)\n      Transforms.select(editor, start)\n    } else if (edge === 'end') {\n      const [, end] = Range.edges(selection)\n      Transforms.select(editor, end)\n    }\n  },\n\n  /**\n   * Unset the selection.\n   */\n\n  deselect(editor: Editor) {\n    const { selection } = editor\n\n    if (selection) {\n      editor.apply({\n        type: 'set_selection',\n        properties: selection,\n        newProperties: null,\n      })\n    }\n  },\n\n  /**\n   * Move the selection's point forward or backward.\n   */\n\n  move(\n    editor: Editor,\n    options: {\n      distance?: number\n      unit?: 'offset' | 'character' | 'word' | 'line'\n      reverse?: boolean\n      edge?: 'anchor' | 'focus' | 'start' | 'end'\n    } = {}\n  ) {\n    const { selection } = editor\n    const { distance = 1, unit = 'character', reverse = false } = options\n    let { edge = null } = options\n\n    if (!selection) {\n      return\n    }\n\n    if (edge === 'start') {\n      edge = Range.isBackward(selection) ? 'focus' : 'anchor'\n    }\n\n    if (edge === 'end') {\n      edge = Range.isBackward(selection) ? 'anchor' : 'focus'\n    }\n\n    const { anchor, focus } = selection\n    const opts = { distance, unit }\n    const props: Partial<Range> = {}\n\n    if (edge == null || edge === 'anchor') {\n      const point = reverse\n        ? Editor.before(editor, anchor, opts)\n        : Editor.after(editor, anchor, opts)\n\n      if (point) {\n        props.anchor = point\n      }\n    }\n\n    if (edge == null || edge === 'focus') {\n      const point = reverse\n        ? Editor.before(editor, focus, opts)\n        : Editor.after(editor, focus, opts)\n\n      if (point) {\n        props.focus = point\n      }\n    }\n\n    Transforms.setSelection(editor, props)\n  },\n\n  /**\n   * Set the selection to a new value.\n   */\n\n  select(editor: Editor, target: Location) {\n    const { selection } = editor\n    target = Editor.range(editor, target)\n\n    if (selection) {\n      Transforms.setSelection(editor, target)\n      return\n    }\n\n    if (!Range.isRange(target)) {\n      throw new Error(\n        `When setting the selection and the current selection is \\`null\\` you must provide at least an \\`anchor\\` and \\`focus\\`, but you passed: ${JSON.stringify(\n          target\n        )}`\n      )\n    }\n\n    editor.apply({\n      type: 'set_selection',\n      properties: selection,\n      newProperties: target,\n    })\n  },\n\n  /**\n   * Set new properties on one of the selection's points.\n   */\n\n  setPoint(\n    editor: Editor,\n    props: Partial<Point>,\n    options: {\n      edge?: 'anchor' | 'focus' | 'start' | 'end'\n    }\n  ) {\n    const { selection } = editor\n    let { edge = 'both' } = options\n\n    if (!selection) {\n      return\n    }\n\n    if (edge === 'start') {\n      edge = Range.isBackward(selection) ? 'focus' : 'anchor'\n    }\n\n    if (edge === 'end') {\n      edge = Range.isBackward(selection) ? 'anchor' : 'focus'\n    }\n\n    const { anchor, focus } = selection\n    const point = edge === 'anchor' ? anchor : focus\n\n    Transforms.setSelection(editor, {\n      [edge === 'anchor' ? 'anchor' : 'focus']: { ...point, ...props },\n    })\n  },\n\n  /**\n   * Set new properties on the selection.\n   */\n\n  setSelection(editor: Editor, props: Partial<Range>) {\n    const { selection } = editor\n    const oldProps: Partial<Range> | null = {}\n    const newProps: Partial<Range> = {}\n\n    if (!selection) {\n      return\n    }\n\n    for (const k in props) {\n      if (\n        (k === 'anchor' &&\n          props.anchor != null &&\n          !Point.equals(props.anchor, selection.anchor)) ||\n        (k === 'focus' &&\n          props.focus != null &&\n          !Point.equals(props.focus, selection.focus)) ||\n        (k !== 'anchor' && k !== 'focus' && props[k] !== selection[k])\n      ) {\n        oldProps[k] = selection[k]\n        newProps[k] = props[k]\n      }\n    }\n\n    if (Object.keys(oldProps).length > 0) {\n      editor.apply({\n        type: 'set_selection',\n        properties: oldProps,\n        newProperties: newProps,\n      })\n    }\n  },\n}\n","import {\n  Editor,\n  Element,\n  Location,\n  Node,\n  NodeEntry,\n  Path,\n  Text,\n  Point,\n  Range,\n  Transforms,\n} from '..'\n\nexport const TextTransforms = {\n  /**\n   * Delete content in the editor.\n   */\n\n  delete(\n    editor: Editor,\n    options: {\n      at?: Location\n      distance?: number\n      unit?: 'character' | 'word' | 'line' | 'block'\n      reverse?: boolean\n      hanging?: boolean\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const {\n        reverse = false,\n        unit = 'character',\n        distance = 1,\n        voids = false,\n      } = options\n      let { at = editor.selection, hanging = false } = options\n\n      if (!at) {\n        return\n      }\n\n      if (Range.isRange(at) && Range.isCollapsed(at)) {\n        at = at.anchor\n      }\n\n      if (Point.isPoint(at)) {\n        const furthestVoid = Editor.void(editor, { at, mode: 'highest' })\n\n        if (!voids && furthestVoid) {\n          const [, voidPath] = furthestVoid\n          at = voidPath\n        } else {\n          const opts = { unit, distance }\n          const target = reverse\n            ? Editor.before(editor, at, opts) || Editor.start(editor, [])\n            : Editor.after(editor, at, opts) || Editor.end(editor, [])\n          at = { anchor: at, focus: target }\n          hanging = true\n        }\n      }\n\n      if (Path.isPath(at)) {\n        Transforms.removeNodes(editor, { at, voids })\n        return\n      }\n\n      if (Range.isCollapsed(at)) {\n        return\n      }\n\n      if (!hanging) {\n        at = Editor.unhangRange(editor, at, { voids })\n      }\n\n      let [start, end] = Range.edges(at)\n      const startBlock = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n        at: start,\n        voids,\n      })\n      const endBlock = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n        at: end,\n        voids,\n      })\n      const isAcrossBlocks =\n        startBlock && endBlock && !Path.equals(startBlock[1], endBlock[1])\n      const isSingleText = Path.equals(start.path, end.path)\n      const startVoid = voids\n        ? null\n        : Editor.void(editor, { at: start, mode: 'highest' })\n      const endVoid = voids\n        ? null\n        : Editor.void(editor, { at: end, mode: 'highest' })\n\n      // If the start or end points are inside an inline void, nudge them out.\n      if (startVoid) {\n        const before = Editor.before(editor, start)\n\n        if (\n          before &&\n          startBlock &&\n          Path.isAncestor(startBlock[1], before.path)\n        ) {\n          start = before\n        }\n      }\n\n      if (endVoid) {\n        const after = Editor.after(editor, end)\n\n        if (after && endBlock && Path.isAncestor(endBlock[1], after.path)) {\n          end = after\n        }\n      }\n\n      // Get the highest nodes that are completely inside the range, as well as\n      // the start and end nodes.\n      const matches: NodeEntry[] = []\n      let lastPath: Path | undefined\n\n      for (const entry of Editor.nodes(editor, { at, voids })) {\n        const [node, path] = entry\n\n        if (lastPath && Path.compare(path, lastPath) === 0) {\n          continue\n        }\n\n        if (\n          (!voids && Editor.isVoid(editor, node)) ||\n          (!Path.isCommon(path, start.path) && !Path.isCommon(path, end.path))\n        ) {\n          matches.push(entry)\n          lastPath = path\n        }\n      }\n\n      const pathRefs = Array.from(matches, ([, p]) => Editor.pathRef(editor, p))\n      const startRef = Editor.pointRef(editor, start)\n      const endRef = Editor.pointRef(editor, end)\n\n      if (!isSingleText && !startVoid) {\n        const point = startRef.current!\n        const [node] = Editor.leaf(editor, point)\n        const { path } = point\n        const { offset } = start\n        const text = node.text.slice(offset)\n        editor.apply({ type: 'remove_text', path, offset, text })\n      }\n\n      for (const pathRef of pathRefs) {\n        const path = pathRef.unref()!\n        Transforms.removeNodes(editor, { at: path, voids })\n      }\n\n      if (!endVoid) {\n        const point = endRef.current!\n        const [node] = Editor.leaf(editor, point)\n        const { path } = point\n        const offset = isSingleText ? start.offset : 0\n        const text = node.text.slice(offset, end.offset)\n        editor.apply({ type: 'remove_text', path, offset, text })\n      }\n\n      if (\n        !isSingleText &&\n        isAcrossBlocks &&\n        endRef.current &&\n        startRef.current\n      ) {\n        Transforms.mergeNodes(editor, {\n          at: endRef.current,\n          hanging: true,\n          voids,\n        })\n      }\n\n      const point = endRef.unref() || startRef.unref()\n\n      if (options.at == null && point) {\n        Transforms.select(editor, point)\n      }\n    })\n  },\n\n  /**\n   * Insert a fragment at a specific location in the editor.\n   */\n\n  insertFragment(\n    editor: Editor,\n    fragment: Node[],\n    options: {\n      at?: Location\n      hanging?: boolean\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const { hanging = false, voids = false } = options\n      let { at = editor.selection } = options\n\n      if (!fragment.length) {\n        return\n      }\n\n      if (!at) {\n        return\n      } else if (Range.isRange(at)) {\n        if (!hanging) {\n          at = Editor.unhangRange(editor, at)\n        }\n\n        if (Range.isCollapsed(at)) {\n          at = at.anchor\n        } else {\n          const [, end] = Range.edges(at)\n\n          if (!voids && Editor.void(editor, { at: end })) {\n            return\n          }\n\n          const pointRef = Editor.pointRef(editor, end)\n          Transforms.delete(editor, { at })\n          at = pointRef.unref()!\n        }\n      } else if (Path.isPath(at)) {\n        at = Editor.start(editor, at)\n      }\n\n      if (!voids && Editor.void(editor, { at })) {\n        return\n      }\n\n      // If the insert point is at the edge of an inline node, move it outside\n      // instead since it will need to be split otherwise.\n      const inlineElementMatch = Editor.above(editor, {\n        at,\n        match: n => Editor.isInline(editor, n),\n        mode: 'highest',\n        voids,\n      })\n\n      if (inlineElementMatch) {\n        const [, inlinePath] = inlineElementMatch\n\n        if (Editor.isEnd(editor, at, inlinePath)) {\n          const after = Editor.after(editor, inlinePath)!\n          at = after\n        } else if (Editor.isStart(editor, at, inlinePath)) {\n          const before = Editor.before(editor, inlinePath)!\n          at = before\n        }\n      }\n\n      const blockMatch = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n        at,\n        voids,\n      })!\n      const [, blockPath] = blockMatch\n      const isBlockStart = Editor.isStart(editor, at, blockPath)\n      const isBlockEnd = Editor.isEnd(editor, at, blockPath)\n      const mergeStart = !isBlockStart || (isBlockStart && isBlockEnd)\n      const mergeEnd = !isBlockEnd\n      const [, firstPath] = Node.first({ children: fragment }, [])\n      const [, lastPath] = Node.last({ children: fragment }, [])\n\n      const matches: NodeEntry[] = []\n      const matcher = ([n, p]: NodeEntry) => {\n        if (\n          mergeStart &&\n          Path.isAncestor(p, firstPath) &&\n          Element.isElement(n) &&\n          !editor.isVoid(n) &&\n          !editor.isInline(n)\n        ) {\n          return false\n        }\n\n        if (\n          mergeEnd &&\n          Path.isAncestor(p, lastPath) &&\n          Element.isElement(n) &&\n          !editor.isVoid(n) &&\n          !editor.isInline(n)\n        ) {\n          return false\n        }\n\n        return true\n      }\n\n      for (const entry of Node.nodes(\n        { children: fragment },\n        { pass: matcher }\n      )) {\n        if (entry[1].length > 0 && matcher(entry)) {\n          matches.push(entry)\n        }\n      }\n\n      const starts = []\n      const middles = []\n      const ends = []\n      let starting = true\n      let hasBlocks = false\n\n      for (const [node] of matches) {\n        if (Element.isElement(node) && !editor.isInline(node)) {\n          starting = false\n          hasBlocks = true\n          middles.push(node)\n        } else if (starting) {\n          starts.push(node)\n        } else {\n          ends.push(node)\n        }\n      }\n\n      const [inlineMatch] = Editor.nodes(editor, {\n        at,\n        match: n => Text.isText(n) || Editor.isInline(editor, n),\n        mode: 'highest',\n        voids,\n      })!\n\n      const [, inlinePath] = inlineMatch\n      const isInlineStart = Editor.isStart(editor, at, inlinePath)\n      const isInlineEnd = Editor.isEnd(editor, at, inlinePath)\n\n      const middleRef = Editor.pathRef(\n        editor,\n        isBlockEnd ? Path.next(blockPath) : blockPath\n      )\n\n      const endRef = Editor.pathRef(\n        editor,\n        isInlineEnd ? Path.next(inlinePath) : inlinePath\n      )\n\n      Transforms.splitNodes(editor, {\n        at,\n        match: n =>\n          hasBlocks\n            ? Editor.isBlock(editor, n)\n            : Text.isText(n) || Editor.isInline(editor, n),\n        mode: hasBlocks ? 'lowest' : 'highest',\n        voids,\n      })\n\n      const startRef = Editor.pathRef(\n        editor,\n        !isInlineStart || (isInlineStart && isInlineEnd)\n          ? Path.next(inlinePath)\n          : inlinePath\n      )\n\n      Transforms.insertNodes(editor, starts, {\n        at: startRef.current!,\n        match: n => Text.isText(n) || Editor.isInline(editor, n),\n        mode: 'highest',\n        voids,\n      })\n\n      Transforms.insertNodes(editor, middles, {\n        at: middleRef.current!,\n        match: n => Editor.isBlock(editor, n),\n        mode: 'lowest',\n        voids,\n      })\n\n      Transforms.insertNodes(editor, ends, {\n        at: endRef.current!,\n        match: n => Text.isText(n) || Editor.isInline(editor, n),\n        mode: 'highest',\n        voids,\n      })\n\n      if (!options.at) {\n        let path\n\n        if (ends.length > 0) {\n          path = Path.previous(endRef.current!)\n        } else if (middles.length > 0) {\n          path = Path.previous(middleRef.current!)\n        } else {\n          path = Path.previous(startRef.current!)\n        }\n\n        const end = Editor.end(editor, path)\n        Transforms.select(editor, end)\n      }\n\n      startRef.unref()\n      middleRef.unref()\n      endRef.unref()\n    })\n  },\n\n  /**\n   * Insert a string of text in the Editor.\n   */\n\n  insertText(\n    editor: Editor,\n    text: string,\n    options: {\n      at?: Location\n      voids?: boolean\n    } = {}\n  ) {\n    Editor.withoutNormalizing(editor, () => {\n      const { voids = false } = options\n      let { at = editor.selection } = options\n\n      if (!at) {\n        return\n      }\n\n      if (Path.isPath(at)) {\n        at = Editor.range(editor, at)\n      }\n\n      if (Range.isRange(at)) {\n        if (Range.isCollapsed(at)) {\n          at = at.anchor\n        } else {\n          const end = Range.end(at)\n\n          if (!voids && Editor.void(editor, { at: end })) {\n            return\n          }\n\n          const pointRef = Editor.pointRef(editor, end)\n          Transforms.delete(editor, { at, voids })\n          at = pointRef.unref()!\n          Transforms.setSelection(editor, { anchor: at, focus: at })\n        }\n      }\n\n      if (!voids && Editor.void(editor, { at })) {\n        return\n      }\n\n      const { path, offset } = at\n      editor.apply({ type: 'insert_text', path, offset, text })\n    })\n  },\n}\n","import { GeneralTransforms } from './general'\nimport { NodeTransforms } from './node'\nimport { SelectionTransforms } from './selection'\nimport { TextTransforms } from './text'\n\nexport const Transforms = {\n  ...GeneralTransforms,\n  ...NodeTransforms,\n  ...SelectionTransforms,\n  ...TextTransforms,\n}\n"],"names":["DIRTY_PATHS","WeakMap","FLUSHING","NORMALIZING","PATH_REFS","POINT_REFS","RANGE_REFS","createEditor","window","msCrypto","enableES5","editor","children","operations","selection","marks","isInline","isVoid","onChange","apply","op","Editor","pathRefs","ref","PathRef","transform","pointRefs","PointRef","rangeRefs","RangeRef","set","Set","dirtyPaths","add","path","key","join","has","push","oldDirtyPaths","get","newDirtyPaths","getDirtyPaths","newPath","Path","normalize","type","Promise","resolve","then","addMark","value","Range","isExpanded","Transforms","setNodes","match","Text","isText","split","deleteBackward","unit","isCollapsed","reverse","deleteForward","deleteFragment","getFragment","Node","fragment","insertBreak","splitNodes","always","insertFragment","insertNode","node","insertNodes","insertText","text","inline","above","n","mode","inlinePath","isEnd","anchor","point","after","setSelection","focus","normalizeNode","entry","Element","isElement","length","child","at","concat","voids","shouldHaveInlines","isEditor","i","prev","isLast","isInlineOrText","removeNodes","newChild","equals","loose","mergeNodes","removeMark","unsetNodes","levels","descendants","Array","from","nodes","p","ancestors","previousPath","previous","oldAncestors","newAncestors","ancestor","nextPath","next","SPACE","PUNCTUATION","CHAMELEON","SURROGATE_START","SURROGATE_END","ZERO_WIDTH_JOINER","getCharacterDistance","offset","charCode","charCodeAt","isSurrogate","modifier","isModifier","isBMPEmoji","isVariationSelector","getWordDistance","started","char","charAt","l","slice","rest","isWordCharacter","remaining","test","code","options","edge","end","range","distance","d","target","positions","before","start","edges","first","hasBlocks","element","some","isBlock","hasInlines","hasTexts","every","isPlainObject","isRange","isNodeList","Operation","isOperationList","Point","isEdge","isStart","isEmpty","isNormalizing","undefined","last","leaf","block","prevNode","prevPath","blockPath","isAncestor","to","span","isPath","Error","parent","includes","universal","Span","isSpan","iterable","pass","matches","hit","isLower","compare","emit","force","allPaths","withoutNormalizing","max","m","pop","parentPath","depth","firstPath","lastPath","common","isPoint","pathRef","affinity","current","unref","refs","pointRef","string","available","isNewBlock","advance","e","s","reverseText","isFirst","rangeRef","t","createDraft","index","splice","points","truePath","newParent","newIndex","result","texts","newProperties","JSON","stringify","Object","assign","position","properties","newNode","finishDraft","isDraft","unhangRange","endBlock","skip","isBefore","fn","isElementList","isArray","props","Location","isLocation","root","c","childPath","another","descendant","elements","newRoot","produce","r","isNode","visited","isAfter","nextIndex","map","isNodeOperation","isOperation","endsWith","isSelectionOperation","isTextOperation","inverse","isSibling","inversePath","inverseNewPath","paths","av","bv","min","Math","endsAfter","as","bs","endsAt","endsBefore","isChild","isCommon","isDescendant","isParent","al","bl","list","relative","operation","onp","copy","isBackward","rs","re","ts","te","isAfterStart","isBeforeEnd","intersection","s1","e1","s2","e2","isForward","affinityAnchor","affinityFocus","isTextList","decorations","leaves","dec","o","middle","off","GeneralTransforms","NodeTransforms","hanging","select","matchPath","isAtEnd","liftNodes","parentNodeEntry","toPath","moveNodes","splitPath","commonPath","isPreviousSibling","emptyAncestor","emptyRef","toRef","targets","depths","splitMode","k","keys","height","deleteRange","beforeRef","highest","voidMatch","nudge","voidNode","voidPath","afterPath","siblingHeight","afterRef","highestPath","lowestPath","obj","unwrapNodes","wrapNodes","roots","rootPath","a","commonNodeEntry","commonNode","wrapperPath","wrapper","SelectionTransforms","collapse","deselect","move","opts","setPoint","oldProps","newProps","TextTransforms","furthestVoid","startBlock","isAcrossBlocks","isSingleText","startVoid","endVoid","startRef","endRef","inlineElementMatch","blockMatch","isBlockStart","isBlockEnd","mergeStart","mergeEnd","matcher","starts","middles","ends","starting","inlineMatch","isInlineStart","isInlineEnd","middleRef"],"mappings":"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"}