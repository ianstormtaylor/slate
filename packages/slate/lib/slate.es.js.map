{"version":3,"file":"slate.es.js","sources":["../src/models/data.js","../src/constants/model-types.js","../src/utils/memoize.js","../src/models/mark.js","../src/models/range.js","../src/models/character.js","../src/models/leaf.js","../src/utils/generate-key.js","../src/models/text.js","../src/utils/is-index-in-range.js","../src/models/node.js","../src/models/inline.js","../src/models/document.js","../src/models/block.js","../src/changes/at-current-range.js","../src/utils/string.js","../src/changes/at-range.js","../src/changes/by-key.js","../src/constants/operation-attributes.js","../src/models/history.js","../src/constants/core-schema-rules.js","../src/models/stack.js","../src/models/schema.js","../src/models/value.js","../src/models/operation.js","../src/operations/invert.js","../src/changes/on-history.js","../src/changes/on-selection.js","../src/changes/on-value.js","../src/changes/with-schema.js","../src/changes/index.js","../src/operations/apply.js","../src/models/change.js","../src/operations/index.js","../src/index.js"],"sourcesContent":["import isPlainObject from 'is-plain-object'\nimport { Map } from 'immutable'\n\n/**\n * Data.\n *\n * This isn't an immutable record, it's just a thin wrapper around `Map` so that\n * we can allow for more convenient creation.\n *\n * @type {Object}\n */\n\nclass Data {\n  /**\n   * Create a new `Data` with `attrs`.\n   *\n   * @param {Object|Data|Map} attrs\n   * @return {Data} data\n   */\n\n  static create(attrs = {}) {\n    if (Map.isMap(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      return Data.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Data.create\\` only accepts objects or maps, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Data` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Data}\n   */\n\n  static fromJSON(object) {\n    return new Map(object)\n  }\n\n  /**\n   * Alias `fromJS`.\n   */\n\n  static fromJS = Data.fromJSON\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Data\n","/**\n * Slate-specific model types.\n *\n * @type {Object}\n */\n\nconst MODEL_TYPES = {\n  BLOCK: '@@__SLATE_BLOCK__@@',\n  CHANGE: '@@__SLATE_CHANGE__@@',\n  CHARACTER: '@@__SLATE_CHARACTER__@@',\n  DOCUMENT: '@@__SLATE_DOCUMENT__@@',\n  HISTORY: '@@__SLATE_HISTORY__@@',\n  INLINE: '@@__SLATE_INLINE__@@',\n  LEAF: '@@__SLATE_LEAF__@@',\n  MARK: '@@__SLATE_MARK__@@',\n  OPERATION: '@@__SLATE_OPERATION__@@',\n  RANGE: '@@__SLATE_RANGE__@@',\n  SCHEMA: '@@__SLATE_SCHEMA__@@',\n  STACK: '@@__SLATE_STACK__@@',\n  TEXT: '@@__SLATE_TEXT__@@',\n  VALUE: '@@__SLATE_VALUE__@@',\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default MODEL_TYPES\n","/**\n * GLOBAL: True if memoization should is enabled.\n *\n * @type {Boolean}\n */\n\nlet ENABLED = true\n\n/**\n * GLOBAL: Changing this cache key will clear all previous cached results.\n *\n * @type {Number}\n */\n\nlet CACHE_KEY = 0\n\n/**\n * The leaf node of a cache tree. Used to support variable argument length. A\n * unique object, so that native Maps will key it by reference.\n *\n * @type {Object}\n */\n\nconst LEAF = {}\n\n/**\n * A value to represent a memoized undefined value. Allows efficient value\n * retrieval using Map.get only.\n *\n * @type {Object}\n */\n\nconst UNDEFINED = {}\n\n/**\n * Default value for unset keys in native Maps\n *\n * @type {Undefined}\n */\n\nconst UNSET = undefined\n\n/**\n * Memoize all of the `properties` on a `object`.\n *\n * @param {Object} object\n * @param {Array} properties\n * @return {Record}\n */\n\nfunction memoize(object, properties) {\n  for (const property of properties) {\n    const original = object[property]\n\n    if (!original) {\n      throw new Error(`Object does not have a property named \"${property}\".`)\n    }\n\n    object[property] = function(...args) {\n      // If memoization is disabled, call into the original method.\n      if (!ENABLED) return original.apply(this, args)\n\n      // If the cache key is different, previous caches must be cleared.\n      if (CACHE_KEY !== this.__cache_key) {\n        this.__cache_key = CACHE_KEY\n        this.__cache = new Map() // eslint-disable-line no-undef,no-restricted-globals\n        this.__cache_no_args = {}\n      }\n\n      if (!this.__cache) {\n        this.__cache = new Map() // eslint-disable-line no-undef,no-restricted-globals\n      }\n      if (!this.__cache_no_args) {\n        this.__cache_no_args = {}\n      }\n\n      const takesArguments = args.length !== 0\n\n      let cachedValue\n      let keys\n\n      if (takesArguments) {\n        keys = [property, ...args]\n        cachedValue = getIn(this.__cache, keys)\n      } else {\n        cachedValue = this.__cache_no_args[property]\n      }\n\n      // If we've got a result already, return it.\n      if (cachedValue !== UNSET) {\n        return cachedValue === UNDEFINED ? undefined : cachedValue\n      }\n\n      // Otherwise calculate what it should be once and cache it.\n      const value = original.apply(this, args)\n      const v = value === undefined ? UNDEFINED : value\n\n      if (takesArguments) {\n        this.__cache = setIn(this.__cache, keys, v)\n      } else {\n        this.__cache_no_args[property] = v\n      }\n\n      return value\n    }\n  }\n}\n\n/**\n * Get a value at a key path in a tree of Map.\n *\n * If not set, returns UNSET.\n * If the set value is undefined, returns UNDEFINED.\n *\n * @param {Map} map\n * @param {Array} keys\n * @return {Any|UNSET|UNDEFINED}\n */\n\nfunction getIn(map, keys) {\n  for (const key of keys) {\n    map = map.get(key)\n    if (map === UNSET) return UNSET\n  }\n\n  return map.get(LEAF)\n}\n\n/**\n * Set a value at a key path in a tree of Map, creating Maps on the go.\n *\n * @param {Map} map\n * @param {Array} keys\n * @param {Any} value\n * @return {Map}\n */\n\nfunction setIn(map, keys, value) {\n  let parent = map\n  let child\n\n  for (const key of keys) {\n    child = parent.get(key)\n\n    // If the path was not created yet...\n    if (child === UNSET) {\n      child = new Map() // eslint-disable-line no-undef,no-restricted-globals\n      parent.set(key, child)\n    }\n\n    parent = child\n  }\n\n  // The whole path has been created, so set the value to the bottom most map.\n  child.set(LEAF, value)\n  return map\n}\n\n/**\n * In DEV mode, clears the previously memoized values, globally.\n *\n * @return {Void}\n */\n\nfunction resetMemoization() {\n  CACHE_KEY++\n\n  if (CACHE_KEY >= Number.MAX_SAFE_INTEGER) {\n    CACHE_KEY = 0\n  }\n}\n\n/**\n * In DEV mode, enable or disable the use of memoize values, globally.\n *\n * @param {Boolean} enabled\n * @return {Void}\n */\n\nfunction useMemoization(enabled) {\n  ENABLED = enabled\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default memoize\nexport { resetMemoization, useMemoization }\n","import isPlainObject from 'is-plain-object'\nimport logger from 'slate-dev-logger'\nimport { Map, Record, Set } from 'immutable'\n\nimport MODEL_TYPES from '../constants/model-types'\nimport Data from './data'\nimport memoize from '../utils/memoize'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  data: new Map(),\n  type: undefined,\n}\n\n/**\n * Mark.\n *\n * @type {Mark}\n */\n\nclass Mark extends Record(DEFAULTS) {\n  /**\n   * Create a new `Mark` with `attrs`.\n   *\n   * @param {Object|Mark} attrs\n   * @return {Mark}\n   */\n\n  static create(attrs = {}) {\n    if (Mark.isMark(attrs)) {\n      return attrs\n    }\n\n    if (typeof attrs == 'string') {\n      attrs = { type: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      return Mark.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Mark.create\\` only accepts objects, strings or marks, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a set of marks.\n   *\n   * @param {Array<Object|Mark>} elements\n   * @return {Set<Mark>}\n   */\n\n  static createSet(elements) {\n    if (Set.isSet(elements) || Array.isArray(elements)) {\n      const marks = new Set(elements.map(Mark.create))\n      return marks\n    }\n\n    if (elements == null) {\n      return new Set()\n    }\n\n    throw new Error(\n      `\\`Mark.createSet\\` only accepts sets, arrays or null, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a dictionary of settable mark properties from `attrs`.\n   *\n   * @param {Object|String|Mark} attrs\n   * @return {Object}\n   */\n\n  static createProperties(attrs = {}) {\n    if (Mark.isMark(attrs)) {\n      return {\n        data: attrs.data,\n        type: attrs.type,\n      }\n    }\n\n    if (typeof attrs == 'string') {\n      return { type: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      const props = {}\n      if ('type' in attrs) props.type = attrs.type\n      if ('data' in attrs) props.data = Data.create(attrs.data)\n      return props\n    }\n\n    throw new Error(\n      `\\`Mark.createProperties\\` only accepts objects, strings or marks, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Mark` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Mark}\n   */\n\n  static fromJSON(object) {\n    const { data = {}, type } = object\n\n    if (typeof type != 'string') {\n      throw new Error('`Mark.fromJS` requires a `type` string.')\n    }\n\n    const mark = new Mark({\n      type,\n      data: new Map(data),\n    })\n\n    return mark\n  }\n\n  /**\n   * Alias `fromJS`.\n   */\n\n  static fromJS = Mark.fromJSON\n\n  /**\n   * Check if `any` is a `Mark`.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isMark(any) {\n    return !!(any && any[MODEL_TYPES.MARK])\n  }\n\n  /**\n   * Check if `any` is a set of marks.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isMarkSet(any) {\n    return Set.isSet(any) && any.every(item => Mark.isMark(item))\n  }\n\n  /**\n   * Object.\n   */\n\n  get object() {\n    return 'mark'\n  }\n\n  get kind() {\n    logger.deprecate(\n      'slate@0.32.0',\n      'The `kind` property of Slate objects has been renamed to `object`.'\n    )\n    return this.object\n  }\n\n  /**\n   * Get the component for the node from a `schema`.\n   *\n   * @param {Schema} schema\n   * @return {Component|Void}\n   */\n\n  getComponent(schema) {\n    return schema.__getComponent(this)\n  }\n\n  /**\n   * Return a JSON representation of the mark.\n   *\n   * @return {Object}\n   */\n\n  toJSON() {\n    const object = {\n      object: this.object,\n      type: this.type,\n      data: this.data.toJSON(),\n    }\n\n    return object\n  }\n\n  /**\n   * Alias `toJS`.\n   */\n\n  toJS() {\n    return this.toJSON()\n  }\n}\n\n/**\n * Attach a pseudo-symbol for type checking.\n */\n\nMark.prototype[MODEL_TYPES.MARK] = true\n\n/**\n * Memoize read methods.\n */\n\nmemoize(Mark.prototype, ['getComponent'])\n\n/**\n * Export.\n *\n * @type {Mark}\n */\n\nexport default Mark\n","import isPlainObject from 'is-plain-object'\nimport logger from 'slate-dev-logger'\nimport { List, Record, Set } from 'immutable'\n\nimport MODEL_TYPES from '../constants/model-types'\nimport Mark from './mark'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  anchorKey: null,\n  anchorOffset: 0,\n  focusKey: null,\n  focusOffset: 0,\n  isBackward: null,\n  isFocused: false,\n  marks: null,\n}\n\n/**\n * Range.\n *\n * @type {Range}\n */\n\nclass Range extends Record(DEFAULTS) {\n  /**\n   * Create a new `Range` with `attrs`.\n   *\n   * @param {Object|Range} attrs\n   * @return {Range}\n   */\n\n  static create(attrs = {}) {\n    if (Range.isRange(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      return Range.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Range.create\\` only accepts objects or ranges, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Ranges` from `elements`.\n   *\n   * @param {Array<Range|Object>|List<Range|Object>} elements\n   * @return {List<Range>}\n   */\n\n  static createList(elements = []) {\n    if (List.isList(elements) || Array.isArray(elements)) {\n      const list = new List(elements.map(Range.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Range.createList\\` only accepts arrays or lists, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a dictionary of settable range properties from `attrs`.\n   *\n   * @param {Object|String|Range} attrs\n   * @return {Object}\n   */\n\n  static createProperties(attrs = {}) {\n    if (Range.isRange(attrs)) {\n      return {\n        anchorKey: attrs.anchorKey,\n        anchorOffset: attrs.anchorOffset,\n        focusKey: attrs.focusKey,\n        focusOffset: attrs.focusOffset,\n        isBackward: attrs.isBackward,\n        isFocused: attrs.isFocused,\n        marks: attrs.marks,\n      }\n    }\n\n    if (isPlainObject(attrs)) {\n      const props = {}\n      if ('anchorKey' in attrs) props.anchorKey = attrs.anchorKey\n      if ('anchorOffset' in attrs) props.anchorOffset = attrs.anchorOffset\n      if ('anchorPath' in attrs) props.anchorPath = attrs.anchorPath\n      if ('focusKey' in attrs) props.focusKey = attrs.focusKey\n      if ('focusOffset' in attrs) props.focusOffset = attrs.focusOffset\n      if ('focusPath' in attrs) props.focusPath = attrs.focusPath\n      if ('isBackward' in attrs) props.isBackward = attrs.isBackward\n      if ('isFocused' in attrs) props.isFocused = attrs.isFocused\n      if ('marks' in attrs)\n        props.marks = attrs.marks == null ? null : Mark.createSet(attrs.marks)\n      return props\n    }\n\n    throw new Error(\n      `\\`Range.createProperties\\` only accepts objects or ranges, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Range` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Range}\n   */\n\n  static fromJSON(object) {\n    const {\n      anchorKey = null,\n      anchorOffset = 0,\n      focusKey = null,\n      focusOffset = 0,\n      isBackward = null,\n      isFocused = false,\n      marks = null,\n    } = object\n\n    const range = new Range({\n      anchorKey,\n      anchorOffset,\n      focusKey,\n      focusOffset,\n      isBackward,\n      isFocused,\n      marks: marks == null ? null : new Set(marks.map(Mark.fromJSON)),\n    })\n\n    return range\n  }\n\n  /**\n   * Alias `fromJS`.\n   */\n\n  static fromJS = Range.fromJSON\n\n  /**\n   * Check if an `obj` is a `Range`.\n   *\n   * @param {Any} obj\n   * @return {Boolean}\n   */\n\n  static isRange(obj) {\n    return !!(obj && obj[MODEL_TYPES.RANGE])\n  }\n\n  /**\n   * Object.\n   *\n   * @return {String}\n   */\n\n  get object() {\n    return 'range'\n  }\n\n  get kind() {\n    logger.deprecate(\n      'slate@0.32.0',\n      'The `kind` property of Slate objects has been renamed to `object`.'\n    )\n    return this.object\n  }\n\n  /**\n   * Check whether the range is blurred.\n   *\n   * @return {Boolean}\n   */\n\n  get isBlurred() {\n    return !this.isFocused\n  }\n\n  /**\n   * Check whether the range is collapsed.\n   *\n   * @return {Boolean}\n   */\n\n  get isCollapsed() {\n    return (\n      this.anchorKey == this.focusKey && this.anchorOffset == this.focusOffset\n    )\n  }\n\n  /**\n   * Check whether the range is expanded.\n   *\n   * @return {Boolean}\n   */\n\n  get isExpanded() {\n    return !this.isCollapsed\n  }\n\n  /**\n   * Check whether the range is forward.\n   *\n   * @return {Boolean}\n   */\n\n  get isForward() {\n    return this.isBackward == null ? null : !this.isBackward\n  }\n\n  /**\n   * Check whether the range's keys are set.\n   *\n   * @return {Boolean}\n   */\n\n  get isSet() {\n    return this.anchorKey != null && this.focusKey != null\n  }\n\n  /**\n   * Check whether the range's keys are not set.\n   *\n   * @return {Boolean}\n   */\n\n  get isUnset() {\n    return !this.isSet\n  }\n\n  /**\n   * Get the start key.\n   *\n   * @return {String}\n   */\n\n  get startKey() {\n    return this.isBackward ? this.focusKey : this.anchorKey\n  }\n\n  /**\n   * Get the start offset.\n   *\n   * @return {String}\n   */\n\n  get startOffset() {\n    return this.isBackward ? this.focusOffset : this.anchorOffset\n  }\n\n  /**\n   * Get the end key.\n   *\n   * @return {String}\n   */\n\n  get endKey() {\n    return this.isBackward ? this.anchorKey : this.focusKey\n  }\n\n  /**\n   * Get the end offset.\n   *\n   * @return {String}\n   */\n\n  get endOffset() {\n    return this.isBackward ? this.anchorOffset : this.focusOffset\n  }\n\n  /**\n   * Check whether anchor point of the range is at the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Boolean}\n   */\n\n  hasAnchorAtStartOf(node) {\n    // PERF: Do a check for a `0` offset first since it's quickest.\n    if (this.anchorOffset != 0) return false\n    const first = getFirst(node)\n    return this.anchorKey == first.key\n  }\n\n  /**\n   * Check whether anchor point of the range is at the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Boolean}\n   */\n\n  hasAnchorAtEndOf(node) {\n    const last = getLast(node)\n    return this.anchorKey == last.key && this.anchorOffset == last.text.length\n  }\n\n  /**\n   * Check whether the anchor edge of a range is in a `node` and at an\n   * offset between `start` and `end`.\n   *\n   * @param {Node} node\n   * @param {Number} start\n   * @param {Number} end\n   * @return {Boolean}\n   */\n\n  hasAnchorBetween(node, start, end) {\n    return (\n      this.anchorOffset <= end &&\n      start <= this.anchorOffset &&\n      this.hasAnchorIn(node)\n    )\n  }\n\n  /**\n   * Check whether the anchor edge of a range is in a `node`.\n   *\n   * @param {Node} node\n   * @return {Boolean}\n   */\n\n  hasAnchorIn(node) {\n    return node.object == 'text'\n      ? node.key == this.anchorKey\n      : this.anchorKey != null && node.hasDescendant(this.anchorKey)\n  }\n\n  /**\n   * Check whether focus point of the range is at the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Boolean}\n   */\n\n  hasFocusAtEndOf(node) {\n    const last = getLast(node)\n    return this.focusKey == last.key && this.focusOffset == last.text.length\n  }\n\n  /**\n   * Check whether focus point of the range is at the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Boolean}\n   */\n\n  hasFocusAtStartOf(node) {\n    if (this.focusOffset != 0) return false\n    const first = getFirst(node)\n    return this.focusKey == first.key\n  }\n\n  /**\n   * Check whether the focus edge of a range is in a `node` and at an\n   * offset between `start` and `end`.\n   *\n   * @param {Node} node\n   * @param {Number} start\n   * @param {Number} end\n   * @return {Boolean}\n   */\n\n  hasFocusBetween(node, start, end) {\n    return (\n      start <= this.focusOffset &&\n      this.focusOffset <= end &&\n      this.hasFocusIn(node)\n    )\n  }\n\n  /**\n   * Check whether the focus edge of a range is in a `node`.\n   *\n   * @param {Node} node\n   * @return {Boolean}\n   */\n\n  hasFocusIn(node) {\n    return node.object == 'text'\n      ? node.key == this.focusKey\n      : this.focusKey != null && node.hasDescendant(this.focusKey)\n  }\n\n  /**\n   * Check whether the range is at the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Boolean}\n   */\n\n  isAtStartOf(node) {\n    return this.isCollapsed && this.hasAnchorAtStartOf(node)\n  }\n\n  /**\n   * Check whether the range is at the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Boolean}\n   */\n\n  isAtEndOf(node) {\n    return this.isCollapsed && this.hasAnchorAtEndOf(node)\n  }\n\n  /**\n   * Focus the range.\n   *\n   * @return {Range}\n   */\n\n  focus() {\n    return this.merge({\n      isFocused: true,\n    })\n  }\n\n  /**\n   * Blur the range.\n   *\n   * @return {Range}\n   */\n\n  blur() {\n    return this.merge({\n      isFocused: false,\n    })\n  }\n\n  /**\n   * Unset the range.\n   *\n   * @return {Range}\n   */\n\n  deselect() {\n    return this.merge({\n      anchorKey: null,\n      anchorOffset: 0,\n      focusKey: null,\n      focusOffset: 0,\n      isFocused: false,\n      isBackward: false,\n    })\n  }\n\n  /**\n   * Flip the range.\n   *\n   * @return {Range}\n   */\n\n  flip() {\n    return this.merge({\n      anchorKey: this.focusKey,\n      anchorOffset: this.focusOffset,\n      focusKey: this.anchorKey,\n      focusOffset: this.anchorOffset,\n      isBackward: this.isBackward == null ? null : !this.isBackward,\n    })\n  }\n\n  /**\n   * Move the anchor offset `n` characters.\n   *\n   * @param {Number} n (optional)\n   * @return {Range}\n   */\n\n  moveAnchor(n = 1) {\n    const { anchorKey, focusKey, focusOffset, isBackward } = this\n    const anchorOffset = this.anchorOffset + n\n    return this.merge({\n      anchorOffset,\n      isBackward:\n        anchorKey == focusKey ? anchorOffset > focusOffset : isBackward,\n    })\n  }\n\n  /**\n   * Move the anchor offset `n` characters.\n   *\n   * @param {Number} n (optional)\n   * @return {Range}\n   */\n\n  moveFocus(n = 1) {\n    const { anchorKey, anchorOffset, focusKey, isBackward } = this\n    const focusOffset = this.focusOffset + n\n    return this.merge({\n      focusOffset,\n      isBackward:\n        focusKey == anchorKey ? anchorOffset > focusOffset : isBackward,\n    })\n  }\n\n  /**\n   * Move the range's anchor point to a `key` and `offset`.\n   *\n   * @param {String} key\n   * @param {Number} offset\n   * @return {Range}\n   */\n\n  moveAnchorTo(key, offset) {\n    const { anchorKey, focusKey, focusOffset, isBackward } = this\n    return this.merge({\n      anchorKey: key,\n      anchorOffset: offset,\n      isBackward:\n        key == focusKey\n          ? offset > focusOffset\n          : key == anchorKey ? isBackward : null,\n    })\n  }\n\n  /**\n   * Move the range's focus point to a `key` and `offset`.\n   *\n   * @param {String} key\n   * @param {Number} offset\n   * @return {Range}\n   */\n\n  moveFocusTo(key, offset) {\n    const { focusKey, anchorKey, anchorOffset, isBackward } = this\n    return this.merge({\n      focusKey: key,\n      focusOffset: offset,\n      isBackward:\n        key == anchorKey\n          ? anchorOffset > offset\n          : key == focusKey ? isBackward : null,\n    })\n  }\n\n  /**\n   * Move the range to `anchorOffset`.\n   *\n   * @param {Number} anchorOffset\n   * @return {Range}\n   */\n\n  moveAnchorOffsetTo(anchorOffset) {\n    return this.merge({\n      anchorOffset,\n      isBackward:\n        this.anchorKey == this.focusKey\n          ? anchorOffset > this.focusOffset\n          : this.isBackward,\n    })\n  }\n\n  /**\n   * Move the range to `focusOffset`.\n   *\n   * @param {Number} focusOffset\n   * @return {Range}\n   */\n\n  moveFocusOffsetTo(focusOffset) {\n    return this.merge({\n      focusOffset,\n      isBackward:\n        this.anchorKey == this.focusKey\n          ? this.anchorOffset > focusOffset\n          : this.isBackward,\n    })\n  }\n\n  /**\n   * Move the range to `anchorOffset` and `focusOffset`.\n   *\n   * @param {Number} anchorOffset\n   * @param {Number} focusOffset (optional)\n   * @return {Range}\n   */\n\n  moveOffsetsTo(anchorOffset, focusOffset = anchorOffset) {\n    return this.moveAnchorOffsetTo(anchorOffset).moveFocusOffsetTo(focusOffset)\n  }\n\n  /**\n   * Move the focus point to the anchor point.\n   *\n   * @return {Range}\n   */\n\n  moveToAnchor() {\n    return this.moveFocusTo(this.anchorKey, this.anchorOffset)\n  }\n\n  /**\n   * Move the anchor point to the focus point.\n   *\n   * @return {Range}\n   */\n\n  moveToFocus() {\n    return this.moveAnchorTo(this.focusKey, this.focusOffset)\n  }\n\n  /**\n   * Move the range's anchor point to the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveAnchorToStartOf(node) {\n    node = getFirst(node)\n    return this.moveAnchorTo(node.key, 0)\n  }\n\n  /**\n   * Move the range's anchor point to the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveAnchorToEndOf(node) {\n    node = getLast(node)\n    return this.moveAnchorTo(node.key, node.text.length)\n  }\n\n  /**\n   * Move the range's focus point to the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveFocusToStartOf(node) {\n    node = getFirst(node)\n    return this.moveFocusTo(node.key, 0)\n  }\n\n  /**\n   * Move the range's focus point to the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveFocusToEndOf(node) {\n    node = getLast(node)\n    return this.moveFocusTo(node.key, node.text.length)\n  }\n\n  /**\n   * Move to the entire range of `start` and `end` nodes.\n   *\n   * @param {Node} start\n   * @param {Node} end (optional)\n   * @return {Range}\n   */\n\n  moveToRangeOf(start, end = start) {\n    const range = this.isBackward ? this.flip() : this\n    return range.moveAnchorToStartOf(start).moveFocusToEndOf(end)\n  }\n\n  /**\n   * Normalize the range, relative to a `node`, ensuring that the anchor\n   * and focus nodes of the range always refer to leaf text nodes.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  normalize(node) {\n    const range = this\n    let { anchorKey, anchorOffset, focusKey, focusOffset, isBackward } = range\n\n    const anchorOffsetType = typeof anchorOffset\n    const focusOffsetType = typeof focusOffset\n    if (anchorOffsetType != 'number' || focusOffsetType != 'number') {\n      logger.warn(\n        `The range offsets should be numbers, but they were of type \"${anchorOffsetType}\" and \"${focusOffsetType}\".`\n      )\n    }\n\n    // If the range is unset, make sure it is properly zeroed out.\n    if (anchorKey == null || focusKey == null) {\n      return range.merge({\n        anchorKey: null,\n        anchorOffset: 0,\n        focusKey: null,\n        focusOffset: 0,\n        isBackward: false,\n      })\n    }\n\n    // Get the anchor and focus nodes.\n    let anchorNode = node.getDescendant(anchorKey)\n    let focusNode = node.getDescendant(focusKey)\n\n    // If the range is malformed, warn and zero it out.\n    if (!anchorNode || !focusNode) {\n      logger.warn(\n        'The range was invalid and was reset. The range in question was:',\n        range\n      )\n      const first = node.getFirstText()\n      return range.merge({\n        anchorKey: first ? first.key : null,\n        anchorOffset: 0,\n        focusKey: first ? first.key : null,\n        focusOffset: 0,\n        isBackward: false,\n      })\n    }\n\n    // If the anchor node isn't a text node, match it to one.\n    if (anchorNode.object != 'text') {\n      logger.warn(\n        'The range anchor was set to a Node that is not a Text node. This should not happen and can degrade performance. The node in question was:',\n        anchorNode\n      )\n      const anchorText = anchorNode.getTextAtOffset(anchorOffset)\n      const offset = anchorNode.getOffset(anchorText.key)\n      anchorOffset = anchorOffset - offset\n      anchorNode = anchorText\n    }\n\n    // If the focus node isn't a text node, match it to one.\n    if (focusNode.object != 'text') {\n      logger.warn(\n        'The range focus was set to a Node that is not a Text node. This should not happen and can degrade performance. The node in question was:',\n        focusNode\n      )\n      const focusText = focusNode.getTextAtOffset(focusOffset)\n      const offset = focusNode.getOffset(focusText.key)\n      focusOffset = focusOffset - offset\n      focusNode = focusText\n    }\n\n    // If `isBackward` is not set, derive it.\n    if (isBackward == null) {\n      if (anchorNode.key === focusNode.key) {\n        isBackward = anchorOffset > focusOffset\n      } else {\n        isBackward = !node.areDescendantsSorted(anchorNode.key, focusNode.key)\n      }\n    }\n\n    // Merge in any updated properties.\n    return range.merge({\n      anchorKey: anchorNode.key,\n      anchorOffset,\n      focusKey: focusNode.key,\n      focusOffset,\n      isBackward,\n    })\n  }\n\n  /**\n   * Return a JSON representation of the range.\n   *\n   * @return {Object}\n   */\n\n  toJSON() {\n    const object = {\n      object: this.object,\n      anchorKey: this.anchorKey,\n      anchorOffset: this.anchorOffset,\n      focusKey: this.focusKey,\n      focusOffset: this.focusOffset,\n      isBackward: this.isBackward,\n      isFocused: this.isFocused,\n      marks:\n        this.marks == null ? null : this.marks.toArray().map(m => m.toJSON()),\n    }\n\n    return object\n  }\n\n  /**\n   * Alias `toJS`.\n   */\n\n  toJS() {\n    return this.toJSON()\n  }\n}\n\n/**\n * Attach a pseudo-symbol for type checking.\n */\n\nRange.prototype[MODEL_TYPES.RANGE] = true\n\n/**\n * Mix in some \"move\" convenience methods.\n */\n\nconst MOVE_METHODS = [\n  ['move', ''],\n  ['move', 'To'],\n  ['move', 'ToStartOf'],\n  ['move', 'ToEndOf'],\n]\n\nMOVE_METHODS.forEach(([p, s]) => {\n  Range.prototype[`${p}${s}`] = function(...args) {\n    return this[`${p}Anchor${s}`](...args)[`${p}Focus${s}`](...args)\n  }\n})\n\n/**\n * Mix in the \"start\", \"end\" and \"edge\" convenience methods.\n */\n\nconst EDGE_METHODS = [\n  ['has', 'AtStartOf', true],\n  ['has', 'AtEndOf', true],\n  ['has', 'Between', true],\n  ['has', 'In', true],\n  ['collapseTo', ''],\n  ['move', ''],\n  ['moveTo', ''],\n  ['move', 'To'],\n  ['move', 'OffsetTo'],\n]\n\nEDGE_METHODS.forEach(([p, s, hasEdge]) => {\n  const anchor = `${p}Anchor${s}`\n  const focus = `${p}Focus${s}`\n\n  Range.prototype[`${p}Start${s}`] = function(...args) {\n    return this.isBackward ? this[focus](...args) : this[anchor](...args)\n  }\n\n  Range.prototype[`${p}End${s}`] = function(...args) {\n    return this.isBackward ? this[anchor](...args) : this[focus](...args)\n  }\n\n  if (hasEdge) {\n    Range.prototype[`${p}Edge${s}`] = function(...args) {\n      return this[anchor](...args) || this[focus](...args)\n    }\n  }\n})\n\n/**\n * Mix in some aliases for convenience / parallelism with the browser APIs.\n */\n\nconst ALIAS_METHODS = [\n  ['collapseTo', 'moveTo'],\n  ['collapseToAnchor', 'moveToAnchor'],\n  ['collapseToFocus', 'moveToFocus'],\n  ['collapseToStart', 'moveToStart'],\n  ['collapseToEnd', 'moveToEnd'],\n  ['collapseToStartOf', 'moveToStartOf'],\n  ['collapseToEndOf', 'moveToEndOf'],\n  ['extend', 'moveFocus'],\n  ['extendTo', 'moveFocusTo'],\n  ['extendToStartOf', 'moveFocusToStartOf'],\n  ['extendToEndOf', 'moveFocusToEndOf'],\n]\n\nALIAS_METHODS.forEach(([alias, method]) => {\n  Range.prototype[alias] = function(...args) {\n    return this[method](...args)\n  }\n})\n\n/**\n * Get the first text of a `node`.\n *\n * @param {Node} node\n * @return {Text}\n */\n\nfunction getFirst(node) {\n  return node.object == 'text' ? node : node.getFirstText()\n}\n\n/**\n * Get the last text of a `node`.\n *\n * @param {Node} node\n * @return {Text}\n */\n\nfunction getLast(node) {\n  return node.object == 'text' ? node : node.getLastText()\n}\n\n/**\n * Export.\n *\n * @type {Range}\n */\n\nexport default Range\n","import isPlainObject from 'is-plain-object'\nimport logger from 'slate-dev-logger'\nimport { List, Record, Set } from 'immutable'\n\nimport MODEL_TYPES from '../constants/model-types'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  marks: new Set(),\n  text: '',\n}\n\n/**\n * Character.\n *\n * @type {Character}\n */\n\nclass Character extends Record(DEFAULTS) {\n  /**\n   * Create a `Character` with `attrs`.\n   *\n   * @param {Object|String|Character} attrs\n   * @return {Character}\n   */\n\n  static create(attrs = {}) {\n    if (Character.isCharacter(attrs)) {\n      return attrs\n    }\n\n    if (typeof attrs == 'string') {\n      attrs = { text: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      return Character.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Character.create\\` only accepts objects, strings or characters, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Characters` from `elements`.\n   *\n   * @param {String|Array<Object|Character|String>|List<Object|Character|String>} elements\n   * @return {List<Character>}\n   */\n\n  static createList(elements = []) {\n    if (typeof elements == 'string') {\n      elements = elements.split('')\n    }\n\n    if (List.isList(elements) || Array.isArray(elements)) {\n      const list = new List(elements.map(Character.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Block.createList\\` only accepts strings, arrays or lists, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a `Character` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Character}\n   */\n\n  static fromJSON(object) {\n    const { text, marks = [] } = object\n\n    if (typeof text != 'string') {\n      throw new Error('`Character.fromJSON` requires a block `text` string.')\n    }\n\n    const character = new Character({\n      text,\n      marks: new Set(marks),\n    })\n\n    return character\n  }\n\n  /**\n   * Alias `fromJS`.\n   */\n\n  static fromJS = Character.fromJSON\n\n  /**\n   * Check if `any` is a `Character`.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isCharacter(any) {\n    return !!(any && any[MODEL_TYPES.CHARACTER])\n  }\n\n  /**\n   * Check if `any` is a character list.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isCharacterList(any) {\n    return List.isList(any) && any.every(item => Character.isCharacter(item))\n  }\n\n  /**\n   * Object.\n   *\n   * @return {String}\n   */\n\n  get object() {\n    return 'character'\n  }\n\n  get kind() {\n    logger.deprecate(\n      'slate@0.32.0',\n      'The `kind` property of Slate objects has been renamed to `object`.'\n    )\n    return this.object\n  }\n\n  /**\n   * Return a JSON representation of the character.\n   *\n   * @return {Object}\n   */\n\n  toJSON() {\n    const object = {\n      object: this.object,\n      text: this.text,\n      marks: this.marks.toArray().map(m => m.toJSON()),\n    }\n\n    return object\n  }\n\n  /**\n   * Alias `toJS`.\n   */\n\n  toJS() {\n    return this.toJSON()\n  }\n}\n\n/**\n * Attach a pseudo-symbol for type checking.\n */\n\nCharacter.prototype[MODEL_TYPES.CHARACTER] = true\n\n/**\n * Export.\n *\n * @type {Character}\n */\n\nexport default Character\n","import isPlainObject from 'is-plain-object'\nimport logger from 'slate-dev-logger'\nimport { List, Record, Set } from 'immutable'\n\nimport MODEL_TYPES from '../constants/model-types'\nimport Character from './character'\nimport Mark from './mark'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  marks: new Set(),\n  text: '',\n}\n\n/**\n * Leaf.\n *\n * @type {Leaf}\n */\n\nclass Leaf extends Record(DEFAULTS) {\n  /**\n   * Create a new `Leaf` with `attrs`.\n   *\n   * @param {Object|Leaf} attrs\n   * @return {Leaf}\n   */\n\n  static create(attrs = {}) {\n    if (Leaf.isLeaf(attrs)) {\n      return attrs\n    }\n\n    if (typeof attrs == 'string') {\n      attrs = { text: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      return Leaf.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Leaf.create\\` only accepts objects, strings or leaves, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Leaf` list from `attrs`.\n   *\n   * @param {Array<Leaf|Object>|List<Leaf|Object>} attrs\n   * @return {List<Leaf>}\n   */\n\n  static createList(attrs = []) {\n    if (List.isList(attrs) || Array.isArray(attrs)) {\n      const list = new List(attrs.map(Leaf.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Leaf.createList\\` only accepts arrays or lists, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Leaf` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Leaf}\n   */\n\n  static fromJSON(object) {\n    const { text = '', marks = [] } = object\n\n    const leaf = new Leaf({\n      text,\n      marks: new Set(marks.map(Mark.fromJSON)),\n    })\n\n    return leaf\n  }\n\n  /**\n   * Alias `fromJS`.\n   */\n\n  static fromJS = Leaf.fromJSON\n\n  /**\n   * Check if `any` is a `Leaf`.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isLeaf(any) {\n    return !!(any && any[MODEL_TYPES.LEAF])\n  }\n\n  /**\n   * Check if `any` is a list of leaves.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isLeafList(any) {\n    return List.isList(any) && any.every(item => Leaf.isLeaf(item))\n  }\n\n  /**\n   * Object.\n   *\n   * @return {String}\n   */\n\n  get object() {\n    return 'leaf'\n  }\n\n  get kind() {\n    logger.deprecate(\n      'slate@0.32.0',\n      'The `kind` property of Slate objects has been renamed to `object`.'\n    )\n    return this.object\n  }\n\n  /**\n   * Return leaf as a list of characters\n   *\n   * @return {List<Character>}\n   */\n\n  getCharacters() {\n    const { marks } = this\n    const characters = Character.createList(\n      this.text.split('').map(char => {\n        return Character.create({\n          text: char,\n          marks,\n        })\n      })\n    )\n\n    return characters\n  }\n\n  /**\n   * Return a JSON representation of the leaf.\n   *\n   * @return {Object}\n   */\n\n  toJSON() {\n    const object = {\n      object: this.object,\n      text: this.text,\n      marks: this.marks.toArray().map(m => m.toJSON()),\n    }\n\n    return object\n  }\n\n  /**\n   * Alias `toJS`.\n   */\n\n  toJS() {\n    return this.toJSON()\n  }\n}\n\n/**\n * Attach a pseudo-symbol for type checking.\n */\n\nLeaf.prototype[MODEL_TYPES.LEAF] = true\n\n/**\n * Export.\n *\n * @type {Leaf}\n */\n\nexport default Leaf\n","/**\n * An auto-incrementing index for generating keys.\n *\n * @type {Number}\n */\n\nlet n\n\n/**\n * The global key generating function.\n *\n * @type {Function}\n */\n\nlet generate\n\n/**\n * Generate a key.\n *\n * @return {String}\n */\n\nfunction generateKey() {\n  return generate()\n}\n\n/**\n * Set a different unique ID generating `function`.\n *\n * @param {Function} func\n */\n\nfunction setKeyGenerator(func) {\n  generate = func\n}\n\n/**\n * Reset the key generating function to its initial state.\n */\n\nfunction resetKeyGenerator() {\n  n = 0\n  generate = () => `${n++}`\n}\n\n/**\n * Set the initial state.\n */\n\nresetKeyGenerator()\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default generateKey\nexport { setKeyGenerator, resetKeyGenerator }\n","import isPlainObject from 'is-plain-object'\nimport logger from 'slate-dev-logger'\nimport { List, OrderedSet, Record, Set, is } from 'immutable'\n\nimport Character from './character'\nimport Mark from './mark'\nimport Leaf from './leaf'\nimport MODEL_TYPES from '../constants/model-types'\nimport generateKey from '../utils/generate-key'\nimport memoize from '../utils/memoize'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  characters: new List(),\n  key: undefined,\n}\n\n/**\n * Text.\n *\n * @type {Text}\n */\n\nclass Text extends Record(DEFAULTS) {\n  /**\n   * Create a new `Text` with `attrs`.\n   *\n   * @param {Object|Array|List|String|Text} attrs\n   * @return {Text}\n   */\n\n  static create(attrs = '') {\n    if (Text.isText(attrs)) {\n      return attrs\n    }\n\n    if (typeof attrs == 'string') {\n      attrs = { leaves: [{ text: attrs }] }\n    }\n\n    if (isPlainObject(attrs)) {\n      if (attrs.text) {\n        const { text, marks, key } = attrs\n        attrs = { key, leaves: [{ text, marks }] }\n      }\n\n      return Text.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Text.create\\` only accepts objects, arrays, strings or texts, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Texts` from `elements`.\n   *\n   * @param {Array<Text|Object>|List<Text|Object>} elements\n   * @return {List<Text>}\n   */\n\n  static createList(elements = []) {\n    if (List.isList(elements) || Array.isArray(elements)) {\n      const list = new List(elements.map(Text.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Text.createList\\` only accepts arrays or lists, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a `Text` from a JSON `object`.\n   *\n   * @param {Object|Text} object\n   * @return {Text}\n   */\n\n  static fromJSON(object) {\n    if (Text.isText(object)) {\n      return object\n    }\n\n    const { leaves = [], key = generateKey() } = object\n\n    const characters = leaves\n      .map(Leaf.fromJSON)\n      .reduce((l, r) => l.concat(r.getCharacters()), new List())\n\n    const node = new Text({\n      characters,\n      key,\n    })\n\n    return node\n  }\n\n  /**\n   * Alias `fromJS`.\n   */\n\n  static fromJS = Text.fromJSON\n\n  /**\n   * Check if `any` is a `Text`.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isText(any) {\n    return !!(any && any[MODEL_TYPES.TEXT])\n  }\n\n  /**\n   * Check if `any` is a list of texts.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isTextList(any) {\n    return List.isList(any) && any.every(item => Text.isText(item))\n  }\n\n  /**\n   * Object.\n   *\n   * @return {String}\n   */\n\n  get object() {\n    return 'text'\n  }\n\n  get kind() {\n    logger.deprecate(\n      'slate@0.32.0',\n      'The `kind` property of Slate objects has been renamed to `object`.'\n    )\n    return this.object\n  }\n\n  /**\n   * Is the node empty?\n   *\n   * @return {Boolean}\n   */\n\n  get isEmpty() {\n    return this.text == ''\n  }\n\n  /**\n   * Get the concatenated text of the node.\n   *\n   * @return {String}\n   */\n\n  get text() {\n    return this.characters.reduce((string, char) => string + char.text, '')\n  }\n\n  /**\n   * Add a `mark` at `index` and `length`.\n   *\n   * @param {Number} index\n   * @param {Number} length\n   * @param {Mark} mark\n   * @return {Text}\n   */\n\n  addMark(index, length, mark) {\n    const marks = new Set([mark])\n    return this.addMarks(index, length, marks)\n  }\n\n  /**\n   * Add a `set` of marks at `index` and `length`.\n   *\n   * @param {Number} index\n   * @param {Number} length\n   * @param {Set<Mark>} set\n   * @return {Text}\n   */\n\n  addMarks(index, length, set) {\n    const characters = this.characters.map((char, i) => {\n      if (i < index) return char\n      if (i >= index + length) return char\n      let { marks } = char\n      marks = marks.union(set)\n      char = char.set('marks', marks)\n      return char\n    })\n\n    return this.set('characters', characters)\n  }\n\n  /**\n   * Derive a set of decorated characters with `decorations`.\n   *\n   * @param {List<Decoration>} decorations\n   * @return {List<Character>}\n   */\n\n  getDecoratedCharacters(decorations) {\n    let node = this\n    const { key, characters } = node\n\n    // PERF: Exit early if there are no characters to be decorated.\n    if (characters.size == 0) return characters\n\n    decorations.forEach(range => {\n      const { startKey, endKey, startOffset, endOffset, marks } = range\n      const hasStart = startKey == key\n      const hasEnd = endKey == key\n      const index = hasStart ? startOffset : 0\n      const length = hasEnd ? endOffset - index : characters.size\n      node = node.addMarks(index, length, marks)\n    })\n\n    return node.characters\n  }\n\n  /**\n   * Get the decorations for the node from a `schema`.\n   *\n   * @param {Schema} schema\n   * @return {Array}\n   */\n\n  getDecorations(schema) {\n    return schema.__getDecorations(this)\n  }\n\n  /**\n   * Derive the leaves for a list of `characters`.\n   *\n   * @param {Array|Void} decorations (optional)\n   * @return {List<Leaf>}\n   */\n\n  getLeaves(decorations = []) {\n    const characters = this.getDecoratedCharacters(decorations)\n    let leaves = []\n\n    // PERF: cache previous values for faster lookup.\n    let prevChar\n    let prevLeaf\n\n    // If there are no characters, return one empty range.\n    if (characters.size == 0) {\n      leaves.push({})\n    } else {\n      // Otherwise, loop the characters and build the leaves...\n      characters.forEach((char, i) => {\n        const { marks, text } = char\n\n        // The first one can always just be created.\n        if (i == 0) {\n          prevChar = char\n          prevLeaf = { text, marks }\n          leaves.push(prevLeaf)\n          return\n        }\n\n        // Otherwise, compare the current and previous marks.\n        const prevMarks = prevChar.marks\n        const isSame = is(marks, prevMarks)\n\n        // If the marks are the same, add the text to the previous range.\n        if (isSame) {\n          prevChar = char\n          prevLeaf.text += text\n          return\n        }\n\n        // Otherwise, create a new range.\n        prevChar = char\n        prevLeaf = { text, marks }\n        leaves.push(prevLeaf)\n      }, [])\n    }\n\n    // PERF: convert the leaves to immutable objects after iterating.\n    leaves = new List(leaves.map(object => new Leaf(object)))\n\n    // Return the leaves.\n    return leaves\n  }\n\n  /**\n   * Get all of the marks on the text.\n   *\n   * @return {OrderedSet<Mark>}\n   */\n\n  getMarks() {\n    const array = this.getMarksAsArray()\n    return new OrderedSet(array)\n  }\n\n  /**\n   * Get all of the marks on the text as an array\n   *\n   * @return {Array}\n   */\n\n  getMarksAsArray() {\n    return this.characters.reduce((array, char) => {\n      return array.concat(char.marks.toArray())\n    }, [])\n  }\n\n  /**\n   * Get the marks on the text at `index`.\n   *\n   * @param {Number} index\n   * @return {Set<Mark>}\n   */\n\n  getMarksAtIndex(index) {\n    if (index == 0) return Mark.createSet()\n    const { characters } = this\n    const char = characters.get(index - 1)\n    if (!char) return Mark.createSet()\n    return char.marks\n  }\n\n  /**\n   * Get a node by `key`, to parallel other nodes.\n   *\n   * @param {String} key\n   * @return {Node|Null}\n   */\n\n  getNode(key) {\n    return this.key == key ? this : null\n  }\n\n  /**\n   * Check if the node has a node by `key`, to parallel other nodes.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n\n  hasNode(key) {\n    return !!this.getNode(key)\n  }\n\n  /**\n   * Insert `text` at `index`.\n   *\n   * @param {Numbder} index\n   * @param {String} text\n   * @param {String} marks (optional)\n   * @return {Text}\n   */\n\n  insertText(index, text, marks) {\n    let { characters } = this\n    const chars = Character.createList(\n      text.split('').map(char => ({ text: char, marks }))\n    )\n\n    characters = characters\n      .slice(0, index)\n      .concat(chars)\n      .concat(characters.slice(index))\n\n    return this.set('characters', characters)\n  }\n\n  /**\n   * Regenerate the node's key.\n   *\n   * @return {Text}\n   */\n\n  regenerateKey() {\n    const key = generateKey()\n    return this.set('key', key)\n  }\n\n  /**\n   * Remove a `mark` at `index` and `length`.\n   *\n   * @param {Number} index\n   * @param {Number} length\n   * @param {Mark} mark\n   * @return {Text}\n   */\n\n  removeMark(index, length, mark) {\n    const characters = this.characters.map((char, i) => {\n      if (i < index) return char\n      if (i >= index + length) return char\n      let { marks } = char\n      marks = marks.remove(mark)\n      char = char.set('marks', marks)\n      return char\n    })\n\n    return this.set('characters', characters)\n  }\n\n  /**\n   * Remove text from the text node at `index` for `length`.\n   *\n   * @param {Number} index\n   * @param {Number} length\n   * @return {Text}\n   */\n\n  removeText(index, length) {\n    let { characters } = this\n    const start = index\n    const end = index + length\n    characters = characters.filterNot((char, i) => start <= i && i < end)\n    return this.set('characters', characters)\n  }\n\n  /**\n   * Return a JSON representation of the text.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      leaves: this.getLeaves()\n        .toArray()\n        .map(r => r.toJSON()),\n    }\n\n    if (options.preserveKeys) {\n      object.key = this.key\n    }\n\n    return object\n  }\n\n  /**\n   * Alias `toJS`.\n   */\n\n  toJS(options) {\n    return this.toJSON(options)\n  }\n\n  /**\n   * Update a `mark` at `index` and `length` with `properties`.\n   *\n   * @param {Number} index\n   * @param {Number} length\n   * @param {Mark} mark\n   * @param {Object} properties\n   * @return {Text}\n   */\n\n  updateMark(index, length, mark, properties) {\n    const newMark = mark.merge(properties)\n\n    const characters = this.characters.map((char, i) => {\n      if (i < index) return char\n      if (i >= index + length) return char\n      let { marks } = char\n      if (!marks.has(mark)) return char\n      marks = marks.remove(mark)\n      marks = marks.add(newMark)\n      char = char.set('marks', marks)\n      return char\n    })\n\n    return this.set('characters', characters)\n  }\n\n  /**\n   * Validate the text node against a `schema`.\n   *\n   * @param {Schema} schema\n   * @return {Object|Void}\n   */\n\n  validate(schema) {\n    return schema.validateNode(this)\n  }\n\n  /**\n   * Get the first invalid descendant\n   * PREF: Do not cache this method; because it can cause cycle reference\n   *\n   * @param {Schema} schema\n   * @returns {Text|Null}\n   */\n\n  getFirstInvalidDescendant(schema) {\n    return this.validate(schema) ? this : null\n  }\n}\n\n/**\n * Attach a pseudo-symbol for type checking.\n */\n\nText.prototype[MODEL_TYPES.TEXT] = true\n\n/**\n * Memoize read methods.\n */\n\nmemoize(Text.prototype, ['getMarks', 'getMarksAsArray'], {\n  takesArguments: false,\n})\n\nmemoize(Text.prototype, [\n  'getDecoratedCharacters',\n  'getDecorations',\n  'getLeaves',\n  'getMarksAtIndex',\n  'validate',\n])\n\n/**\n * Export.\n *\n * @type {Text}\n */\n\nexport default Text\n","/**\n * Check if an `index` of a `text` node is in a `range`.\n *\n * @param {Number} index\n * @param {Text} text\n * @param {Range} range\n * @return {Boolean}\n */\n\nfunction isIndexInRange(index, text, range) {\n  const { startKey, startOffset, endKey, endOffset } = range\n\n  if (text.key == startKey && text.key == endKey) {\n    return startOffset <= index && index < endOffset\n  } else if (text.key == startKey) {\n    return startOffset <= index\n  } else if (text.key == endKey) {\n    return index < endOffset\n  } else {\n    return true\n  }\n}\n\n/**\n * Export.\n *\n * @type {Function}\n */\n\nexport default isIndexInRange\n","import direction from 'direction'\nimport isPlainObject from 'is-plain-object'\nimport logger from 'slate-dev-logger'\nimport { List, OrderedSet, Set } from 'immutable'\n\nimport Block from './block'\nimport Data from './data'\nimport Document from './document'\nimport Inline from './inline'\nimport Range from './range'\nimport Text from './text'\nimport generateKey from '../utils/generate-key'\nimport isIndexInRange from '../utils/is-index-in-range'\nimport memoize from '../utils/memoize'\n\n/**\n * Node.\n *\n * And interface that `Document`, `Block` and `Inline` all implement, to make\n * working with the recursive node tree easier.\n *\n * @type {Node}\n */\n\nclass Node {\n  /**\n   * Create a new `Node` with `attrs`.\n   *\n   * @param {Object|Node} attrs\n   * @return {Node}\n   */\n\n  static create(attrs = {}) {\n    if (Node.isNode(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      let { object } = attrs\n\n      if (!object && attrs.kind) {\n        logger.deprecate(\n          'slate@0.32.0',\n          'The `kind` property of Slate objects has been renamed to `object`.'\n        )\n        object = attrs.kind\n      }\n\n      switch (object) {\n        case 'block':\n          return Block.create(attrs)\n        case 'document':\n          return Document.create(attrs)\n        case 'inline':\n          return Inline.create(attrs)\n        case 'text':\n          return Text.create(attrs)\n        default: {\n          throw new Error('`Node.create` requires a `object` string.')\n        }\n      }\n    }\n\n    throw new Error(\n      `\\`Node.create\\` only accepts objects or nodes but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Nodes` from an array.\n   *\n   * @param {Array<Object|Node>} elements\n   * @return {List<Node>}\n   */\n\n  static createList(elements = []) {\n    if (List.isList(elements) || Array.isArray(elements)) {\n      const list = new List(elements.map(Node.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Node.createList\\` only accepts lists or arrays, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a dictionary of settable node properties from `attrs`.\n   *\n   * @param {Object|String|Node} attrs\n   * @return {Object}\n   */\n\n  static createProperties(attrs = {}) {\n    if (Block.isBlock(attrs) || Inline.isInline(attrs)) {\n      return {\n        data: attrs.data,\n        isVoid: attrs.isVoid,\n        type: attrs.type,\n      }\n    }\n\n    if (typeof attrs == 'string') {\n      return { type: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      const props = {}\n      if ('type' in attrs) props.type = attrs.type\n      if ('data' in attrs) props.data = Data.create(attrs.data)\n      if ('isVoid' in attrs) props.isVoid = attrs.isVoid\n      return props\n    }\n\n    throw new Error(\n      `\\`Node.createProperties\\` only accepts objects, strings, blocks or inlines, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Node` from a JSON `value`.\n   *\n   * @param {Object} value\n   * @return {Node}\n   */\n\n  static fromJSON(value) {\n    let { object } = value\n\n    if (!object && value.kind) {\n      logger.deprecate(\n        'slate@0.32.0',\n        'The `kind` property of Slate objects has been renamed to `object`.'\n      )\n      object = value.kind\n    }\n\n    switch (object) {\n      case 'block':\n        return Block.fromJSON(value)\n      case 'document':\n        return Document.fromJSON(value)\n      case 'inline':\n        return Inline.fromJSON(value)\n      case 'text':\n        return Text.fromJSON(value)\n      default: {\n        throw new Error(\n          `\\`Node.fromJSON\\` requires an \\`object\\` of either 'block', 'document', 'inline' or 'text', but you passed: ${value}`\n        )\n      }\n    }\n  }\n\n  /**\n   * Alias `fromJS`.\n   */\n\n  static fromJS = Node.fromJSON\n\n  /**\n   * Check if `any` is a `Node`.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isNode(any) {\n    return (\n      Block.isBlock(any) ||\n      Document.isDocument(any) ||\n      Inline.isInline(any) ||\n      Text.isText(any)\n    )\n  }\n\n  /**\n   * Check if `any` is a list of nodes.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isNodeList(any) {\n    return List.isList(any) && any.every(item => Node.isNode(item))\n  }\n\n  /**\n   * True if the node has both descendants in that order, false otherwise. The\n   * order is depth-first, post-order.\n   *\n   * @param {String} first\n   * @param {String} second\n   * @return {Boolean}\n   */\n\n  areDescendantsSorted(first, second) {\n    first = assertKey(first)\n    second = assertKey(second)\n\n    const keys = this.getKeysAsArray()\n    const firstIndex = keys.indexOf(first)\n    const secondIndex = keys.indexOf(second)\n    if (firstIndex == -1 || secondIndex == -1) return null\n\n    return firstIndex < secondIndex\n  }\n\n  /**\n   * Assert that a node has a child by `key` and return it.\n   *\n   * @param {String} key\n   * @return {Node}\n   */\n\n  assertChild(key) {\n    const child = this.getChild(key)\n\n    if (!child) {\n      key = assertKey(key)\n      throw new Error(`Could not find a child node with key \"${key}\".`)\n    }\n\n    return child\n  }\n\n  /**\n   * Assert that a node has a descendant by `key` and return it.\n   *\n   * @param {String} key\n   * @return {Node}\n   */\n\n  assertDescendant(key) {\n    const descendant = this.getDescendant(key)\n\n    if (!descendant) {\n      key = assertKey(key)\n      throw new Error(`Could not find a descendant node with key \"${key}\".`)\n    }\n\n    return descendant\n  }\n\n  /**\n   * Assert that a node's tree has a node by `key` and return it.\n   *\n   * @param {String} key\n   * @return {Node}\n   */\n\n  assertNode(key) {\n    const node = this.getNode(key)\n\n    if (!node) {\n      key = assertKey(key)\n      throw new Error(`Could not find a node with key \"${key}\".`)\n    }\n\n    return node\n  }\n\n  /**\n   * Assert that a node exists at `path` and return it.\n   *\n   * @param {Array} path\n   * @return {Node}\n   */\n\n  assertPath(path) {\n    const descendant = this.getDescendantAtPath(path)\n\n    if (!descendant) {\n      throw new Error(`Could not find a descendant at path \"${path}\".`)\n    }\n\n    return descendant\n  }\n\n  /**\n   * Recursively filter all descendant nodes with `iterator`.\n   *\n   * @param {Function} iterator\n   * @return {List<Node>}\n   */\n\n  filterDescendants(iterator) {\n    const matches = []\n\n    this.forEachDescendant((node, i, nodes) => {\n      if (iterator(node, i, nodes)) matches.push(node)\n    })\n\n    return List(matches)\n  }\n\n  /**\n   * Recursively find all descendant nodes by `iterator`.\n   *\n   * @param {Function} iterator\n   * @return {Node|Null}\n   */\n\n  findDescendant(iterator) {\n    let found = null\n\n    this.forEachDescendant((node, i, nodes) => {\n      if (iterator(node, i, nodes)) {\n        found = node\n        return false\n      }\n    })\n\n    return found\n  }\n\n  /**\n   * Recursively iterate over all descendant nodes with `iterator`. If the\n   * iterator returns false it will break the loop.\n   *\n   * @param {Function} iterator\n   */\n\n  forEachDescendant(iterator) {\n    let ret\n\n    this.nodes.forEach((child, i, nodes) => {\n      if (iterator(child, i, nodes) === false) {\n        ret = false\n        return false\n      }\n\n      if (child.object != 'text') {\n        ret = child.forEachDescendant(iterator)\n        return ret\n      }\n    })\n\n    return ret\n  }\n\n  /**\n   * Get the path of ancestors of a descendant node by `key`.\n   *\n   * @param {String|Node} key\n   * @return {List<Node>|Null}\n   */\n\n  getAncestors(key) {\n    key = assertKey(key)\n\n    if (key == this.key) return List()\n    if (this.hasChild(key)) return List([this])\n\n    let ancestors\n    this.nodes.find(node => {\n      if (node.object == 'text') return false\n      ancestors = node.getAncestors(key)\n      return ancestors\n    })\n\n    if (ancestors) {\n      return ancestors.unshift(this)\n    } else {\n      return null\n    }\n  }\n\n  /**\n   * Get the leaf block descendants of the node.\n   *\n   * @return {List<Node>}\n   */\n\n  getBlocks() {\n    const array = this.getBlocksAsArray()\n    return new List(array)\n  }\n\n  /**\n   * Get the leaf block descendants of the node.\n   *\n   * @return {List<Node>}\n   */\n\n  getBlocksAsArray() {\n    return this.nodes.reduce((array, child) => {\n      if (child.object != 'block') return array\n      if (!child.isLeafBlock()) return array.concat(child.getBlocksAsArray())\n      array.push(child)\n      return array\n    }, [])\n  }\n\n  /**\n   * Get the leaf block descendants in a `range`.\n   *\n   * @param {Range} range\n   * @return {List<Node>}\n   */\n\n  getBlocksAtRange(range) {\n    const array = this.getBlocksAtRangeAsArray(range)\n    // Eliminate duplicates by converting to an `OrderedSet` first.\n    return new List(new OrderedSet(array))\n  }\n\n  /**\n   * Get the leaf block descendants in a `range` as an array\n   *\n   * @param {Range} range\n   * @return {Array}\n   */\n\n  getBlocksAtRangeAsArray(range) {\n    range = range.normalize(this)\n    if (range.isUnset) return []\n\n    const { startKey, endKey } = range\n    const startBlock = this.getClosestBlock(startKey)\n\n    // PERF: the most common case is when the range is in a single block node,\n    // where we can avoid a lot of iterating of the tree.\n    if (startKey == endKey) return [startBlock]\n\n    const endBlock = this.getClosestBlock(endKey)\n    const blocks = this.getBlocksAsArray()\n    const start = blocks.indexOf(startBlock)\n    const end = blocks.indexOf(endBlock)\n    return blocks.slice(start, end + 1)\n  }\n\n  /**\n   * Get all of the leaf blocks that match a `type`.\n   *\n   * @param {String} type\n   * @return {List<Node>}\n   */\n\n  getBlocksByType(type) {\n    const array = this.getBlocksByTypeAsArray(type)\n    return new List(array)\n  }\n\n  /**\n   * Get all of the leaf blocks that match a `type` as an array\n   *\n   * @param {String} type\n   * @return {Array}\n   */\n\n  getBlocksByTypeAsArray(type) {\n    return this.nodes.reduce((array, node) => {\n      if (node.object != 'block') {\n        return array\n      } else if (node.isLeafBlock() && node.type == type) {\n        array.push(node)\n        return array\n      } else {\n        return array.concat(node.getBlocksByTypeAsArray(type))\n      }\n    }, [])\n  }\n\n  /**\n   * Get all of the characters for every text node.\n   *\n   * @return {List<Character>}\n   */\n\n  getCharacters() {\n    const array = this.getCharactersAsArray()\n    return new List(array)\n  }\n\n  /**\n   * Get all of the characters for every text node as an array\n   *\n   * @return {Array}\n   */\n\n  getCharactersAsArray() {\n    return this.nodes.reduce((arr, node) => {\n      return node.object == 'text'\n        ? arr.concat(node.characters.toArray())\n        : arr.concat(node.getCharactersAsArray())\n    }, [])\n  }\n\n  /**\n   * Get a list of the characters in a `range`.\n   *\n   * @param {Range} range\n   * @return {List<Character>}\n   */\n\n  getCharactersAtRange(range) {\n    const array = this.getCharactersAtRangeAsArray(range)\n    return new List(array)\n  }\n\n  /**\n   * Get a list of the characters in a `range` as an array.\n   *\n   * @param {Range} range\n   * @return {Array}\n   */\n\n  getCharactersAtRangeAsArray(range) {\n    range = range.normalize(this)\n    if (range.isUnset) return []\n\n    return this.getTextsAtRange(range).reduce((arr, text) => {\n      const chars = text.characters\n        .filter((char, i) => isIndexInRange(i, text, range))\n        .toArray()\n\n      return arr.concat(chars)\n    }, [])\n  }\n\n  /**\n   * Get a child node by `key`.\n   *\n   * @param {String} key\n   * @return {Node|Null}\n   */\n\n  getChild(key) {\n    key = assertKey(key)\n    return this.nodes.find(node => node.key == key)\n  }\n\n  /**\n   * Get closest parent of node by `key` that matches `iterator`.\n   *\n   * @param {String} key\n   * @param {Function} iterator\n   * @return {Node|Null}\n   */\n\n  getClosest(key, iterator) {\n    key = assertKey(key)\n    const ancestors = this.getAncestors(key)\n    if (!ancestors) {\n      throw new Error(`Could not find a descendant node with key \"${key}\".`)\n    }\n\n    // Exclude this node itself.\n    return ancestors.rest().findLast(iterator)\n  }\n\n  /**\n   * Get the closest block parent of a `node`.\n   *\n   * @param {String} key\n   * @return {Node|Null}\n   */\n\n  getClosestBlock(key) {\n    return this.getClosest(key, parent => parent.object == 'block')\n  }\n\n  /**\n   * Get the closest inline parent of a `node`.\n   *\n   * @param {String} key\n   * @return {Node|Null}\n   */\n\n  getClosestInline(key) {\n    return this.getClosest(key, parent => parent.object == 'inline')\n  }\n\n  /**\n   * Get the closest void parent of a `node`.\n   *\n   * @param {String} key\n   * @return {Node|Null}\n   */\n\n  getClosestVoid(key) {\n    return this.getClosest(key, parent => parent.isVoid)\n  }\n\n  /**\n   * Get the common ancestor of nodes `one` and `two` by keys.\n   *\n   * @param {String} one\n   * @param {String} two\n   * @return {Node}\n   */\n\n  getCommonAncestor(one, two) {\n    one = assertKey(one)\n    two = assertKey(two)\n\n    if (one == this.key) return this\n    if (two == this.key) return this\n\n    this.assertDescendant(one)\n    this.assertDescendant(two)\n    let ancestors = new List()\n    let oneParent = this.getParent(one)\n    let twoParent = this.getParent(two)\n\n    while (oneParent) {\n      ancestors = ancestors.push(oneParent)\n      oneParent = this.getParent(oneParent.key)\n    }\n\n    while (twoParent) {\n      if (ancestors.includes(twoParent)) return twoParent\n      twoParent = this.getParent(twoParent.key)\n    }\n  }\n\n  /**\n   * Get the decorations for the node from a `stack`.\n   *\n   * @param {Stack} stack\n   * @return {List}\n   */\n\n  getDecorations(stack) {\n    const decorations = stack.find('decorateNode', this)\n    const list = Range.createList(decorations || [])\n    return list\n  }\n\n  /**\n   * Get the depth of a child node by `key`, with optional `startAt`.\n   *\n   * @param {String} key\n   * @param {Number} startAt (optional)\n   * @return {Number} depth\n   */\n\n  getDepth(key, startAt = 1) {\n    this.assertDescendant(key)\n    if (this.hasChild(key)) return startAt\n    return this.getFurthestAncestor(key).getDepth(key, startAt + 1)\n  }\n\n  /**\n   * Get a descendant node by `key`.\n   *\n   * @param {String} key\n   * @return {Node|Null}\n   */\n\n  getDescendant(key) {\n    key = assertKey(key)\n    let descendantFound = null\n\n    const found = this.nodes.find(node => {\n      if (node.key === key) {\n        return node\n      } else if (node.object !== 'text') {\n        descendantFound = node.getDescendant(key)\n        return descendantFound\n      } else {\n        return false\n      }\n    })\n\n    return descendantFound || found\n  }\n\n  /**\n   * Get a descendant by `path`.\n   *\n   * @param {Array} path\n   * @return {Node|Null}\n   */\n\n  getDescendantAtPath(path) {\n    let descendant = this\n\n    for (const index of path) {\n      if (!descendant) return\n      if (!descendant.nodes) return\n      descendant = descendant.nodes.get(index)\n    }\n\n    return descendant\n  }\n\n  /**\n   * Get the first child text node.\n   *\n   * @return {Node|Null}\n   */\n\n  getFirstText() {\n    let descendantFound = null\n\n    const found = this.nodes.find(node => {\n      if (node.object == 'text') return true\n      descendantFound = node.getFirstText()\n      return descendantFound\n    })\n\n    return descendantFound || found\n  }\n\n  /**\n   * Get a fragment of the node at a `range`.\n   *\n   * @param {Range} range\n   * @return {Document}\n   */\n\n  getFragmentAtRange(range) {\n    range = range.normalize(this)\n    if (range.isUnset) return Document.create()\n\n    let node = this\n\n    // Make sure the children exist.\n    const { startKey, startOffset, endKey, endOffset } = range\n    const startText = node.assertDescendant(startKey)\n    const endText = node.assertDescendant(endKey)\n\n    // Split at the start and end.\n    let child = startText\n    let previous\n    let parent\n\n    while ((parent = node.getParent(child.key))) {\n      const index = parent.nodes.indexOf(child)\n      const position =\n        child.object == 'text' ? startOffset : child.nodes.indexOf(previous)\n\n      parent = parent.splitNode(index, position)\n      node = node.updateNode(parent)\n      previous = parent.nodes.get(index + 1)\n      child = parent\n    }\n\n    child = startKey == endKey ? node.getNextText(startKey) : endText\n\n    while ((parent = node.getParent(child.key))) {\n      const index = parent.nodes.indexOf(child)\n      const position =\n        child.object == 'text'\n          ? startKey == endKey ? endOffset - startOffset : endOffset\n          : child.nodes.indexOf(previous)\n\n      parent = parent.splitNode(index, position)\n      node = node.updateNode(parent)\n      previous = parent.nodes.get(index + 1)\n      child = parent\n    }\n\n    // Get the start and end nodes.\n    const startNode = node.getNextSibling(\n      node.getFurthestAncestor(startKey).key\n    )\n    const endNode =\n      startKey == endKey\n        ? node.getNextSibling(\n            node.getNextSibling(node.getFurthestAncestor(endKey).key).key\n          )\n        : node.getNextSibling(node.getFurthestAncestor(endKey).key)\n\n    // Get children range of nodes from start to end nodes\n    const startIndex = node.nodes.indexOf(startNode)\n    const endIndex = node.nodes.indexOf(endNode)\n    const nodes = node.nodes.slice(startIndex, endIndex)\n\n    // Return a new document fragment.\n    return Document.create({ nodes })\n  }\n\n  /**\n   * Get the furthest parent of a node by `key` that matches an `iterator`.\n   *\n   * @param {String} key\n   * @param {Function} iterator\n   * @return {Node|Null}\n   */\n\n  getFurthest(key, iterator) {\n    const ancestors = this.getAncestors(key)\n    if (!ancestors) {\n      key = assertKey(key)\n      throw new Error(`Could not find a descendant node with key \"${key}\".`)\n    }\n\n    // Exclude this node itself\n    return ancestors.rest().find(iterator)\n  }\n\n  /**\n   * Get the furthest block parent of a node by `key`.\n   *\n   * @param {String} key\n   * @return {Node|Null}\n   */\n\n  getFurthestBlock(key) {\n    return this.getFurthest(key, node => node.object == 'block')\n  }\n\n  /**\n   * Get the furthest inline parent of a node by `key`.\n   *\n   * @param {String} key\n   * @return {Node|Null}\n   */\n\n  getFurthestInline(key) {\n    return this.getFurthest(key, node => node.object == 'inline')\n  }\n\n  /**\n   * Get the furthest ancestor of a node by `key`.\n   *\n   * @param {String} key\n   * @return {Node|Null}\n   */\n\n  getFurthestAncestor(key) {\n    key = assertKey(key)\n    return this.nodes.find(node => {\n      if (node.key == key) return true\n      if (node.object == 'text') return false\n      return node.hasDescendant(key)\n    })\n  }\n\n  /**\n   * Get the furthest ancestor of a node by `key` that has only one child.\n   *\n   * @param {String} key\n   * @return {Node|Null}\n   */\n\n  getFurthestOnlyChildAncestor(key) {\n    const ancestors = this.getAncestors(key)\n\n    if (!ancestors) {\n      key = assertKey(key)\n      throw new Error(`Could not find a descendant node with key \"${key}\".`)\n    }\n\n    const result = ancestors\n      // Skip this node...\n      .shift()\n      // Take parents until there are more than one child...\n      .reverse()\n      .takeUntil(p => p.nodes.size > 1)\n      // And pick the highest.\n      .last()\n    if (!result) return null\n    return result\n  }\n\n  /**\n   * Get the closest inline nodes for each text node in the node.\n   *\n   * @return {List<Node>}\n   */\n\n  getInlines() {\n    const array = this.getInlinesAsArray()\n    return new List(array)\n  }\n\n  /**\n   * Get the closest inline nodes for each text node in the node, as an array.\n   *\n   * @return {List<Node>}\n   */\n\n  getInlinesAsArray() {\n    let array = []\n\n    this.nodes.forEach(child => {\n      if (child.object == 'text') return\n      if (child.isLeafInline()) {\n        array.push(child)\n      } else {\n        array = array.concat(child.getInlinesAsArray())\n      }\n    })\n\n    return array\n  }\n\n  /**\n   * Get the closest inline nodes for each text node in a `range`.\n   *\n   * @param {Range} range\n   * @return {List<Node>}\n   */\n\n  getInlinesAtRange(range) {\n    const array = this.getInlinesAtRangeAsArray(range)\n    // Remove duplicates by converting it to an `OrderedSet` first.\n    return new List(new OrderedSet(array))\n  }\n\n  /**\n   * Get the closest inline nodes for each text node in a `range` as an array.\n   *\n   * @param {Range} range\n   * @return {Array}\n   */\n\n  getInlinesAtRangeAsArray(range) {\n    range = range.normalize(this)\n    if (range.isUnset) return []\n\n    return this.getTextsAtRangeAsArray(range)\n      .map(text => this.getClosestInline(text.key))\n      .filter(exists => exists)\n  }\n\n  /**\n   * Get all of the leaf inline nodes that match a `type`.\n   *\n   * @param {String} type\n   * @return {List<Node>}\n   */\n\n  getInlinesByType(type) {\n    const array = this.getInlinesByTypeAsArray(type)\n    return new List(array)\n  }\n\n  /**\n   * Get all of the leaf inline nodes that match a `type` as an array.\n   *\n   * @param {String} type\n   * @return {Array}\n   */\n\n  getInlinesByTypeAsArray(type) {\n    return this.nodes.reduce((inlines, node) => {\n      if (node.object == 'text') {\n        return inlines\n      } else if (node.isLeafInline() && node.type == type) {\n        inlines.push(node)\n        return inlines\n      } else {\n        return inlines.concat(node.getInlinesByTypeAsArray(type))\n      }\n    }, [])\n  }\n\n  /**\n   * Return a set of all keys in the node as an array.\n   *\n   * @return {Array<String>}\n   */\n\n  getKeysAsArray() {\n    const keys = []\n\n    this.forEachDescendant(desc => {\n      keys.push(desc.key)\n    })\n\n    return keys\n  }\n\n  /**\n   * Return a set of all keys in the node.\n   *\n   * @return {Set<String>}\n   */\n\n  getKeys() {\n    const keys = this.getKeysAsArray()\n    return new Set(keys)\n  }\n\n  /**\n   * Get the last child text node.\n   *\n   * @return {Node|Null}\n   */\n\n  getLastText() {\n    let descendantFound = null\n\n    const found = this.nodes.findLast(node => {\n      if (node.object == 'text') return true\n      descendantFound = node.getLastText()\n      return descendantFound\n    })\n\n    return descendantFound || found\n  }\n\n  /**\n   * Get all of the marks for all of the characters of every text node.\n   *\n   * @return {Set<Mark>}\n   */\n\n  getMarks() {\n    const array = this.getMarksAsArray()\n    return new Set(array)\n  }\n\n  /**\n   * Get all of the marks for all of the characters of every text node.\n   *\n   * @return {OrderedSet<Mark>}\n   */\n\n  getOrderedMarks() {\n    const array = this.getMarksAsArray()\n    return new OrderedSet(array)\n  }\n\n  /**\n   * Get all of the marks as an array.\n   *\n   * @return {Array}\n   */\n\n  getMarksAsArray() {\n    return this.nodes.reduce((marks, node) => {\n      return marks.concat(node.getMarksAsArray())\n    }, [])\n  }\n\n  /**\n   * Get a set of the marks in a `range`.\n   *\n   * @param {Range} range\n   * @return {Set<Mark>}\n   */\n\n  getMarksAtRange(range) {\n    const array = this.getMarksAtRangeAsArray(range)\n    return new Set(array)\n  }\n\n  /**\n   * Get a set of the marks in a `range`.\n   *\n   * @param {Range} range\n   * @return {Set<Mark>}\n   */\n\n  getInsertMarksAtRange(range) {\n    const array = this.getInsertMarksAtRangeAsArray(range)\n    return new Set(array)\n  }\n\n  /**\n   * Get a set of the marks in a `range`.\n   *\n   * @param {Range} range\n   * @return {OrderedSet<Mark>}\n   */\n\n  getOrderedMarksAtRange(range) {\n    const array = this.getMarksAtRangeAsArray(range)\n    return new OrderedSet(array)\n  }\n\n  /**\n   * Get a set of the active marks in a `range`.\n   *\n   * @param {Range} range\n   * @return {Set<Mark>}\n   */\n\n  getActiveMarksAtRange(range) {\n    const array = this.getActiveMarksAtRangeAsArray(range)\n    return new Set(array)\n  }\n\n  /**\n   * Get a set of the marks in a `range`, by unioning.\n   *\n   * @param {Range} range\n   * @return {Array}\n   */\n\n  getMarksAtRangeAsArray(range) {\n    range = range.normalize(this)\n    if (range.isUnset) return []\n    if (range.isCollapsed) return this.getMarksAtCollapsedRangeAsArray(range)\n\n    return this.getCharactersAtRange(range).reduce((memo, char) => {\n      if (char) {\n        char.marks.toArray().forEach(c => memo.push(c))\n      }\n      return memo\n    }, [])\n  }\n\n  /**\n   * Get a set of the marks in a `range` for insertion behavior.\n   *\n   * @param {Range} range\n   * @return {Array}\n   */\n\n  getInsertMarksAtRangeAsArray(range) {\n    range = range.normalize(this)\n    if (range.isUnset) return []\n    if (range.isCollapsed) return this.getMarksAtCollapsedRangeAsArray(range)\n\n    const text = this.getDescendant(range.startKey)\n    const char = text.characters.get(range.startOffset)\n    if (!char) return []\n\n    return char.marks.toArray()\n  }\n\n  /**\n   * Get a set of marks in a `range`, by treating it as collapsed.\n   *\n   * @param {Range} range\n   * @return {Array}\n   */\n\n  getMarksAtCollapsedRangeAsArray(range) {\n    if (range.isUnset) return []\n\n    const { startKey, startOffset } = range\n\n    if (startOffset == 0) {\n      const previous = this.getPreviousText(startKey)\n      if (!previous || previous.text.length == 0) return []\n      if (\n        this.getClosestBlock(startKey) !== this.getClosestBlock(previous.key)\n      ) {\n        return []\n      }\n      const char = previous.characters.get(previous.text.length - 1)\n      if (!char) return []\n\n      return char.marks.toArray()\n    }\n\n    const text = this.getDescendant(startKey)\n    const char = text.characters.get(startOffset - 1)\n    if (!char) return []\n\n    return char.marks.toArray()\n  }\n\n  /**\n   * Get a set of marks in a `range`, by intersecting.\n   *\n   * @param {Range} range\n   * @return {Array}\n   */\n\n  getActiveMarksAtRangeAsArray(range) {\n    range = range.normalize(this)\n    if (range.isUnset) return []\n    if (range.isCollapsed) return this.getMarksAtCollapsedRangeAsArray(range)\n\n    // Otherwise, get a set of the marks for each character in the range.\n    const chars = this.getCharactersAtRange(range)\n    const first = chars.first()\n    if (!first) return []\n\n    let memo = first.marks\n\n    chars.slice(1).forEach(char => {\n      const marks = char ? char.marks : []\n      memo = memo.intersect(marks)\n      return memo.size != 0\n    })\n\n    return memo.toArray()\n  }\n\n  /**\n   * Get all of the marks that match a `type`.\n   *\n   * @param {String} type\n   * @return {Set<Mark>}\n   */\n\n  getMarksByType(type) {\n    const array = this.getMarksByTypeAsArray(type)\n    return new Set(array)\n  }\n\n  /**\n   * Get all of the marks that match a `type`.\n   *\n   * @param {String} type\n   * @return {OrderedSet<Mark>}\n   */\n\n  getOrderedMarksByType(type) {\n    const array = this.getMarksByTypeAsArray(type)\n    return new OrderedSet(array)\n  }\n\n  /**\n   * Get all of the marks that match a `type` as an array.\n   *\n   * @param {String} type\n   * @return {Array}\n   */\n\n  getMarksByTypeAsArray(type) {\n    return this.nodes.reduce((array, node) => {\n      return node.object == 'text'\n        ? array.concat(node.getMarksAsArray().filter(m => m.type == type))\n        : array.concat(node.getMarksByTypeAsArray(type))\n    }, [])\n  }\n\n  /**\n   * Get the block node before a descendant text node by `key`.\n   *\n   * @param {String} key\n   * @return {Node|Null}\n   */\n\n  getNextBlock(key) {\n    const child = this.assertDescendant(key)\n    let last\n\n    if (child.object == 'block') {\n      last = child.getLastText()\n    } else {\n      const block = this.getClosestBlock(key)\n      last = block.getLastText()\n    }\n\n    const next = this.getNextText(last.key)\n    if (!next) return null\n\n    return this.getClosestBlock(next.key)\n  }\n\n  /**\n   * Get the node after a descendant by `key`.\n   *\n   * @param {String} key\n   * @return {Node|Null}\n   */\n\n  getNextSibling(key) {\n    key = assertKey(key)\n\n    const parent = this.getParent(key)\n    const after = parent.nodes.skipUntil(child => child.key == key)\n\n    if (after.size == 0) {\n      throw new Error(`Could not find a child node with key \"${key}\".`)\n    }\n    return after.get(1)\n  }\n\n  /**\n   * Get the text node after a descendant text node by `key`.\n   *\n   * @param {String} key\n   * @return {Node|Null}\n   */\n\n  getNextText(key) {\n    key = assertKey(key)\n    return this.getTexts()\n      .skipUntil(text => text.key == key)\n      .get(1)\n  }\n\n  /**\n   * Get a node in the tree by `key`.\n   *\n   * @param {String} key\n   * @return {Node|Null}\n   */\n\n  getNode(key) {\n    key = assertKey(key)\n    return this.key == key ? this : this.getDescendant(key)\n  }\n\n  /**\n   * Get a node in the tree by `path`.\n   *\n   * @param {Array} path\n   * @return {Node|Null}\n   */\n\n  getNodeAtPath(path) {\n    return path.length ? this.getDescendantAtPath(path) : this\n  }\n\n  /**\n   * Get the offset for a descendant text node by `key`.\n   *\n   * @param {String} key\n   * @return {Number}\n   */\n\n  getOffset(key) {\n    this.assertDescendant(key)\n\n    // Calculate the offset of the nodes before the highest child.\n    const child = this.getFurthestAncestor(key)\n    const offset = this.nodes\n      .takeUntil(n => n == child)\n      .reduce((memo, n) => memo + n.text.length, 0)\n\n    // Recurse if need be.\n    return this.hasChild(key) ? offset : offset + child.getOffset(key)\n  }\n\n  /**\n   * Get the offset from a `range`.\n   *\n   * @param {Range} range\n   * @return {Number}\n   */\n\n  getOffsetAtRange(range) {\n    range = range.normalize(this)\n\n    if (range.isUnset) {\n      throw new Error('The range cannot be unset to calculcate its offset.')\n    }\n\n    if (range.isExpanded) {\n      throw new Error('The range must be collapsed to calculcate its offset.')\n    }\n\n    const { startKey, startOffset } = range\n    return this.getOffset(startKey) + startOffset\n  }\n\n  /**\n   * Get the parent of a child node by `key`.\n   *\n   * @param {String} key\n   * @return {Node|Null}\n   */\n\n  getParent(key) {\n    if (this.hasChild(key)) return this\n\n    let node = null\n\n    this.nodes.find(child => {\n      if (child.object == 'text') {\n        return false\n      } else {\n        node = child.getParent(key)\n        return node\n      }\n    })\n\n    return node\n  }\n\n  /**\n   * Get the path of a descendant node by `key`.\n   *\n   * @param {String|Node} key\n   * @return {Array}\n   */\n\n  getPath(key) {\n    let child = this.assertNode(key)\n    const ancestors = this.getAncestors(key)\n    const path = []\n\n    ancestors.reverse().forEach(ancestor => {\n      const index = ancestor.nodes.indexOf(child)\n      path.unshift(index)\n      child = ancestor\n    })\n\n    return path\n  }\n\n  /**\n   * Refind the path of node if path is changed.\n   *\n   * @param {Array} path\n   * @param {String} key\n   * @return {Array}\n   */\n\n  refindPath(path, key) {\n    const node = this.getDescendantAtPath(path)\n    if (node && node.key === key) {\n      return path\n    }\n\n    return this.getPath(key)\n  }\n\n  /**\n   *\n   * Refind the node with the same node.key after change.\n   *\n   * @param {Array} path\n   * @param {String} key\n   * @return {Node|Void}\n   */\n\n  refindNode(path, key) {\n    const node = this.getDescendantAtPath(path)\n    if (node && node.key === key) {\n      return node\n    }\n\n    return this.getDescendant(key)\n  }\n\n  /**\n   * Get the placeholder for the node from a `schema`.\n   *\n   * @param {Schema} schema\n   * @return {Component|Void}\n   */\n\n  getPlaceholder(schema) {\n    return schema.__getPlaceholder(this)\n  }\n\n  /**\n   * Get the block node before a descendant text node by `key`.\n   *\n   * @param {String} key\n   * @return {Node|Null}\n   */\n\n  getPreviousBlock(key) {\n    const child = this.assertDescendant(key)\n    let first\n\n    if (child.object == 'block') {\n      first = child.getFirstText()\n    } else {\n      const block = this.getClosestBlock(key)\n      first = block.getFirstText()\n    }\n\n    const previous = this.getPreviousText(first.key)\n    if (!previous) return null\n\n    return this.getClosestBlock(previous.key)\n  }\n\n  /**\n   * Get the node before a descendant node by `key`.\n   *\n   * @param {String} key\n   * @return {Node|Null}\n   */\n\n  getPreviousSibling(key) {\n    key = assertKey(key)\n    const parent = this.getParent(key)\n    const before = parent.nodes.takeUntil(child => child.key == key)\n\n    if (before.size == parent.nodes.size) {\n      throw new Error(`Could not find a child node with key \"${key}\".`)\n    }\n\n    return before.last()\n  }\n\n  /**\n   * Get the text node before a descendant text node by `key`.\n   *\n   * @param {String} key\n   * @return {Node|Null}\n   */\n\n  getPreviousText(key) {\n    key = assertKey(key)\n    return this.getTexts()\n      .takeUntil(text => text.key == key)\n      .last()\n  }\n\n  /**\n   * Get the indexes of the selection for a `range`, given an extra flag for\n   * whether the node `isSelected`, to determine whether not finding matches\n   * means everything is selected or nothing is.\n   *\n   * @param {Range} range\n   * @param {Boolean} isSelected\n   * @return {Object|Null}\n   */\n\n  getSelectionIndexes(range, isSelected = false) {\n    const { startKey, endKey } = range\n\n    // PERF: if we're not selected, or the range is blurred, we can exit early.\n    if (!isSelected || range.isBlurred) {\n      return null\n    }\n\n    // if we've been given an invalid selection we can exit early.\n    if (range.isUnset) {\n      return null\n    }\n\n    // PERF: if the start and end keys are the same, just check for the child\n    // that contains that single key.\n    if (startKey == endKey) {\n      const child = this.getFurthestAncestor(startKey)\n      const index = child ? this.nodes.indexOf(child) : null\n      return { start: index, end: index + 1 }\n    }\n\n    // Otherwise, check all of the children...\n    let start = null\n    let end = null\n\n    this.nodes.forEach((child, i) => {\n      if (child.object == 'text') {\n        if (start == null && child.key == startKey) start = i\n        if (end == null && child.key == endKey) end = i + 1\n      } else {\n        if (start == null && child.hasDescendant(startKey)) start = i\n        if (end == null && child.hasDescendant(endKey)) end = i + 1\n      }\n\n      // PERF: exit early if both start and end have been found.\n      return start == null || end == null\n    })\n\n    if (isSelected && start == null) start = 0\n    if (isSelected && end == null) end = this.nodes.size\n    return start == null ? null : { start, end }\n  }\n\n  /**\n   * Get the concatenated text string of all child nodes.\n   *\n   * @return {String}\n   */\n\n  getText() {\n    return this.nodes.reduce((string, node) => {\n      return string + node.text\n    }, '')\n  }\n\n  /**\n   * Get the descendent text node at an `offset`.\n   *\n   * @param {String} offset\n   * @return {Node|Null}\n   */\n\n  getTextAtOffset(offset) {\n    // PERF: Add a few shortcuts for the obvious cases.\n    if (offset == 0) return this.getFirstText()\n    if (offset == this.text.length) return this.getLastText()\n    if (offset < 0 || offset > this.text.length) return null\n\n    let length = 0\n\n    return this.getTexts().find((node, i, nodes) => {\n      length += node.text.length\n      return length > offset\n    })\n  }\n\n  /**\n   * Get the direction of the node's text.\n   *\n   * @return {String}\n   */\n\n  getTextDirection() {\n    const dir = direction(this.text)\n    return dir == 'neutral' ? undefined : dir\n  }\n\n  /**\n   * Recursively get all of the child text nodes in order of appearance.\n   *\n   * @return {List<Node>}\n   */\n\n  getTexts() {\n    const array = this.getTextsAsArray()\n    return new List(array)\n  }\n\n  /**\n   * Recursively get all the leaf text nodes in order of appearance, as array.\n   *\n   * @return {List<Node>}\n   */\n\n  getTextsAsArray() {\n    let array = []\n\n    this.nodes.forEach(node => {\n      if (node.object == 'text') {\n        array.push(node)\n      } else {\n        array = array.concat(node.getTextsAsArray())\n      }\n    })\n\n    return array\n  }\n\n  /**\n   * Get all of the text nodes in a `range`.\n   *\n   * @param {Range} range\n   * @return {List<Node>}\n   */\n\n  getTextsAtRange(range) {\n    const array = this.getTextsAtRangeAsArray(range)\n    return new List(array)\n  }\n\n  /**\n   * Get all of the text nodes in a `range` as an array.\n   *\n   * @param {Range} range\n   * @return {Array}\n   */\n\n  getTextsAtRangeAsArray(range) {\n    range = range.normalize(this)\n    if (range.isUnset) return []\n\n    const { startKey, endKey } = range\n    const startText = this.getDescendant(startKey)\n\n    // PERF: the most common case is when the range is in a single text node,\n    // where we can avoid a lot of iterating of the tree.\n    if (startKey == endKey) return [startText]\n\n    const endText = this.getDescendant(endKey)\n    const texts = this.getTextsAsArray()\n    const start = texts.indexOf(startText)\n    const end = texts.indexOf(endText)\n    return texts.slice(start, end + 1)\n  }\n\n  /**\n   * Check if a child node exists by `key`.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n\n  hasChild(key) {\n    return !!this.getChild(key)\n  }\n\n  /**\n   * Recursively check if a child node exists by `key`.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n\n  hasDescendant(key) {\n    return !!this.getDescendant(key)\n  }\n\n  /**\n   * Recursively check if a node exists by `key`.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n\n  hasNode(key) {\n    return !!this.getNode(key)\n  }\n\n  /**\n   * Check if a node has a void parent by `key`.\n   *\n   * @param {String} key\n   * @return {Boolean}\n   */\n\n  hasVoidParent(key) {\n    return !!this.getClosestVoid(key)\n  }\n\n  /**\n   * Insert a `node` at `index`.\n   *\n   * @param {Number} index\n   * @param {Node} node\n   * @return {Node}\n   */\n\n  insertNode(index, node) {\n    const keys = this.getKeysAsArray()\n\n    if (keys.includes(node.key)) {\n      node = node.regenerateKey()\n    }\n\n    if (node.object != 'text') {\n      node = node.mapDescendants(desc => {\n        return keys.includes(desc.key) ? desc.regenerateKey() : desc\n      })\n    }\n\n    const nodes = this.nodes.insert(index, node)\n    return this.set('nodes', nodes)\n  }\n\n  /**\n   * Check whether the node is in a `range`.\n   *\n   * @param {Range} range\n   * @return {Boolean}\n   */\n\n  isInRange(range) {\n    range = range.normalize(this)\n\n    const node = this\n    const { startKey, endKey, isCollapsed } = range\n\n    // PERF: solve the most common cast where the start or end key are inside\n    // the node, for collapsed selections.\n    if (\n      node.key == startKey ||\n      node.key == endKey ||\n      node.hasDescendant(startKey) ||\n      node.hasDescendant(endKey)\n    ) {\n      return true\n    }\n\n    // PERF: if the selection is collapsed and the previous check didn't return\n    // true, then it must be false.\n    if (isCollapsed) {\n      return false\n    }\n\n    // Otherwise, look through all of the leaf text nodes in the range, to see\n    // if any of them are inside the node.\n    const texts = node.getTextsAtRange(range)\n    let memo = false\n\n    texts.forEach(text => {\n      if (node.hasDescendant(text.key)) memo = true\n      return memo\n    })\n\n    return memo\n  }\n\n  /**\n   * Check whether the node is a leaf block.\n   *\n   * @return {Boolean}\n   */\n\n  isLeafBlock() {\n    return this.object == 'block' && this.nodes.every(n => n.object != 'block')\n  }\n\n  /**\n   * Check whether the node is a leaf inline.\n   *\n   * @return {Boolean}\n   */\n\n  isLeafInline() {\n    return (\n      this.object == 'inline' && this.nodes.every(n => n.object != 'inline')\n    )\n  }\n\n  /**\n   * Merge a children node `first` with another children node `second`.\n   * `first` and `second` will be concatenated in that order.\n   * `first` and `second` must be two Nodes or two Text.\n   *\n   * @param {Node} first\n   * @param {Node} second\n   * @return {Node}\n   */\n\n  mergeNode(withIndex, index) {\n    let node = this\n    let one = node.nodes.get(withIndex)\n    const two = node.nodes.get(index)\n\n    if (one.object != two.object) {\n      throw new Error(\n        `Tried to merge two nodes of different objects: \"${one.object}\" and \"${\n          two.object\n        }\".`\n      )\n    }\n\n    // If the nodes are text nodes, concatenate their characters together.\n    if (one.object == 'text') {\n      const characters = one.characters.concat(two.characters)\n      one = one.set('characters', characters)\n    } else {\n      // Otherwise, concatenate their child nodes together.\n      const nodes = one.nodes.concat(two.nodes)\n      one = one.set('nodes', nodes)\n    }\n\n    node = node.removeNode(index)\n    node = node.removeNode(withIndex)\n    node = node.insertNode(withIndex, one)\n    return node\n  }\n\n  /**\n   * Map all child nodes, updating them in their parents. This method is\n   * optimized to not return a new node if no changes are made.\n   *\n   * @param {Function} iterator\n   * @return {Node}\n   */\n\n  mapChildren(iterator) {\n    let { nodes } = this\n\n    nodes.forEach((node, i) => {\n      const ret = iterator(node, i, this.nodes)\n      if (ret != node) nodes = nodes.set(ret.key, ret)\n    })\n\n    return this.set('nodes', nodes)\n  }\n\n  /**\n   * Map all descendant nodes, updating them in their parents. This method is\n   * optimized to not return a new node if no changes are made.\n   *\n   * @param {Function} iterator\n   * @return {Node}\n   */\n\n  mapDescendants(iterator) {\n    let { nodes } = this\n\n    nodes.forEach((node, i) => {\n      let ret = node\n      if (ret.object != 'text') ret = ret.mapDescendants(iterator)\n      ret = iterator(ret, i, this.nodes)\n      if (ret == node) return\n\n      const index = nodes.indexOf(node)\n      nodes = nodes.set(index, ret)\n    })\n\n    return this.set('nodes', nodes)\n  }\n\n  /**\n   * Regenerate the node's key.\n   *\n   * @return {Node}\n   */\n\n  regenerateKey() {\n    const key = generateKey()\n    return this.set('key', key)\n  }\n\n  /**\n   * Remove a `node` from the children node map.\n   *\n   * @param {String} key\n   * @return {Node}\n   */\n\n  removeDescendant(key) {\n    key = assertKey(key)\n\n    let node = this\n    let parent = node.getParent(key)\n    if (!parent)\n      throw new Error(`Could not find a descendant node with key \"${key}\".`)\n\n    const index = parent.nodes.findIndex(n => n.key === key)\n    const nodes = parent.nodes.splice(index, 1)\n\n    parent = parent.set('nodes', nodes)\n    node = node.updateNode(parent)\n    return node\n  }\n\n  /**\n   * Remove a node at `index`.\n   *\n   * @param {Number} index\n   * @return {Node}\n   */\n\n  removeNode(index) {\n    const nodes = this.nodes.splice(index, 1)\n    return this.set('nodes', nodes)\n  }\n\n  /**\n   * Split a child node by `index` at `position`.\n   *\n   * @param {Number} index\n   * @param {Number} position\n   * @return {Node}\n   */\n\n  splitNode(index, position) {\n    let node = this\n    const child = node.nodes.get(index)\n    let one\n    let two\n\n    // If the child is a text node, the `position` refers to the text offset at\n    // which to split it.\n    if (child.object == 'text') {\n      const befores = child.characters.take(position)\n      const afters = child.characters.skip(position)\n      one = child.set('characters', befores)\n      two = child.set('characters', afters).regenerateKey()\n    } else {\n      // Otherwise, if the child is not a text node, the `position` refers to the\n      // index at which to split its children.\n      const befores = child.nodes.take(position)\n      const afters = child.nodes.skip(position)\n      one = child.set('nodes', befores)\n      two = child.set('nodes', afters).regenerateKey()\n    }\n\n    // Remove the old node and insert the newly split children.\n    node = node.removeNode(index)\n    node = node.insertNode(index, two)\n    node = node.insertNode(index, one)\n    return node\n  }\n\n  /**\n   * Set a new value for a child node by `key`.\n   *\n   * @param {Node} node\n   * @return {Node}\n   */\n\n  updateNode(node) {\n    if (node.key == this.key) {\n      return node\n    }\n\n    let child = this.assertDescendant(node.key)\n    const ancestors = this.getAncestors(node.key)\n\n    ancestors.reverse().forEach(parent => {\n      let { nodes } = parent\n      const index = nodes.indexOf(child)\n      child = parent\n      nodes = nodes.set(index, node)\n      parent = parent.set('nodes', nodes)\n      node = parent\n    })\n\n    return node\n  }\n\n  /**\n   * Validate the node against a `schema`.\n   *\n   * @param {Schema} schema\n   * @return {Function|Null}\n   */\n\n  validate(schema) {\n    return schema.validateNode(this)\n  }\n\n  /**\n   * Get the first invalid descendant\n   *\n   * @param {Schema} schema\n   * @return {Node|Text|Null}\n   */\n\n  getFirstInvalidDescendant(schema) {\n    let result = null\n    this.nodes.find(n => {\n      result = n.validate(schema) ? n : n.getFirstInvalidDescendant(schema)\n      return result\n    })\n    return result\n  }\n}\n\n/**\n * Assert a key `arg`.\n *\n * @param {String} arg\n * @return {String}\n */\n\nfunction assertKey(arg) {\n  if (typeof arg == 'string') return arg\n  throw new Error(\n    `Invalid \\`key\\` argument! It must be a key string, but you passed: ${arg}`\n  )\n}\n\n/**\n * Memoize read methods.\n */\n\nmemoize(Node.prototype, [\n  'areDescendantsSorted',\n  'getActiveMarksAtRangeAsArray',\n  'getAncestors',\n  'getBlocksAsArray',\n  'getBlocksAtRangeAsArray',\n  'getBlocksByTypeAsArray',\n  'getCharactersAtRangeAsArray',\n  'getCharactersAsArray',\n  'getChild',\n  'getClosestBlock',\n  'getClosestInline',\n  'getClosestVoid',\n  'getCommonAncestor',\n  'getDecorations',\n  'getDepth',\n  'getDescendant',\n  'getDescendantAtPath',\n  'getFirstText',\n  'getFragmentAtRange',\n  'getFurthestBlock',\n  'getFurthestInline',\n  'getFurthestAncestor',\n  'getFurthestOnlyChildAncestor',\n  'getInlinesAsArray',\n  'getInlinesAtRangeAsArray',\n  'getInlinesByTypeAsArray',\n  'getMarksAsArray',\n  'getMarksAtRangeAsArray',\n  'getInsertMarksAtRangeAsArray',\n  'getKeysAsArray',\n  'getLastText',\n  'getMarksByTypeAsArray',\n  'getNextBlock',\n  'getNextSibling',\n  'getNextText',\n  'getNode',\n  'getNodeAtPath',\n  'getOffset',\n  'getOffsetAtRange',\n  'getParent',\n  'getPath',\n  'getPlaceholder',\n  'getPreviousBlock',\n  'getPreviousSibling',\n  'getPreviousText',\n  'getText',\n  'getTextAtOffset',\n  'getTextDirection',\n  'getTextsAsArray',\n  'getTextsAtRangeAsArray',\n  'isLeafBlock',\n  'isLeafInline',\n  'validate',\n  'getFirstInvalidDescendant',\n])\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Node\n","/**\n * Prevent circular dependencies.\n */\n\nimport './document'\n\n/**\n * Dependencies.\n */\n\nimport isPlainObject from 'is-plain-object'\nimport logger from 'slate-dev-logger'\nimport { List, Map, Record } from 'immutable'\n\nimport Node from './node'\nimport MODEL_TYPES from '../constants/model-types'\nimport generateKey from '../utils/generate-key'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  data: new Map(),\n  isVoid: false,\n  key: undefined,\n  nodes: new List(),\n  type: undefined,\n}\n\n/**\n * Inline.\n *\n * @type {Inline}\n */\n\nclass Inline extends Record(DEFAULTS) {\n  /**\n   * Create a new `Inline` with `attrs`.\n   *\n   * @param {Object|String|Inline} attrs\n   * @return {Inline}\n   */\n\n  static create(attrs = {}) {\n    if (Inline.isInline(attrs)) {\n      return attrs\n    }\n\n    if (typeof attrs == 'string') {\n      attrs = { type: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      return Inline.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Inline.create\\` only accepts objects, strings or inlines, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Inlines` from an array.\n   *\n   * @param {Array<Inline|Object>|List<Inline|Object>} elements\n   * @return {List<Inline>}\n   */\n\n  static createList(elements = []) {\n    if (List.isList(elements) || Array.isArray(elements)) {\n      const list = new List(elements.map(Inline.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Inline.createList\\` only accepts arrays or lists, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a `Inline` from a JSON `object`.\n   *\n   * @param {Object|Inline} object\n   * @return {Inline}\n   */\n\n  static fromJSON(object) {\n    if (Inline.isInline(object)) {\n      return object\n    }\n\n    const {\n      data = {},\n      isVoid = false,\n      key = generateKey(),\n      nodes = [],\n      type,\n    } = object\n\n    if (typeof type != 'string') {\n      throw new Error('`Inline.fromJS` requires a `type` string.')\n    }\n\n    const inline = new Inline({\n      key,\n      type,\n      isVoid: !!isVoid,\n      data: new Map(data),\n      nodes: new List(nodes.map(Node.fromJSON)),\n    })\n\n    return inline\n  }\n\n  /**\n   * Alias `fromJS`.\n   */\n\n  static fromJS = Inline.fromJSON\n\n  /**\n   * Check if `any` is a `Inline`.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isInline(any) {\n    return !!(any && any[MODEL_TYPES.INLINE])\n  }\n\n  /**\n   * Check if `any` is a list of inlines.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isInlineList(any) {\n    return List.isList(any) && any.every(item => Inline.isInline(item))\n  }\n\n  /**\n   * Object.\n   *\n   * @return {String}\n   */\n\n  get object() {\n    return 'inline'\n  }\n\n  get kind() {\n    logger.deprecate(\n      'slate@0.32.0',\n      'The `kind` property of Slate objects has been renamed to `object`.'\n    )\n    return this.object\n  }\n\n  /**\n   * Check if the inline is empty.\n   * Returns true if inline is not void and all it's children nodes are empty.\n   * Void node is never empty, regardless of it's content.\n   *\n   * @return {Boolean}\n   */\n\n  get isEmpty() {\n    return !this.isVoid && !this.nodes.some(child => !child.isEmpty)\n  }\n\n  /**\n   * Get the concatenated text of all the inline's children.\n   *\n   * @return {String}\n   */\n\n  get text() {\n    return this.getText()\n  }\n\n  /**\n   * Return a JSON representation of the inline.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      type: this.type,\n      isVoid: this.isVoid,\n      data: this.data.toJSON(),\n      nodes: this.nodes.toArray().map(n => n.toJSON(options)),\n    }\n\n    if (options.preserveKeys) {\n      object.key = this.key\n    }\n\n    return object\n  }\n\n  /**\n   * Alias `toJS`.\n   */\n\n  toJS(options) {\n    return this.toJSON(options)\n  }\n}\n\n/**\n * Attach a pseudo-symbol for type checking.\n */\n\nInline.prototype[MODEL_TYPES.INLINE] = true\n\n/**\n * Mix in `Node` methods.\n */\n\nObject.getOwnPropertyNames(Node.prototype).forEach(method => {\n  if (method == 'constructor') return\n  Inline.prototype[method] = Node.prototype[method]\n})\n\n/**\n * Export.\n *\n * @type {Inline}\n */\n\nexport default Inline\n","/**\n * Prevent circular dependencies.\n */\n\nimport './block'\nimport './inline'\n\n/**\n * Dependencies.\n */\n\nimport isPlainObject from 'is-plain-object'\nimport logger from 'slate-dev-logger'\nimport { List, Map, Record } from 'immutable'\n\nimport Node from './node'\nimport MODEL_TYPES from '../constants/model-types'\nimport generateKey from '../utils/generate-key'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  data: new Map(),\n  key: undefined,\n  nodes: new List(),\n}\n\n/**\n * Document.\n *\n * @type {Document}\n */\n\nclass Document extends Record(DEFAULTS) {\n  /**\n   * Create a new `Document` with `attrs`.\n   *\n   * @param {Object|Array|List|Text} attrs\n   * @return {Document}\n   */\n\n  static create(attrs = {}) {\n    if (Document.isDocument(attrs)) {\n      return attrs\n    }\n\n    if (List.isList(attrs) || Array.isArray(attrs)) {\n      attrs = { nodes: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      return Document.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Document.create\\` only accepts objects, arrays, lists or documents, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Document` from a JSON `object`.\n   *\n   * @param {Object|Document} object\n   * @return {Document}\n   */\n\n  static fromJSON(object) {\n    if (Document.isDocument(object)) {\n      return object\n    }\n\n    const { data = {}, key = generateKey(), nodes = [] } = object\n\n    const document = new Document({\n      key,\n      data: new Map(data),\n      nodes: new List(nodes.map(Node.fromJSON)),\n    })\n\n    return document\n  }\n\n  /**\n   * Alias `fromJS`.\n   */\n\n  static fromJS = Document.fromJSON\n\n  /**\n   * Check if `any` is a `Document`.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isDocument(any) {\n    return !!(any && any[MODEL_TYPES.DOCUMENT])\n  }\n\n  /**\n   * Object.\n   *\n   * @return {String}\n   */\n\n  get object() {\n    return 'document'\n  }\n\n  get kind() {\n    logger.deprecate(\n      'slate@0.32.0',\n      'The `kind` property of Slate objects has been renamed to `object`.'\n    )\n    return this.object\n  }\n\n  /**\n   * Check if the document is empty.\n   * Returns true if all it's children nodes are empty.\n   *\n   * @return {Boolean}\n   */\n\n  get isEmpty() {\n    return !this.nodes.some(child => !child.isEmpty)\n  }\n\n  /**\n   * Get the concatenated text of all the document's children.\n   *\n   * @return {String}\n   */\n\n  get text() {\n    return this.getText()\n  }\n\n  /**\n   * Return a JSON representation of the document.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      data: this.data.toJSON(),\n      nodes: this.nodes.toArray().map(n => n.toJSON(options)),\n    }\n\n    if (options.preserveKeys) {\n      object.key = this.key\n    }\n\n    return object\n  }\n\n  /**\n   * Alias `toJS`.\n   */\n\n  toJS(options) {\n    return this.toJSON(options)\n  }\n}\n\n/**\n * Attach a pseudo-symbol for type checking.\n */\n\nDocument.prototype[MODEL_TYPES.DOCUMENT] = true\n\n/**\n * Mix in `Node` methods.\n */\n\nObject.getOwnPropertyNames(Node.prototype).forEach(method => {\n  if (method == 'constructor') return\n  Document.prototype[method] = Node.prototype[method]\n})\n\n/**\n * Export.\n *\n * @type {Document}\n */\n\nexport default Document\n","/**\n * Prevent circular dependencies.\n */\n\nimport './document'\n\n/**\n * Dependencies.\n */\n\nimport isPlainObject from 'is-plain-object'\nimport logger from 'slate-dev-logger'\nimport { List, Map, Record } from 'immutable'\n\nimport MODEL_TYPES from '../constants/model-types'\nimport Node from './node'\nimport generateKey from '../utils/generate-key'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  data: new Map(),\n  isVoid: false,\n  key: undefined,\n  nodes: new List(),\n  type: undefined,\n}\n\n/**\n * Block.\n *\n * @type {Block}\n */\n\nclass Block extends Record(DEFAULTS) {\n  /**\n   * Create a new `Block` from `attrs`.\n   *\n   * @param {Object|String|Block} attrs\n   * @return {Block}\n   */\n\n  static create(attrs = {}) {\n    if (Block.isBlock(attrs)) {\n      return attrs\n    }\n\n    if (typeof attrs == 'string') {\n      attrs = { type: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      return Block.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Block.create\\` only accepts objects, strings or blocks, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Blocks` from `attrs`.\n   *\n   * @param {Array<Block|Object>|List<Block|Object>} attrs\n   * @return {List<Block>}\n   */\n\n  static createList(attrs = []) {\n    if (List.isList(attrs) || Array.isArray(attrs)) {\n      const list = new List(attrs.map(Block.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Block.createList\\` only accepts arrays or lists, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Block` from a JSON `object`.\n   *\n   * @param {Object|Block} object\n   * @return {Block}\n   */\n\n  static fromJSON(object) {\n    if (Block.isBlock(object)) {\n      return object\n    }\n\n    const {\n      data = {},\n      isVoid = false,\n      key = generateKey(),\n      nodes = [],\n      type,\n    } = object\n\n    if (typeof type != 'string') {\n      throw new Error('`Block.fromJSON` requires a `type` string.')\n    }\n\n    const block = new Block({\n      key,\n      type,\n      isVoid: !!isVoid,\n      data: new Map(data),\n      nodes: new List(nodes.map(Node.fromJSON)),\n    })\n\n    return block\n  }\n\n  /**\n   * Alias `fromJS`.\n   */\n\n  static fromJS = Block.fromJSON\n\n  /**\n   * Check if `any` is a `Block`.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isBlock(any) {\n    return !!(any && any[MODEL_TYPES.BLOCK])\n  }\n\n  /**\n   * Check if `any` is a block list.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isBlockList(any) {\n    return List.isList(any) && any.every(item => Block.isBlock(item))\n  }\n\n  /**\n   * Object.\n   *\n   * @return {String}\n   */\n\n  get object() {\n    return 'block'\n  }\n\n  get kind() {\n    logger.deprecate(\n      'slate@0.32.0',\n      'The `kind` property of Slate objects has been renamed to `object`.'\n    )\n    return this.object\n  }\n\n  /**\n   * Check if the block is empty.\n   * Returns true if block is not void and all it's children nodes are empty.\n   * Void node is never empty, regardless of it's content.\n   *\n   * @return {Boolean}\n   */\n\n  get isEmpty() {\n    return !this.isVoid && !this.nodes.some(child => !child.isEmpty)\n  }\n\n  /**\n   * Get the concatenated text of all the block's children.\n   *\n   * @return {String}\n   */\n\n  get text() {\n    return this.getText()\n  }\n\n  /**\n   * Return a JSON representation of the block.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      type: this.type,\n      isVoid: this.isVoid,\n      data: this.data.toJSON(),\n      nodes: this.nodes.toArray().map(n => n.toJSON(options)),\n    }\n\n    if (options.preserveKeys) {\n      object.key = this.key\n    }\n\n    return object\n  }\n\n  /**\n   * Alias `toJS`.\n   */\n\n  toJS(options) {\n    return this.toJSON(options)\n  }\n}\n\n/**\n * Attach a pseudo-symbol for type checking.\n */\n\nBlock.prototype[MODEL_TYPES.BLOCK] = true\n\n/**\n * Mix in `Node` methods.\n */\n\nObject.getOwnPropertyNames(Node.prototype).forEach(method => {\n  if (method == 'constructor') return\n  Block.prototype[method] = Node.prototype[method]\n})\n\n/**\n * Export.\n *\n * @type {Block}\n */\n\nexport default Block\n","import logger from 'slate-dev-logger'\nimport Block from '../models/block'\nimport Inline from '../models/inline'\nimport Mark from '../models/mark'\n\n/**\n * Changes.\n *\n * @type {Object}\n */\n\nconst Changes = {}\n\n/**\n * Mix in the changes that pass through to their at-range equivalents because\n * they don't have any effect on the selection.\n */\n\nconst PROXY_TRANSFORMS = [\n  'deleteBackward',\n  'deleteCharBackward',\n  'deleteLineBackward',\n  'deleteWordBackward',\n  'deleteForward',\n  'deleteCharForward',\n  'deleteWordForward',\n  'deleteLineForward',\n  'setBlocks',\n  'setInlines',\n  'splitInline',\n  'unwrapBlock',\n  'unwrapInline',\n  'wrapBlock',\n  'wrapInline',\n]\n\nPROXY_TRANSFORMS.forEach(method => {\n  Changes[method] = (change, ...args) => {\n    const { value } = change\n    const { selection } = value\n    const methodAtRange = `${method}AtRange`\n    change[methodAtRange](selection, ...args)\n  }\n})\n\nChanges.setBlock = (...args) => {\n  logger.deprecate(\n    'slate@0.33.0',\n    'The `setBlock` method of Slate changes has been renamed to `setBlocks`.'\n  )\n  Changes.setBlocks(...args)\n}\n\nChanges.setInline = (...args) => {\n  logger.deprecate(\n    'slate@0.33.0',\n    'The `setInline` method of Slate changes has been renamed to `setInlines`.'\n  )\n  Changes.setInlines(...args)\n}\n\n/**\n * Add a `mark` to the characters in the current selection.\n *\n * @param {Change} change\n * @param {Mark} mark\n */\n\nChanges.addMark = (change, mark) => {\n  mark = Mark.create(mark)\n  const { value } = change\n  const { document, selection } = value\n\n  if (selection.isExpanded) {\n    change.addMarkAtRange(selection, mark)\n  } else if (selection.marks) {\n    const marks = selection.marks.add(mark)\n    const sel = selection.set('marks', marks)\n    change.select(sel)\n  } else {\n    const marks = document.getActiveMarksAtRange(selection).add(mark)\n    const sel = selection.set('marks', marks)\n    change.select(sel)\n  }\n}\n\n/**\n * Add a list of `marks` to the characters in the current selection.\n *\n * @param {Change} change\n * @param {Mark} mark\n */\n\nChanges.addMarks = (change, marks) => {\n  marks.forEach(mark => change.addMark(mark))\n}\n\n/**\n * Delete at the current selection.\n *\n * @param {Change} change\n */\n\nChanges.delete = change => {\n  const { value } = change\n  const { selection } = value\n  change.deleteAtRange(selection)\n\n  // Ensure that the selection is collapsed to the start, because in certain\n  // cases when deleting across inline nodes, when splitting the inline node the\n  // end point of the selection will end up after the split point.\n  change.collapseToStart()\n}\n\n/**\n * Insert a `block` at the current selection.\n *\n * @param {Change} change\n * @param {String|Object|Block} block\n */\n\nChanges.insertBlock = (change, block) => {\n  block = Block.create(block)\n  const { value } = change\n  const { selection } = value\n  change.insertBlockAtRange(selection, block)\n\n  // If the node was successfully inserted, update the selection.\n  const node = change.value.document.getNode(block.key)\n  if (node) change.collapseToEndOf(node)\n}\n\n/**\n * Insert a `fragment` at the current selection.\n *\n * @param {Change} change\n * @param {Document} fragment\n */\n\nChanges.insertFragment = (change, fragment) => {\n  if (!fragment.nodes.size) return\n\n  let { value } = change\n  let { document, selection } = value\n  const { startText, endText, startInline } = value\n  const lastText = fragment.getLastText()\n  const lastInline = fragment.getClosestInline(lastText.key)\n  const keys = document.getTexts().map(text => text.key)\n  const isAppending =\n    !startInline ||\n    selection.hasEdgeAtStartOf(startText) ||\n    selection.hasEdgeAtEndOf(endText)\n\n  change.insertFragmentAtRange(selection, fragment)\n  value = change.value\n  document = value.document\n\n  const newTexts = document.getTexts().filter(n => !keys.includes(n.key))\n  const newText = isAppending ? newTexts.last() : newTexts.takeLast(2).first()\n\n  if (newText && lastInline) {\n    change.select(selection.collapseToEndOf(newText))\n  } else if (newText) {\n    change.select(\n      selection.collapseToStartOf(newText).move(lastText.text.length)\n    )\n  } else {\n    change.select(selection.collapseToStart().move(lastText.text.length))\n  }\n}\n\n/**\n * Insert an `inline` at the current selection.\n *\n * @param {Change} change\n * @param {String|Object|Inline} inline\n */\n\nChanges.insertInline = (change, inline) => {\n  inline = Inline.create(inline)\n  const { value } = change\n  const { selection } = value\n  change.insertInlineAtRange(selection, inline)\n\n  // If the node was successfully inserted, update the selection.\n  const node = change.value.document.getNode(inline.key)\n  if (node) change.collapseToEndOf(node)\n}\n\n/**\n * Insert a string of `text` with optional `marks` at the current selection.\n *\n * @param {Change} change\n * @param {String} text\n * @param {Set<Mark>} marks (optional)\n */\n\nChanges.insertText = (change, text, marks) => {\n  const { value } = change\n  const { document, selection } = value\n  marks = marks || selection.marks || document.getInsertMarksAtRange(selection)\n  change.insertTextAtRange(selection, text, marks)\n\n  // If the text was successfully inserted, and the selection had marks on it,\n  // unset the selection's marks.\n  if (selection.marks && document != change.value.document) {\n    change.select({ marks: null })\n  }\n}\n\n/**\n * Split the block node at the current selection, to optional `depth`.\n *\n * @param {Change} change\n * @param {Number} depth (optional)\n */\n\nChanges.splitBlock = (change, depth = 1) => {\n  const { value } = change\n  const { selection } = value\n  change.splitBlockAtRange(selection, depth).collapseToEnd()\n}\n\n/**\n * Remove a `mark` from the characters in the current selection.\n *\n * @param {Change} change\n * @param {Mark} mark\n */\n\nChanges.removeMark = (change, mark) => {\n  mark = Mark.create(mark)\n  const { value } = change\n  const { document, selection } = value\n\n  if (selection.isExpanded) {\n    change.removeMarkAtRange(selection, mark)\n  } else if (selection.marks) {\n    const marks = selection.marks.remove(mark)\n    const sel = selection.set('marks', marks)\n    change.select(sel)\n  } else {\n    const marks = document.getActiveMarksAtRange(selection).remove(mark)\n    const sel = selection.set('marks', marks)\n    change.select(sel)\n  }\n}\n\n/**\n * Add or remove a `mark` from the characters in the current selection,\n * depending on whether it's already there.\n *\n * @param {Change} change\n * @param {Mark} mark\n */\n\nChanges.toggleMark = (change, mark) => {\n  mark = Mark.create(mark)\n  const { value } = change\n  const exists = value.activeMarks.has(mark)\n\n  if (exists) {\n    change.removeMark(mark)\n  } else {\n    change.addMark(mark)\n  }\n}\n\n/**\n * Wrap the current selection with prefix/suffix.\n *\n * @param {Change} change\n * @param {String} prefix\n * @param {String} suffix\n */\n\nChanges.wrapText = (change, prefix, suffix = prefix) => {\n  const { value } = change\n  const { selection } = value\n  change.wrapTextAtRange(selection, prefix, suffix)\n\n  // If the selection was collapsed, it will have moved the start offset too.\n  if (selection.isCollapsed) {\n    change.moveStart(0 - prefix.length)\n  }\n\n  // Adding the suffix will have pushed the end of the selection further on, so\n  // we need to move it back to account for this.\n  change.moveEnd(0 - suffix.length)\n\n  // There's a chance that the selection points moved \"through\" each other,\n  // resulting in a now-incorrect selection direction.\n  if (selection.isForward != change.value.selection.isForward) {\n    change.flip()\n  }\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Changes\n","import { reverse } from 'esrever'\n\n/**\n * Surrogate pair start and end points.\n *\n * @type {Number}\n */\n\nconst SURROGATE_START = 0xd800\nconst SURROGATE_END = 0xdfff\n\n/**\n * A regex to match space characters.\n *\n * @type {RegExp}\n */\n\nconst SPACE = /\\s/\n\n/**\n * A regex to match chameleon characters, that count as word characters as long\n * as they are inside of a word.\n *\n * @type {RegExp}\n */\n\nconst CHAMELEON = /['\\u2018\\u2019]/\n\n/**\n * A regex that matches punctuation.\n *\n * @type {RegExp}\n */\n\nconst PUNCTUATION = /[\\u0021-\\u0023\\u0025-\\u002A\\u002C-\\u002F\\u003A\\u003B\\u003F\\u0040\\u005B-\\u005D\\u005F\\u007B\\u007D\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E3B\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n\n/**\n * Is a character `code` in a surrogate character.\n *\n * @param {Number} code\n * @return {Boolean}\n */\n\nfunction isSurrogate(code) {\n  return SURROGATE_START <= code && code <= SURROGATE_END\n}\n\n/**\n * Is a character a word character? Needs the `remaining` characters too.\n *\n * @param {String} char\n * @param {String|Void} remaining\n * @return {Boolean}\n */\n\nfunction isWord(char, remaining) {\n  if (SPACE.test(char)) return false\n\n  // If it's a chameleon character, recurse to see if the next one is or not.\n  if (CHAMELEON.test(char)) {\n    let next = remaining.charAt(0)\n    const length = getCharLength(next)\n    next = remaining.slice(0, length)\n    const rest = remaining.slice(length)\n    if (isWord(next, rest)) return true\n  }\n\n  if (PUNCTUATION.test(char)) return false\n  return true\n}\n\n/**\n * Get the length of a `character`.\n *\n * @param {String} char\n * @return {Number}\n */\n\nfunction getCharLength(char) {\n  return isSurrogate(char.charCodeAt(0)) ? 2 : 1\n}\n\n/**\n * Get the offset to the end of the first character in `text`.\n *\n * @param {String} text\n * @return {Number}\n */\n\nfunction getCharOffset(text) {\n  const char = text.charAt(0)\n  return getCharLength(char)\n}\n\n/**\n * Get the offset to the end of the character before an `offset` in `text`.\n *\n * @param {String} text\n * @param {Number} offset\n * @return {Number}\n */\n\nfunction getCharOffsetBackward(text, offset) {\n  text = text.slice(0, offset)\n  text = reverse(text)\n  return getCharOffset(text)\n}\n\n/**\n * Get the offset to the end of the character after an `offset` in `text`.\n *\n * @param {String} text\n * @param {Number} offset\n * @return {Number}\n */\n\nfunction getCharOffsetForward(text, offset) {\n  text = text.slice(offset)\n  return getCharOffset(text)\n}\n\n/**\n * Get the offset to the end of the first word in `text`.\n *\n * @param {String} text\n * @return {Number}\n */\n\nfunction getWordOffset(text) {\n  let length = 0\n  let i = 0\n  let started = false\n  let char\n\n  while ((char = text.charAt(i))) {\n    const l = getCharLength(char)\n    char = text.slice(i, i + l)\n    const rest = text.slice(i + l)\n\n    if (isWord(char, rest)) {\n      started = true\n      length += l\n    } else if (!started) {\n      length += l\n    } else {\n      break\n    }\n\n    i += l\n  }\n\n  return length\n}\n\n/**\n * Get the offset to the end of the word before an `offset` in `text`.\n *\n * @param {String} text\n * @param {Number} offset\n * @return {Number}\n */\n\nfunction getWordOffsetBackward(text, offset) {\n  text = text.slice(0, offset)\n  text = reverse(text)\n  const o = getWordOffset(text)\n  return o\n}\n\n/**\n * Get the offset to the end of the word after an `offset` in `text`.\n *\n * @param {String} text\n * @param {Number} offset\n * @return {Number}\n */\n\nfunction getWordOffsetForward(text, offset) {\n  text = text.slice(offset)\n  const o = getWordOffset(text)\n  return o\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default {\n  getCharOffsetForward,\n  getCharOffsetBackward,\n  getWordOffsetBackward,\n  getWordOffsetForward,\n}\n","import { List } from 'immutable'\nimport logger from 'slate-dev-logger'\n\nimport Block from '../models/block'\nimport Inline from '../models/inline'\nimport Mark from '../models/mark'\nimport Node from '../models/node'\nimport String from '../utils/string'\n\n/**\n * Changes.\n *\n * @type {Object}\n */\n\nconst Changes = {}\n\n/**\n * Add a new `mark` to the characters at `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Mixed} mark\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.addMarkAtRange = (change, range, mark, options = {}) => {\n  if (range.isCollapsed) return\n\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  const { document } = value\n  const { startKey, startOffset, endKey, endOffset } = range\n  const texts = document.getTextsAtRange(range)\n\n  texts.forEach(node => {\n    const { key } = node\n    let index = 0\n    let length = node.text.length\n\n    if (key == startKey) index = startOffset\n    if (key == endKey) length = endOffset\n    if (key == startKey && key == endKey) length = endOffset - startOffset\n\n    change.addMarkByKey(key, index, length, mark, { normalize })\n  })\n}\n\n/**\n * Add a list of `marks` to the characters at `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Array<Mixed>} mark\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.addMarksAtRange = (change, range, marks, options = {}) => {\n  marks.forEach(mark => change.addMarkAtRange(range, mark, options))\n}\n\n/**\n * Delete everything in a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.deleteAtRange = (change, range, options = {}) => {\n  if (range.isCollapsed) return\n\n  // Snapshot the selection, which creates an extra undo save point, so that\n  // when you undo a delete, the expanded selection will be retained.\n  change.snapshotSelection()\n\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  let { startKey, startOffset, endKey, endOffset } = range\n  let { document } = value\n  let isStartVoid = document.hasVoidParent(startKey)\n  let isEndVoid = document.hasVoidParent(endKey)\n  let startBlock = document.getClosestBlock(startKey)\n  let endBlock = document.getClosestBlock(endKey)\n\n  // Check if we have a \"hanging\" selection case where the even though the\n  // selection extends into the start of the end node, we actually want to\n  // ignore that for UX reasons.\n  const isHanging =\n    startOffset == 0 &&\n    endOffset == 0 &&\n    isStartVoid == false &&\n    startKey == startBlock.getFirstText().key &&\n    endKey == endBlock.getFirstText().key\n\n  // If it's a hanging selection, nudge it back to end in the previous text.\n  if (isHanging && isEndVoid) {\n    const prevText = document.getPreviousText(endKey)\n    endKey = prevText.key\n    endOffset = prevText.text.length\n    isEndVoid = document.hasVoidParent(endKey)\n  }\n\n  // If the start node is inside a void node, remove the void node and update\n  // the starting point to be right after it, continuously until the start point\n  // is not a void, or until the entire range is handled.\n  while (isStartVoid) {\n    const startVoid = document.getClosestVoid(startKey)\n    const nextText = document.getNextText(startKey)\n    change.removeNodeByKey(startVoid.key, { normalize: false })\n\n    // If the start and end keys are the same, we're done.\n    if (startKey == endKey) return\n\n    // If there is no next text node, we're done.\n    if (!nextText) return\n\n    // Continue...\n    document = change.value.document\n    startKey = nextText.key\n    startOffset = 0\n    isStartVoid = document.hasVoidParent(startKey)\n  }\n\n  // If the end node is inside a void node, do the same thing but backwards. But\n  // we don't need any aborting checks because if we've gotten this far there\n  // must be a non-void node that will exit the loop.\n  while (isEndVoid) {\n    const endVoid = document.getClosestVoid(endKey)\n    const prevText = document.getPreviousText(endKey)\n    change.removeNodeByKey(endVoid.key, { normalize: false })\n\n    // Continue...\n    document = change.value.document\n    endKey = prevText.key\n    endOffset = prevText.text.length\n    isEndVoid = document.hasVoidParent(endKey)\n  }\n\n  // If the start and end key are the same, and it was a hanging selection, we\n  // can just remove the entire block.\n  if (startKey == endKey && isHanging) {\n    change.removeNodeByKey(startBlock.key, { normalize })\n    return\n  } else if (startKey == endKey) {\n    // Otherwise, if it wasn't hanging, we're inside a single text node, so we can\n    // simply remove the text in the range.\n    const index = startOffset\n    const length = endOffset - startOffset\n    change.removeTextByKey(startKey, index, length, { normalize })\n    return\n  } else {\n    // Otherwise, we need to recursively remove text and nodes inside the start\n    // block after the start offset and inside the end block before the end\n    // offset. Then remove any blocks that are in between the start and end\n    // blocks. Then finally merge the start and end nodes.\n    startBlock = document.getClosestBlock(startKey)\n    endBlock = document.getClosestBlock(endKey)\n    const startText = document.getNode(startKey)\n    const endText = document.getNode(endKey)\n    const startLength = startText.text.length - startOffset\n    const endLength = endOffset\n\n    const ancestor = document.getCommonAncestor(startKey, endKey)\n    const startChild = ancestor.getFurthestAncestor(startKey)\n    const endChild = ancestor.getFurthestAncestor(endKey)\n\n    const startParent = document.getParent(startBlock.key)\n    const startParentIndex = startParent.nodes.indexOf(startBlock)\n    const endParentIndex = startParent.nodes.indexOf(endBlock)\n\n    let child\n\n    // Iterate through all of the nodes in the tree after the start text node\n    // but inside the end child, and remove them.\n    child = startText\n\n    while (child.key != startChild.key) {\n      const parent = document.getParent(child.key)\n      const index = parent.nodes.indexOf(child)\n      const afters = parent.nodes.slice(index + 1)\n\n      afters.reverse().forEach(node => {\n        change.removeNodeByKey(node.key, { normalize: false })\n      })\n\n      child = parent\n    }\n\n    // Remove all of the middle children.\n    const startChildIndex = ancestor.nodes.indexOf(startChild)\n    const endChildIndex = ancestor.nodes.indexOf(endChild)\n    const middles = ancestor.nodes.slice(startChildIndex + 1, endChildIndex)\n\n    middles.reverse().forEach(node => {\n      change.removeNodeByKey(node.key, { normalize: false })\n    })\n\n    // Remove the nodes before the end text node in the tree.\n    child = endText\n\n    while (child.key != endChild.key) {\n      const parent = document.getParent(child.key)\n      const index = parent.nodes.indexOf(child)\n      const befores = parent.nodes.slice(0, index)\n\n      befores.reverse().forEach(node => {\n        change.removeNodeByKey(node.key, { normalize: false })\n      })\n\n      child = parent\n    }\n\n    // Remove any overlapping text content from the leaf text nodes.\n    if (startLength != 0) {\n      change.removeTextByKey(startKey, startOffset, startLength, {\n        normalize: false,\n      })\n    }\n\n    if (endLength != 0) {\n      change.removeTextByKey(endKey, 0, endOffset, { normalize: false })\n    }\n\n    // If the start and end blocks aren't the same, move and merge the end block\n    // into the start block.\n    if (startBlock.key != endBlock.key) {\n      document = change.value.document\n      const lonely = document.getFurthestOnlyChildAncestor(endBlock.key)\n\n      // Move the end block to be right after the start block.\n      if (endParentIndex != startParentIndex + 1) {\n        change.moveNodeByKey(\n          endBlock.key,\n          startParent.key,\n          startParentIndex + 1,\n          { normalize: false }\n        )\n      }\n\n      // If the selection is hanging, just remove the start block, otherwise\n      // merge the end block into it.\n      if (isHanging) {\n        change.removeNodeByKey(startBlock.key, { normalize: false })\n      } else {\n        change.mergeNodeByKey(endBlock.key, { normalize: false })\n      }\n\n      // If nested empty blocks are left over above the end block, remove them.\n      if (lonely) {\n        change.removeNodeByKey(lonely.key, { normalize: false })\n      }\n    }\n\n    // If we should normalize, do it now after everything.\n    if (normalize) {\n      change.normalizeNodeByKey(ancestor.key)\n    }\n  }\n}\n\n/**\n * Delete backward until the character boundary at a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.deleteCharBackwardAtRange = (change, range, options) => {\n  const { value } = change\n  const { document } = value\n  const { startKey, startOffset } = range\n  const startBlock = document.getClosestBlock(startKey)\n  const offset = startBlock.getOffset(startKey)\n  const o = offset + startOffset\n  const { text } = startBlock\n  const n = String.getCharOffsetBackward(text, o)\n  change.deleteBackwardAtRange(range, n, options)\n}\n\n/**\n * Delete backward until the line boundary at a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.deleteLineBackwardAtRange = (change, range, options) => {\n  const { value } = change\n  const { document } = value\n  const { startKey, startOffset } = range\n  const startBlock = document.getClosestBlock(startKey)\n  const offset = startBlock.getOffset(startKey)\n  const o = offset + startOffset\n  change.deleteBackwardAtRange(range, o, options)\n}\n\n/**\n * Delete backward until the word boundary at a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.deleteWordBackwardAtRange = (change, range, options) => {\n  const { value } = change\n  const { document } = value\n  const { startKey, startOffset } = range\n  const startBlock = document.getClosestBlock(startKey)\n  const offset = startBlock.getOffset(startKey)\n  const o = offset + startOffset\n  const { text } = startBlock\n  const n = String.getWordOffsetBackward(text, o)\n  change.deleteBackwardAtRange(range, n, options)\n}\n\n/**\n * Delete backward `n` characters at a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Number} n (optional)\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.deleteBackwardAtRange = (change, range, n = 1, options = {}) => {\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  const { document } = value\n  const { startKey, focusOffset } = range\n\n  // If the range is expanded, perform a regular delete instead.\n  if (range.isExpanded) {\n    change.deleteAtRange(range, { normalize })\n    return\n  }\n\n  const voidParent = document.getClosestVoid(startKey)\n\n  // If there is a void parent, delete it.\n  if (voidParent) {\n    change.removeNodeByKey(voidParent.key, { normalize })\n    return\n  }\n\n  const block = document.getClosestBlock(startKey)\n\n  // If the closest is not void, but empty, remove it\n  if (block && block.isEmpty && document.nodes.size !== 1) {\n    change.removeNodeByKey(block.key, { normalize })\n    return\n  }\n\n  // If the range is at the start of the document, abort.\n  if (range.isAtStartOf(document)) {\n    return\n  }\n\n  // If the range is at the start of the text node, we need to figure out what\n  // is behind it to know how to delete...\n  const text = document.getDescendant(startKey)\n  if (range.isAtStartOf(text)) {\n    const prev = document.getPreviousText(text.key)\n    const prevBlock = document.getClosestBlock(prev.key)\n    const prevVoid = document.getClosestVoid(prev.key)\n\n    // If the previous text node has a void parent, remove it.\n    if (prevVoid) {\n      change.removeNodeByKey(prevVoid.key, { normalize })\n      return\n    }\n\n    // If we're deleting by one character and the previous text node is not\n    // inside the current block, we need to merge the two blocks together.\n    if (n == 1 && prevBlock != block) {\n      range = range.merge({\n        anchorKey: prev.key,\n        anchorOffset: prev.text.length,\n      })\n\n      change.deleteAtRange(range, { normalize })\n      return\n    }\n  }\n\n  // If the focus offset is farther than the number of characters to delete,\n  // just remove the characters backwards inside the current node.\n  if (n < focusOffset) {\n    range = range.merge({\n      focusOffset: focusOffset - n,\n      isBackward: true,\n    })\n\n    change.deleteAtRange(range, { normalize })\n    return\n  }\n\n  // Otherwise, we need to see how many nodes backwards to go.\n  let node = text\n  let offset = 0\n  let traversed = focusOffset\n\n  while (n > traversed) {\n    node = document.getPreviousText(node.key)\n    const next = traversed + node.text.length\n    if (n <= next) {\n      offset = next - n\n      break\n    } else {\n      traversed = next\n    }\n  }\n\n  range = range.merge({\n    focusKey: node.key,\n    focusOffset: offset,\n    isBackward: true,\n  })\n\n  change.deleteAtRange(range, { normalize })\n}\n\n/**\n * Delete forward until the character boundary at a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.deleteCharForwardAtRange = (change, range, options) => {\n  const { value } = change\n  const { document } = value\n  const { startKey, startOffset } = range\n  const startBlock = document.getClosestBlock(startKey)\n  const offset = startBlock.getOffset(startKey)\n  const o = offset + startOffset\n  const { text } = startBlock\n  const n = String.getCharOffsetForward(text, o)\n  change.deleteForwardAtRange(range, n, options)\n}\n\n/**\n * Delete forward until the line boundary at a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.deleteLineForwardAtRange = (change, range, options) => {\n  const { value } = change\n  const { document } = value\n  const { startKey, startOffset } = range\n  const startBlock = document.getClosestBlock(startKey)\n  const offset = startBlock.getOffset(startKey)\n  const o = offset + startOffset\n  change.deleteForwardAtRange(range, o, options)\n}\n\n/**\n * Delete forward until the word boundary at a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.deleteWordForwardAtRange = (change, range, options) => {\n  const { value } = change\n  const { document } = value\n  const { startKey, startOffset } = range\n  const startBlock = document.getClosestBlock(startKey)\n  const offset = startBlock.getOffset(startKey)\n  const o = offset + startOffset\n  const { text } = startBlock\n  const n = String.getWordOffsetForward(text, o)\n  change.deleteForwardAtRange(range, n, options)\n}\n\n/**\n * Delete forward `n` characters at a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Number} n (optional)\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.deleteForwardAtRange = (change, range, n = 1, options = {}) => {\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  const { document } = value\n  const { startKey, focusOffset } = range\n\n  // If the range is expanded, perform a regular delete instead.\n  if (range.isExpanded) {\n    change.deleteAtRange(range, { normalize })\n    return\n  }\n\n  const voidParent = document.getClosestVoid(startKey)\n\n  // If the node has a void parent, delete it.\n  if (voidParent) {\n    change.removeNodeByKey(voidParent.key, { normalize })\n    return\n  }\n\n  const block = document.getClosestBlock(startKey)\n\n  // If the closest is not void, but empty, remove it\n  if (block && block.isEmpty && document.nodes.size !== 1) {\n    const nextBlock = document.getNextBlock(block.key)\n    change.removeNodeByKey(block.key, { normalize })\n    if (nextBlock && nextBlock.key) {\n      change.moveToStartOf(nextBlock)\n    }\n    return\n  }\n\n  // If the range is at the start of the document, abort.\n  if (range.isAtEndOf(document)) {\n    return\n  }\n\n  // If the range is at the start of the text node, we need to figure out what\n  // is behind it to know how to delete...\n  const text = document.getDescendant(startKey)\n  if (range.isAtEndOf(text)) {\n    const next = document.getNextText(text.key)\n    const nextBlock = document.getClosestBlock(next.key)\n    const nextVoid = document.getClosestVoid(next.key)\n\n    // If the next text node has a void parent, remove it.\n    if (nextVoid) {\n      change.removeNodeByKey(nextVoid.key, { normalize })\n      return\n    }\n\n    // If we're deleting by one character and the previous text node is not\n    // inside the current block, we need to merge the two blocks together.\n    if (n == 1 && nextBlock != block) {\n      range = range.merge({\n        focusKey: next.key,\n        focusOffset: 0,\n      })\n\n      change.deleteAtRange(range, { normalize })\n      return\n    }\n  }\n\n  // If the remaining characters to the end of the node is greater than or equal\n  // to the number of characters to delete, just remove the characters forwards\n  // inside the current node.\n  if (n <= text.text.length - focusOffset) {\n    range = range.merge({\n      focusOffset: focusOffset + n,\n    })\n\n    change.deleteAtRange(range, { normalize })\n    return\n  }\n\n  // Otherwise, we need to see how many nodes forwards to go.\n  let node = text\n  let offset = focusOffset\n  let traversed = text.text.length - focusOffset\n\n  while (n > traversed) {\n    node = document.getNextText(node.key)\n    const next = traversed + node.text.length\n    if (n <= next) {\n      offset = n - traversed\n      break\n    } else {\n      traversed = next\n    }\n  }\n\n  // If the focus node is inside a void, go up until right before it.\n  if (document.hasVoidParent(node.key)) {\n    const parent = document.getClosestVoid(node.key)\n    node = document.getPreviousText(parent.key)\n    offset = node.text.length\n  }\n\n  range = range.merge({\n    focusKey: node.key,\n    focusOffset: offset,\n  })\n\n  change.deleteAtRange(range, { normalize })\n}\n\n/**\n * Insert a `block` node at `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Block|String|Object} block\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.insertBlockAtRange = (change, range, block, options = {}) => {\n  block = Block.create(block)\n  const normalize = change.getFlag('normalize', options)\n\n  if (range.isExpanded) {\n    change.deleteAtRange(range)\n    range = range.collapseToStart()\n  }\n\n  const { value } = change\n  const { document } = value\n  const { startKey, startOffset } = range\n  const startBlock = document.getClosestBlock(startKey)\n  const parent = document.getParent(startBlock.key)\n  const index = parent.nodes.indexOf(startBlock)\n\n  if (startBlock.isVoid) {\n    const extra = range.isAtEndOf(startBlock) ? 1 : 0\n    change.insertNodeByKey(parent.key, index + extra, block, { normalize })\n  } else if (startBlock.isEmpty) {\n    change.insertNodeByKey(parent.key, index + 1, block, { normalize })\n  } else if (range.isAtStartOf(startBlock)) {\n    change.insertNodeByKey(parent.key, index, block, { normalize })\n  } else if (range.isAtEndOf(startBlock)) {\n    change.insertNodeByKey(parent.key, index + 1, block, { normalize })\n  } else {\n    change.splitDescendantsByKey(startBlock.key, startKey, startOffset, {\n      normalize: false,\n    })\n    change.insertNodeByKey(parent.key, index + 1, block, { normalize })\n  }\n\n  if (normalize) {\n    change.normalizeNodeByKey(parent.key)\n  }\n}\n\n/**\n * Insert a `fragment` at a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Document} fragment\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.insertFragmentAtRange = (change, range, fragment, options = {}) => {\n  const normalize = change.getFlag('normalize', options)\n\n  // If the range is expanded, delete it first.\n  if (range.isExpanded) {\n    change.deleteAtRange(range, { normalize: false })\n    range = range.collapseToStart()\n  }\n\n  // If the fragment is empty, there's nothing to do after deleting.\n  if (!fragment.nodes.size) return\n\n  // Regenerate the keys for all of the fragments nodes, so that they're\n  // guaranteed not to collide with the existing keys in the document. Otherwise\n  // they will be rengerated automatically and we won't have an easy way to\n  // reference them.\n  fragment = fragment.mapDescendants(child => child.regenerateKey())\n\n  // Calculate a few things...\n  const { startKey, startOffset } = range\n  const { value } = change\n  let { document } = value\n  let startText = document.getDescendant(startKey)\n  let startBlock = document.getClosestBlock(startText.key)\n  let startChild = startBlock.getFurthestAncestor(startText.key)\n  const isAtStart = range.isAtStartOf(startBlock)\n  const parent = document.getParent(startBlock.key)\n  const index = parent.nodes.indexOf(startBlock)\n  const blocks = fragment.getBlocks()\n  const firstBlock = blocks.first()\n  const lastBlock = blocks.last()\n\n  // If the fragment only contains a void block, use `insertBlock` instead.\n  if (firstBlock == lastBlock && firstBlock.isVoid) {\n    change.insertBlockAtRange(range, firstBlock, options)\n    return\n  }\n\n  // If the first and last block aren't the same, we need to insert all of the\n  // nodes after the fragment's first block at the index.\n  if (firstBlock != lastBlock) {\n    const lonelyParent = fragment.getFurthest(\n      firstBlock.key,\n      p => p.nodes.size == 1\n    )\n    const lonelyChild = lonelyParent || firstBlock\n    const startIndex = parent.nodes.indexOf(startBlock)\n    fragment = fragment.removeDescendant(lonelyChild.key)\n\n    fragment.nodes.forEach((node, i) => {\n      const newIndex = startIndex + i + 1\n      change.insertNodeByKey(parent.key, newIndex, node, { normalize: false })\n    })\n  }\n\n  // Check if we need to split the node.\n  if (startOffset != 0) {\n    change.splitDescendantsByKey(startChild.key, startKey, startOffset, {\n      normalize: false,\n    })\n  }\n\n  // Update our variables with the new value.\n  document = change.value.document\n  startText = document.getDescendant(startKey)\n  startBlock = document.getClosestBlock(startKey)\n  startChild = startBlock.getFurthestAncestor(startText.key)\n\n  // If the first and last block aren't the same, we need to move any of the\n  // starting block's children after the split into the last block of the\n  // fragment, which has already been inserted.\n  if (firstBlock != lastBlock) {\n    const nextChild = isAtStart\n      ? startChild\n      : startBlock.getNextSibling(startChild.key)\n    const nextNodes = nextChild\n      ? startBlock.nodes.skipUntil(n => n.key == nextChild.key)\n      : List()\n    const lastIndex = lastBlock.nodes.size\n\n    nextNodes.forEach((node, i) => {\n      const newIndex = lastIndex + i\n      change.moveNodeByKey(node.key, lastBlock.key, newIndex, {\n        normalize: false,\n      })\n    })\n  }\n\n  // If the starting block is empty, we replace it entirely with the first block\n  // of the fragment, since this leads to a more expected behavior for the user.\n  if (startBlock.isEmpty) {\n    change.removeNodeByKey(startBlock.key, { normalize: false })\n    change.insertNodeByKey(parent.key, index, firstBlock, { normalize: false })\n  } else {\n    // Otherwise, we maintain the starting block, and insert all of the first\n    // block's inline nodes into it at the split point.\n    const inlineChild = startBlock.getFurthestAncestor(startText.key)\n    const inlineIndex = startBlock.nodes.indexOf(inlineChild)\n\n    firstBlock.nodes.forEach((inline, i) => {\n      const o = startOffset == 0 ? 0 : 1\n      const newIndex = inlineIndex + i + o\n      change.insertNodeByKey(startBlock.key, newIndex, inline, {\n        normalize: false,\n      })\n    })\n  }\n\n  // Normalize if requested.\n  if (normalize) {\n    change.normalizeNodeByKey(parent.key)\n  }\n}\n\n/**\n * Insert an `inline` node at `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Inline|String|Object} inline\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.insertInlineAtRange = (change, range, inline, options = {}) => {\n  const normalize = change.getFlag('normalize', options)\n  inline = Inline.create(inline)\n\n  if (range.isExpanded) {\n    change.deleteAtRange(range, { normalize: false })\n    range = range.collapseToStart()\n  }\n\n  const { value } = change\n  const { document } = value\n  const { startKey, startOffset } = range\n  const parent = document.getParent(startKey)\n  const startText = document.assertDescendant(startKey)\n  const index = parent.nodes.indexOf(startText)\n\n  if (parent.isVoid) return\n\n  change.splitNodeByKey(startKey, startOffset, { normalize: false })\n  change.insertNodeByKey(parent.key, index + 1, inline, { normalize: false })\n\n  if (normalize) {\n    change.normalizeNodeByKey(parent.key)\n  }\n}\n\n/**\n * Insert `text` at a `range`, with optional `marks`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {String} text\n * @param {Set<Mark>} marks (optional)\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.insertTextAtRange = (change, range, text, marks, options = {}) => {\n  let { normalize } = options\n  const { value } = change\n  const { document } = value\n  const { startKey, startOffset } = range\n  let key = startKey\n  let offset = startOffset\n  const parent = document.getParent(startKey)\n\n  if (parent.isVoid) return\n\n  if (range.isExpanded) {\n    change.deleteAtRange(range, { normalize: false })\n\n    // Update range start after delete\n    if (change.value.startKey !== key) {\n      key = change.value.startKey\n      offset = change.value.startOffset\n    }\n  }\n\n  // PERF: Unless specified, don't normalize if only inserting text.\n  if (normalize !== undefined) {\n    normalize = range.isExpanded\n  }\n  change.insertTextByKey(key, offset, text, marks, { normalize: false })\n\n  if (normalize) {\n    // normalize in the narrowest existing block that originally contains startKey and endKey\n    const commonAncestor = document.getCommonAncestor(startKey, range.endKey)\n    const ancestors = document\n      .getAncestors(commonAncestor.key)\n      .push(commonAncestor)\n    const normalizeAncestor = ancestors.findLast(n =>\n      change.value.document.getDescendant(n.key)\n    )\n    change.normalizeNodeByKey(normalizeAncestor.key)\n  }\n}\n\n/**\n * Remove an existing `mark` to the characters at `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Mark|String} mark (optional)\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.removeMarkAtRange = (change, range, mark, options = {}) => {\n  if (range.isCollapsed) return\n\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  const { document } = value\n  const texts = document.getTextsAtRange(range)\n  const { startKey, startOffset, endKey, endOffset } = range\n\n  texts.forEach(node => {\n    const { key } = node\n    let index = 0\n    let length = node.text.length\n\n    if (key == startKey) index = startOffset\n    if (key == endKey) length = endOffset\n    if (key == startKey && key == endKey) length = endOffset - startOffset\n\n    change.removeMarkByKey(key, index, length, mark, { normalize })\n  })\n}\n\n/**\n * Set the `properties` of block nodes in a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Object|String} properties\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.setBlocksAtRange = (change, range, properties, options = {}) => {\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  const { document } = value\n  const blocks = document.getBlocksAtRange(range)\n\n  const { startKey, startOffset, endKey, endOffset, isCollapsed } = range\n  const isStartVoid = document.hasVoidParent(startKey)\n  const startBlock = document.getClosestBlock(startKey)\n  const endBlock = document.getClosestBlock(endKey)\n\n  // Check if we have a \"hanging\" selection case where the even though the\n  // selection extends into the start of the end node, we actually want to\n  // ignore that for UX reasons.\n  const isHanging =\n    isCollapsed == false &&\n    startOffset == 0 &&\n    endOffset == 0 &&\n    isStartVoid == false &&\n    startKey == startBlock.getFirstText().key &&\n    endKey == endBlock.getFirstText().key\n\n  // If it's a hanging selection, ignore the last block.\n  const sets = isHanging ? blocks.slice(0, -1) : blocks\n\n  sets.forEach(block => {\n    change.setNodeByKey(block.key, properties, { normalize })\n  })\n}\n\nChanges.setBlockAtRange = (...args) => {\n  logger.deprecate(\n    'slate@0.33.0',\n    'The `setBlockAtRange` method of Slate changes has been renamed to `setBlocksAtRange`.'\n  )\n  Changes.setBlocksAtRange(...args)\n}\n\n/**\n * Set the `properties` of inline nodes in a `range`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Object|String} properties\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.setInlinesAtRange = (change, range, properties, options = {}) => {\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  const { document } = value\n  const inlines = document.getInlinesAtRange(range)\n\n  inlines.forEach(inline => {\n    change.setNodeByKey(inline.key, properties, { normalize })\n  })\n}\n\nChanges.setInlineAtRange = (...args) => {\n  logger.deprecate(\n    'slate@0.33.0',\n    'The `setInlineAtRange` method of Slate changes has been renamed to `setInlinesAtRange`.'\n  )\n  Changes.setInlinesAtRange(...args)\n}\n\n/**\n * Split the block nodes at a `range`, to optional `height`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Number} height (optional)\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.splitBlockAtRange = (change, range, height = 1, options = {}) => {\n  const normalize = change.getFlag('normalize', options)\n\n  if (range.isExpanded) {\n    change.deleteAtRange(range, { normalize })\n    range = range.collapseToStart()\n  }\n\n  const { startKey, startOffset } = range\n  const { value } = change\n  const { document } = value\n  let node = document.assertDescendant(startKey)\n  let parent = document.getClosestBlock(node.key)\n  let h = 0\n\n  while (parent && parent.object == 'block' && h < height) {\n    node = parent\n    parent = document.getClosestBlock(parent.key)\n    h++\n  }\n\n  change.splitDescendantsByKey(node.key, startKey, startOffset, { normalize })\n}\n\n/**\n * Split the inline nodes at a `range`, to optional `height`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Number} height (optional)\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.splitInlineAtRange = (\n  change,\n  range,\n  height = Infinity,\n  options = {}\n) => {\n  const normalize = change.getFlag('normalize', options)\n\n  if (range.isExpanded) {\n    change.deleteAtRange(range, { normalize })\n    range = range.collapseToStart()\n  }\n\n  const { startKey, startOffset } = range\n  const { value } = change\n  const { document } = value\n  let node = document.assertDescendant(startKey)\n  let parent = document.getClosestInline(node.key)\n  let h = 0\n\n  while (parent && parent.object == 'inline' && h < height) {\n    node = parent\n    parent = document.getClosestInline(parent.key)\n    h++\n  }\n\n  change.splitDescendantsByKey(node.key, startKey, startOffset, { normalize })\n}\n\n/**\n * Add or remove a `mark` from the characters at `range`, depending on whether\n * it's already there.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Mixed} mark\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.toggleMarkAtRange = (change, range, mark, options = {}) => {\n  if (range.isCollapsed) return\n\n  mark = Mark.create(mark)\n\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  const { document } = value\n  const marks = document.getActiveMarksAtRange(range)\n  const exists = marks.some(m => m.equals(mark))\n\n  if (exists) {\n    change.removeMarkAtRange(range, mark, { normalize })\n  } else {\n    change.addMarkAtRange(range, mark, { normalize })\n  }\n}\n\n/**\n * Unwrap all of the block nodes in a `range` from a block with `properties`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {String|Object} properties\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.unwrapBlockAtRange = (change, range, properties, options = {}) => {\n  properties = Node.createProperties(properties)\n\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  let { document } = value\n  const blocks = document.getBlocksAtRange(range)\n  const wrappers = blocks\n    .map(block => {\n      return document.getClosest(block.key, parent => {\n        if (parent.object != 'block') return false\n        if (properties.type != null && parent.type != properties.type)\n          return false\n        if (properties.isVoid != null && parent.isVoid != properties.isVoid)\n          return false\n        if (properties.data != null && !parent.data.isSuperset(properties.data))\n          return false\n        return true\n      })\n    })\n    .filter(exists => exists)\n    .toOrderedSet()\n    .toList()\n\n  wrappers.forEach(block => {\n    const first = block.nodes.first()\n    const last = block.nodes.last()\n    const parent = document.getParent(block.key)\n    const index = parent.nodes.indexOf(block)\n\n    const children = block.nodes.filter(child => {\n      return blocks.some(b => child == b || child.hasDescendant(b.key))\n    })\n\n    const firstMatch = children.first()\n    const lastMatch = children.last()\n\n    if (first == firstMatch && last == lastMatch) {\n      block.nodes.forEach((child, i) => {\n        change.moveNodeByKey(child.key, parent.key, index + i, {\n          normalize: false,\n        })\n      })\n\n      change.removeNodeByKey(block.key, { normalize: false })\n    } else if (last == lastMatch) {\n      block.nodes.skipUntil(n => n == firstMatch).forEach((child, i) => {\n        change.moveNodeByKey(child.key, parent.key, index + 1 + i, {\n          normalize: false,\n        })\n      })\n    } else if (first == firstMatch) {\n      block.nodes\n        .takeUntil(n => n == lastMatch)\n        .push(lastMatch)\n        .forEach((child, i) => {\n          change.moveNodeByKey(child.key, parent.key, index + i, {\n            normalize: false,\n          })\n        })\n    } else {\n      const firstText = firstMatch.getFirstText()\n      change.splitDescendantsByKey(block.key, firstText.key, 0, {\n        normalize: false,\n      })\n      document = change.value.document\n\n      children.forEach((child, i) => {\n        if (i == 0) {\n          const extra = child\n          child = document.getNextBlock(child.key)\n          change.removeNodeByKey(extra.key, { normalize: false })\n        }\n\n        change.moveNodeByKey(child.key, parent.key, index + 1 + i, {\n          normalize: false,\n        })\n      })\n    }\n  })\n\n  // TODO: optmize to only normalize the right block\n  if (normalize) {\n    change.normalizeDocument()\n  }\n}\n\n/**\n * Unwrap the inline nodes in a `range` from an inline with `properties`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {String|Object} properties\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.unwrapInlineAtRange = (change, range, properties, options = {}) => {\n  properties = Node.createProperties(properties)\n\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  const { document } = value\n  const texts = document.getTextsAtRange(range)\n  const inlines = texts\n    .map(text => {\n      return document.getClosest(text.key, parent => {\n        if (parent.object != 'inline') return false\n        if (properties.type != null && parent.type != properties.type)\n          return false\n        if (properties.isVoid != null && parent.isVoid != properties.isVoid)\n          return false\n        if (properties.data != null && !parent.data.isSuperset(properties.data))\n          return false\n        return true\n      })\n    })\n    .filter(exists => exists)\n    .toOrderedSet()\n    .toList()\n\n  inlines.forEach(inline => {\n    const parent = change.value.document.getParent(inline.key)\n    const index = parent.nodes.indexOf(inline)\n\n    inline.nodes.forEach((child, i) => {\n      change.moveNodeByKey(child.key, parent.key, index + i, {\n        normalize: false,\n      })\n    })\n  })\n\n  // TODO: optmize to only normalize the right block\n  if (normalize) {\n    change.normalizeDocument()\n  }\n}\n\n/**\n * Wrap all of the blocks in a `range` in a new `block`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Block|Object|String} block\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.wrapBlockAtRange = (change, range, block, options = {}) => {\n  block = Block.create(block)\n  block = block.set('nodes', block.nodes.clear())\n\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  const { document } = value\n\n  const blocks = document.getBlocksAtRange(range)\n  const firstblock = blocks.first()\n  const lastblock = blocks.last()\n  let parent, siblings, index\n\n  // If there is only one block in the selection then we know the parent and\n  // siblings.\n  if (blocks.length === 1) {\n    parent = document.getParent(firstblock.key)\n    siblings = blocks\n  } else {\n    // Determine closest shared parent to all blocks in selection.\n    parent = document.getClosest(firstblock.key, p1 => {\n      return !!document.getClosest(lastblock.key, p2 => p1 == p2)\n    })\n  }\n\n  // If no shared parent could be found then the parent is the document.\n  if (parent == null) parent = document\n\n  // Create a list of direct children siblings of parent that fall in the\n  // selection.\n  if (siblings == null) {\n    const indexes = parent.nodes.reduce((ind, node, i) => {\n      if (node == firstblock || node.hasDescendant(firstblock.key)) ind[0] = i\n      if (node == lastblock || node.hasDescendant(lastblock.key)) ind[1] = i\n      return ind\n    }, [])\n\n    index = indexes[0]\n    siblings = parent.nodes.slice(indexes[0], indexes[1] + 1)\n  }\n\n  // Get the index to place the new wrapped node at.\n  if (index == null) {\n    index = parent.nodes.indexOf(siblings.first())\n  }\n\n  // Inject the new block node into the parent.\n  change.insertNodeByKey(parent.key, index, block, { normalize: false })\n\n  // Move the sibling nodes into the new block node.\n  siblings.forEach((node, i) => {\n    change.moveNodeByKey(node.key, block.key, i, { normalize: false })\n  })\n\n  if (normalize) {\n    change.normalizeNodeByKey(parent.key)\n  }\n}\n\n/**\n * Wrap the text and inlines in a `range` in a new `inline`.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {Inline|Object|String} inline\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.wrapInlineAtRange = (change, range, inline, options = {}) => {\n  const { value } = change\n  let { document } = value\n  const normalize = change.getFlag('normalize', options)\n  const { startKey, startOffset, endKey, endOffset } = range\n\n  if (range.isCollapsed) {\n    // Wrapping an inline void\n    const inlineParent = document.getClosestInline(startKey)\n    if (!inlineParent.isVoid) {\n      return\n    }\n\n    return change.wrapInlineByKey(inlineParent.key, inline, options)\n  }\n\n  inline = Inline.create(inline)\n  inline = inline.set('nodes', inline.nodes.clear())\n\n  const blocks = document.getBlocksAtRange(range)\n  let startBlock = document.getClosestBlock(startKey)\n  let endBlock = document.getClosestBlock(endKey)\n  let startChild = startBlock.getFurthestAncestor(startKey)\n  let endChild = endBlock.getFurthestAncestor(endKey)\n\n  change.splitDescendantsByKey(endChild.key, endKey, endOffset, {\n    normalize: false,\n  })\n  change.splitDescendantsByKey(startChild.key, startKey, startOffset, {\n    normalize: false,\n  })\n\n  document = change.value.document\n  startBlock = document.getDescendant(startBlock.key)\n  endBlock = document.getDescendant(endBlock.key)\n  startChild = startBlock.getFurthestAncestor(startKey)\n  endChild = endBlock.getFurthestAncestor(endKey)\n  const startIndex = startBlock.nodes.indexOf(startChild)\n  const endIndex = endBlock.nodes.indexOf(endChild)\n\n  if (startBlock == endBlock) {\n    document = change.value.document\n    startBlock = document.getClosestBlock(startKey)\n    startChild = startBlock.getFurthestAncestor(startKey)\n\n    const startInner = document.getNextSibling(startChild.key)\n    const startInnerIndex = startBlock.nodes.indexOf(startInner)\n    const endInner =\n      startKey == endKey ? startInner : startBlock.getFurthestAncestor(endKey)\n    const inlines = startBlock.nodes\n      .skipUntil(n => n == startInner)\n      .takeUntil(n => n == endInner)\n      .push(endInner)\n\n    const node = inline.regenerateKey()\n\n    change.insertNodeByKey(startBlock.key, startInnerIndex, node, {\n      normalize: false,\n    })\n\n    inlines.forEach((child, i) => {\n      change.moveNodeByKey(child.key, node.key, i, { normalize: false })\n    })\n\n    if (normalize) {\n      change.normalizeNodeByKey(startBlock.key)\n    }\n  } else {\n    const startInlines = startBlock.nodes.slice(startIndex + 1)\n    const endInlines = endBlock.nodes.slice(0, endIndex + 1)\n    const startNode = inline.regenerateKey()\n    const endNode = inline.regenerateKey()\n\n    change.insertNodeByKey(startBlock.key, startIndex + 1, startNode, {\n      normalize: false,\n    })\n    change.insertNodeByKey(endBlock.key, endIndex, endNode, {\n      normalize: false,\n    })\n\n    startInlines.forEach((child, i) => {\n      change.moveNodeByKey(child.key, startNode.key, i, { normalize: false })\n    })\n\n    endInlines.forEach((child, i) => {\n      change.moveNodeByKey(child.key, endNode.key, i, { normalize: false })\n    })\n\n    if (normalize) {\n      change.normalizeNodeByKey(startBlock.key).normalizeNodeByKey(endBlock.key)\n    }\n\n    blocks.slice(1, -1).forEach(block => {\n      const node = inline.regenerateKey()\n      change.insertNodeByKey(block.key, 0, node, { normalize: false })\n\n      block.nodes.forEach((child, i) => {\n        change.moveNodeByKey(child.key, node.key, i, { normalize: false })\n      })\n\n      if (normalize) {\n        change.normalizeNodeByKey(block.key)\n      }\n    })\n  }\n}\n\n/**\n * Wrap the text in a `range` in a prefix/suffix.\n *\n * @param {Change} change\n * @param {Range} range\n * @param {String} prefix\n * @param {String} suffix (optional)\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.wrapTextAtRange = (\n  change,\n  range,\n  prefix,\n  suffix = prefix,\n  options = {}\n) => {\n  const normalize = change.getFlag('normalize', options)\n  const { startKey, endKey } = range\n  const start = range.collapseToStart()\n  let end = range.collapseToEnd()\n\n  if (startKey == endKey) {\n    end = end.move(prefix.length)\n  }\n\n  change.insertTextAtRange(start, prefix, [], { normalize })\n  change.insertTextAtRange(end, suffix, [], { normalize })\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Changes\n","import Block from '../models/block'\nimport Inline from '../models/inline'\nimport Mark from '../models/mark'\nimport Node from '../models/node'\n\n/**\n * Changes.\n *\n * @type {Object}\n */\n\nconst Changes = {}\n\n/**\n * Add mark to text at `offset` and `length` in node by `key`.\n *\n * @param {Change} change\n * @param {String} key\n * @param {Number} offset\n * @param {Number} length\n * @param {Mixed} mark\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.addMarkByKey = (change, key, offset, length, mark, options = {}) => {\n  mark = Mark.create(mark)\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  const { document } = value\n  const path = document.getPath(key)\n  const node = document.getNode(key)\n  const leaves = node.getLeaves()\n\n  const operations = []\n  const bx = offset\n  const by = offset + length\n  let o = 0\n\n  leaves.forEach(leaf => {\n    const ax = o\n    const ay = ax + leaf.text.length\n\n    o += leaf.text.length\n\n    // If the leaf doesn't overlap with the operation, continue on.\n    if (ay < bx || by < ax) return\n\n    // If the leaf already has the mark, continue on.\n    if (leaf.marks.has(mark)) return\n\n    // Otherwise, determine which offset and characters overlap.\n    const start = Math.max(ax, bx)\n    const end = Math.min(ay, by)\n\n    operations.push({\n      type: 'add_mark',\n      value,\n      path,\n      offset: start,\n      length: end - start,\n      mark,\n    })\n  })\n\n  change.applyOperations(operations)\n\n  if (normalize) {\n    const parent = document.getParent(key)\n    change.normalizeNodeByKey(parent.key)\n  }\n}\n\n/**\n * Insert a `fragment` at `index` in a node by `key`.\n *\n * @param {Change} change\n * @param {String} key\n * @param {Number} index\n * @param {Fragment} fragment\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.insertFragmentByKey = (change, key, index, fragment, options = {}) => {\n  const normalize = change.getFlag('normalize', options)\n\n  fragment.nodes.forEach((node, i) => {\n    change.insertNodeByKey(key, index + i, node)\n  })\n\n  if (normalize) {\n    change.normalizeNodeByKey(key)\n  }\n}\n\n/**\n * Insert a `node` at `index` in a node by `key`.\n *\n * @param {Change} change\n * @param {String} key\n * @param {Number} index\n * @param {Node} node\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.insertNodeByKey = (change, key, index, node, options = {}) => {\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  const { document } = value\n  const path = document.getPath(key)\n\n  change.applyOperation({\n    type: 'insert_node',\n    value,\n    path: [...path, index],\n    node,\n  })\n\n  if (normalize) {\n    change.normalizeNodeByKey(key)\n  }\n}\n\n/**\n * Insert `text` at `offset` in node by `key`.\n *\n * @param {Change} change\n * @param {String} key\n * @param {Number} offset\n * @param {String} text\n * @param {Set<Mark>} marks (optional)\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.insertTextByKey = (change, key, offset, text, marks, options = {}) => {\n  const normalize = change.getFlag('normalize', options)\n\n  const { value } = change\n  const { document } = value\n  const path = document.getPath(key)\n  const node = document.getNode(key)\n  marks = marks || node.getMarksAtIndex(offset)\n\n  change.applyOperation({\n    type: 'insert_text',\n    value,\n    path,\n    offset,\n    text,\n    marks,\n  })\n\n  if (normalize) {\n    const parent = document.getParent(key)\n    change.normalizeNodeByKey(parent.key)\n  }\n}\n\n/**\n * Merge a node by `key` with the previous node.\n *\n * @param {Change} change\n * @param {String} key\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.mergeNodeByKey = (change, key, options = {}) => {\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  const { document } = value\n  const path = document.getPath(key)\n  const original = document.getDescendant(key)\n  const previous = document.getPreviousSibling(key)\n\n  if (!previous) {\n    throw new Error(`Unable to merge node with key \"${key}\", no previous key.`)\n  }\n\n  const position =\n    previous.object == 'text' ? previous.text.length : previous.nodes.size\n\n  change.applyOperation({\n    type: 'merge_node',\n    value,\n    path,\n    position,\n    // for undos to succeed we only need the type and data because\n    // these are the only properties that get changed in the merge operation\n    properties: {\n      type: original.type,\n      data: original.data,\n    },\n    target: null,\n  })\n\n  if (normalize) {\n    const parent = document.getParent(key)\n    change.normalizeNodeByKey(parent.key)\n  }\n}\n\n/**\n * Move a node by `key` to a new parent by `newKey` and `index`.\n * `newKey` is the key of the container (it can be the document itself)\n *\n * @param {Change} change\n * @param {String} key\n * @param {String} newKey\n * @param {Number} index\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.moveNodeByKey = (change, key, newKey, newIndex, options = {}) => {\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  const { document } = value\n  const path = document.getPath(key)\n  const newPath = document.getPath(newKey)\n\n  change.applyOperation({\n    type: 'move_node',\n    value,\n    path,\n    newPath: [...newPath, newIndex],\n  })\n\n  if (normalize) {\n    const parent = document.getCommonAncestor(key, newKey)\n    change.normalizeNodeByKey(parent.key)\n  }\n}\n\n/**\n * Remove mark from text at `offset` and `length` in node by `key`.\n *\n * @param {Change} change\n * @param {String} key\n * @param {Number} offset\n * @param {Number} length\n * @param {Mark} mark\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.removeMarkByKey = (change, key, offset, length, mark, options = {}) => {\n  mark = Mark.create(mark)\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  const { document } = value\n  const path = document.getPath(key)\n  const node = document.getNode(key)\n  const leaves = node.getLeaves()\n\n  const operations = []\n  const bx = offset\n  const by = offset + length\n  let o = 0\n\n  leaves.forEach(leaf => {\n    const ax = o\n    const ay = ax + leaf.text.length\n\n    o += leaf.text.length\n\n    // If the leaf doesn't overlap with the operation, continue on.\n    if (ay < bx || by < ax) return\n\n    // If the leaf already has the mark, continue on.\n    if (!leaf.marks.has(mark)) return\n\n    // Otherwise, determine which offset and characters overlap.\n    const start = Math.max(ax, bx)\n    const end = Math.min(ay, by)\n\n    operations.push({\n      type: 'remove_mark',\n      value,\n      path,\n      offset: start,\n      length: end - start,\n      mark,\n    })\n  })\n\n  change.applyOperations(operations)\n\n  if (normalize) {\n    const parent = document.getParent(key)\n    change.normalizeNodeByKey(parent.key)\n  }\n}\n\n/**\n * Remove all `marks` from node by `key`.\n *\n * @param {Change} change\n * @param {String} key\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.removeAllMarksByKey = (change, key, options = {}) => {\n  const { state } = change\n  const { document } = state\n  const node = document.getNode(key)\n  const texts = node.object === 'text' ? [node] : node.getTextsAsArray()\n\n  texts.forEach(text => {\n    text.getMarksAsArray().forEach(mark => {\n      change.removeMarkByKey(text.key, 0, text.text.length, mark, options)\n    })\n  })\n}\n\n/**\n * Remove a node by `key`.\n *\n * @param {Change} change\n * @param {String} key\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.removeNodeByKey = (change, key, options = {}) => {\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  const { document } = value\n  const path = document.getPath(key)\n  const node = document.getNode(key)\n\n  change.applyOperation({\n    type: 'remove_node',\n    value,\n    path,\n    node,\n  })\n\n  if (normalize) {\n    const parent = document.getParent(key)\n    change.normalizeNodeByKey(parent.key)\n  }\n}\n\n/**\n * Remove text at `offset` and `length` in node by `key`.\n *\n * @param {Change} change\n * @param {String} key\n * @param {Number} offset\n * @param {Number} length\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.removeTextByKey = (change, key, offset, length, options = {}) => {\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  const { document } = value\n  const path = document.getPath(key)\n  const node = document.getNode(key)\n  const leaves = node.getLeaves()\n  const { text } = node\n\n  const removals = []\n  const bx = offset\n  const by = offset + length\n  let o = 0\n\n  leaves.forEach(leaf => {\n    const ax = o\n    const ay = ax + leaf.text.length\n\n    o += leaf.text.length\n\n    // If the leaf doesn't overlap with the removal, continue on.\n    if (ay < bx || by < ax) return\n\n    // Otherwise, determine which offset and characters overlap.\n    const start = Math.max(ax, bx)\n    const end = Math.min(ay, by)\n    const string = text.slice(start, end)\n\n    removals.push({\n      type: 'remove_text',\n      value,\n      path,\n      offset: start,\n      text: string,\n      marks: leaf.marks,\n    })\n  })\n\n  // Apply in reverse order, so subsequent removals don't impact previous ones.\n  change.applyOperations(removals.reverse())\n\n  if (normalize) {\n    const block = document.getClosestBlock(key)\n    change.normalizeNodeByKey(block.key)\n  }\n}\n\n/**\n`* Replace a `node` with another `node`\n *\n * @param {Change} change\n * @param {String} key\n * @param {Object|Node} node\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.replaceNodeByKey = (change, key, newNode, options = {}) => {\n  newNode = Node.create(newNode)\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  const { document } = value\n  const node = document.getNode(key)\n  const parent = document.getParent(key)\n  const index = parent.nodes.indexOf(node)\n  change.removeNodeByKey(key, { normalize: false })\n  change.insertNodeByKey(parent.key, index, newNode, options)\n  if (normalize) {\n    change.normalizeNodeByKey(parent.key)\n  }\n}\n\n/**\n * Set `properties` on mark on text at `offset` and `length` in node by `key`.\n *\n * @param {Change} change\n * @param {String} key\n * @param {Number} offset\n * @param {Number} length\n * @param {Mark} mark\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.setMarkByKey = (\n  change,\n  key,\n  offset,\n  length,\n  mark,\n  properties,\n  options = {}\n) => {\n  mark = Mark.create(mark)\n  properties = Mark.createProperties(properties)\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  const { document } = value\n  const path = document.getPath(key)\n\n  change.applyOperation({\n    type: 'set_mark',\n    value,\n    path,\n    offset,\n    length,\n    mark,\n    properties,\n  })\n\n  if (normalize) {\n    const parent = document.getParent(key)\n    change.normalizeNodeByKey(parent.key)\n  }\n}\n\n/**\n * Set `properties` on a node by `key`.\n *\n * @param {Change} change\n * @param {String} key\n * @param {Object|String} properties\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.setNodeByKey = (change, key, properties, options = {}) => {\n  properties = Node.createProperties(properties)\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  const { document } = value\n  const path = document.getPath(key)\n  const node = document.getNode(key)\n\n  change.applyOperation({\n    type: 'set_node',\n    value,\n    path,\n    node,\n    properties,\n  })\n\n  if (normalize) {\n    change.normalizeNodeByKey(node.key)\n  }\n}\n\n/**\n * Split a node by `key` at `position`.\n *\n * @param {Change} change\n * @param {String} key\n * @param {Number} position\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.splitNodeByKey = (change, key, position, options = {}) => {\n  const { normalize = true, target = null } = options\n  const { value } = change\n  const { document } = value\n  const path = document.getPath(key)\n  const node = document.getDescendantAtPath(path)\n\n  change.applyOperation({\n    type: 'split_node',\n    value,\n    path,\n    position,\n    properties: {\n      type: node.type,\n      data: node.data,\n    },\n    target,\n  })\n\n  if (normalize) {\n    const parent = document.getParent(key)\n    change.normalizeNodeByKey(parent.key)\n  }\n}\n\n/**\n * Split a node deeply down the tree by `key`, `textKey` and `textOffset`.\n *\n * @param {Change} change\n * @param {String} key\n * @param {Number} position\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.splitDescendantsByKey = (\n  change,\n  key,\n  textKey,\n  textOffset,\n  options = {}\n) => {\n  if (key == textKey) {\n    change.splitNodeByKey(textKey, textOffset, options)\n    return\n  }\n\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  const { document } = value\n\n  const text = document.getNode(textKey)\n  const ancestors = document.getAncestors(textKey)\n  const nodes = ancestors\n    .skipUntil(a => a.key == key)\n    .reverse()\n    .unshift(text)\n  let previous\n  let index\n\n  nodes.forEach(node => {\n    const prevIndex = index == null ? null : index\n    index = previous ? node.nodes.indexOf(previous) + 1 : textOffset\n    previous = node\n    change.splitNodeByKey(node.key, index, {\n      normalize: false,\n      target: prevIndex,\n    })\n  })\n\n  if (normalize) {\n    const parent = document.getParent(key)\n    change.normalizeNodeByKey(parent.key)\n  }\n}\n\n/**\n * Unwrap content from an inline parent with `properties`.\n *\n * @param {Change} change\n * @param {String} key\n * @param {Object|String} properties\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.unwrapInlineByKey = (change, key, properties, options) => {\n  const { value } = change\n  const { document, selection } = value\n  const node = document.assertDescendant(key)\n  const first = node.getFirstText()\n  const last = node.getLastText()\n  const range = selection.moveToRangeOf(first, last)\n  change.unwrapInlineAtRange(range, properties, options)\n}\n\n/**\n * Unwrap content from a block parent with `properties`.\n *\n * @param {Change} change\n * @param {String} key\n * @param {Object|String} properties\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.unwrapBlockByKey = (change, key, properties, options) => {\n  const { value } = change\n  const { document, selection } = value\n  const node = document.assertDescendant(key)\n  const first = node.getFirstText()\n  const last = node.getLastText()\n  const range = selection.moveToRangeOf(first, last)\n  change.unwrapBlockAtRange(range, properties, options)\n}\n\n/**\n * Unwrap a single node from its parent.\n *\n * If the node is surrounded with siblings, its parent will be\n * split. If the node is the only child, the parent is removed, and\n * simply replaced by the node itself.  Cannot unwrap a root node.\n *\n * @param {Change} change\n * @param {String} key\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.unwrapNodeByKey = (change, key, options = {}) => {\n  const normalize = change.getFlag('normalize', options)\n  const { value } = change\n  const { document } = value\n  const parent = document.getParent(key)\n  const node = parent.getChild(key)\n\n  const index = parent.nodes.indexOf(node)\n  const isFirst = index === 0\n  const isLast = index === parent.nodes.size - 1\n\n  const parentParent = document.getParent(parent.key)\n  const parentIndex = parentParent.nodes.indexOf(parent)\n\n  if (parent.nodes.size === 1) {\n    change.moveNodeByKey(key, parentParent.key, parentIndex, {\n      normalize: false,\n    })\n    change.removeNodeByKey(parent.key, options)\n  } else if (isFirst) {\n    // Just move the node before its parent.\n    change.moveNodeByKey(key, parentParent.key, parentIndex, options)\n  } else if (isLast) {\n    // Just move the node after its parent.\n    change.moveNodeByKey(key, parentParent.key, parentIndex + 1, options)\n  } else {\n    // Split the parent.\n    change.splitNodeByKey(parent.key, index, { normalize: false })\n\n    // Extract the node in between the splitted parent.\n    change.moveNodeByKey(key, parentParent.key, parentIndex + 1, {\n      normalize: false,\n    })\n\n    if (normalize) {\n      change.normalizeNodeByKey(parentParent.key)\n    }\n  }\n}\n\n/**\n * Wrap a node in a block with `properties`.\n *\n * @param {Change} change\n * @param {String} key The node to wrap\n * @param {Block|Object|String} block The wrapping block (its children are discarded)\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.wrapBlockByKey = (change, key, block, options) => {\n  block = Block.create(block)\n  block = block.set('nodes', block.nodes.clear())\n\n  const { document } = change.value\n  const node = document.assertDescendant(key)\n  const parent = document.getParent(node.key)\n  const index = parent.nodes.indexOf(node)\n\n  change.insertNodeByKey(parent.key, index, block, { normalize: false })\n  change.moveNodeByKey(node.key, block.key, 0, options)\n}\n\n/**\n * Wrap a node in an inline with `properties`.\n *\n * @param {Change} change\n * @param {String} key The node to wrap\n * @param {Block|Object|String} inline The wrapping inline (its children are discarded)\n * @param {Object} options\n *   @property {Boolean} normalize\n */\n\nChanges.wrapInlineByKey = (change, key, inline, options) => {\n  inline = Inline.create(inline)\n  inline = inline.set('nodes', inline.nodes.clear())\n\n  const { document } = change.value\n  const node = document.assertDescendant(key)\n  const parent = document.getParent(node.key)\n  const index = parent.nodes.indexOf(node)\n\n  change.insertNodeByKey(parent.key, index, inline, { normalize: false })\n  change.moveNodeByKey(node.key, inline.key, 0, options)\n}\n\n/**\n * Wrap a node by `key` with `parent`.\n *\n * @param {Change} change\n * @param {String} key\n * @param {Node|Object} parent\n * @param {Object} options\n */\n\nChanges.wrapNodeByKey = (change, key, parent) => {\n  parent = Node.create(parent)\n  parent = parent.set('nodes', parent.nodes.clear())\n\n  if (parent.object == 'block') {\n    change.wrapBlockByKey(key, parent)\n    return\n  }\n\n  if (parent.object == 'inline') {\n    change.wrapInlineByKey(key, parent)\n    return\n  }\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Changes\n","/**\n * Slate operation attributes.\n *\n * @type {Array}\n */\n\nconst OPERATION_ATTRIBUTES = {\n  add_mark: ['value', 'path', 'offset', 'length', 'mark'],\n  insert_node: ['value', 'path', 'node'],\n  insert_text: ['value', 'path', 'offset', 'text', 'marks'],\n  merge_node: ['value', 'path', 'position', 'properties', 'target'],\n  move_node: ['value', 'path', 'newPath'],\n  remove_mark: ['value', 'path', 'offset', 'length', 'mark'],\n  remove_node: ['value', 'path', 'node'],\n  remove_text: ['value', 'path', 'offset', 'text', 'marks'],\n  set_mark: ['value', 'path', 'offset', 'length', 'mark', 'properties'],\n  set_node: ['value', 'path', 'node', 'properties'],\n  set_selection: ['value', 'selection', 'properties'],\n  set_value: ['value', 'properties'],\n  split_node: ['value', 'path', 'position', 'properties', 'target'],\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default OPERATION_ATTRIBUTES\n","import Debug from 'debug'\nimport isEqual from 'lodash/isEqual'\nimport isPlainObject from 'is-plain-object'\nimport logger from 'slate-dev-logger'\nimport { List, Record, Stack } from 'immutable'\n\nimport MODEL_TYPES from '../constants/model-types'\n\n/**\n * Debug.\n *\n * @type {Function}\n */\n\nconst debug = Debug('slate:history')\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  redos: new Stack(),\n  undos: new Stack(),\n}\n\n/**\n * History.\n *\n * @type {History}\n */\n\nclass History extends Record(DEFAULTS) {\n  /**\n   * Create a new `History` with `attrs`.\n   *\n   * @param {Object|History} attrs\n   * @return {History}\n   */\n\n  static create(attrs = {}) {\n    if (History.isHistory(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      return History.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`History.create\\` only accepts objects or histories, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `History` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {History}\n   */\n\n  static fromJSON(object) {\n    const { redos = [], undos = [] } = object\n\n    const history = new History({\n      redos: new Stack(redos),\n      undos: new Stack(undos),\n    })\n\n    return history\n  }\n\n  /**\n   * Alias `fromJS`.\n   */\n\n  static fromJS = History.fromJSON\n\n  /**\n   * Check if `any` is a `History`.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isHistory(any) {\n    return !!(any && any[MODEL_TYPES.HISTORY])\n  }\n\n  /**\n   * Object.\n   *\n   * @return {String}\n   */\n\n  get object() {\n    return 'history'\n  }\n\n  get kind() {\n    logger.deprecate(\n      'slate@0.32.0',\n      'The `kind` property of Slate objects has been renamed to `object`.'\n    )\n    return this.object\n  }\n\n  /**\n   * Save an `operation` into the history.\n   *\n   * @param {Object} operation\n   * @param {Object} options\n   * @return {History}\n   */\n\n  save(operation, options = {}) {\n    let history = this\n    let { undos, redos } = history\n    let { merge, skip } = options\n    const prevBatch = undos.peek()\n    const prevOperation = prevBatch && prevBatch.last()\n\n    if (skip == null) {\n      skip = shouldSkip(operation, prevOperation)\n    }\n\n    if (skip) {\n      return history\n    }\n\n    if (merge == null) {\n      merge = shouldMerge(operation, prevOperation)\n    }\n\n    debug('save', { operation, merge })\n\n    // If the `merge` flag is true, add the operation to the previous batch.\n    if (merge && prevBatch) {\n      const batch = prevBatch.push(operation)\n      undos = undos.pop()\n      undos = undos.push(batch)\n    } else {\n      // Otherwise, create a new batch with the operation.\n      const batch = new List([operation])\n      undos = undos.push(batch)\n    }\n\n    // Constrain the history to 100 entries for memory's sake.\n    if (undos.size > 100) {\n      undos = undos.take(100)\n    }\n\n    // Clear the redos and update the history.\n    redos = redos.clear()\n    history = history.set('undos', undos).set('redos', redos)\n    return history\n  }\n\n  /**\n   * Return a JSON representation of the history.\n   *\n   * @return {Object}\n   */\n\n  toJSON() {\n    const object = {\n      object: this.object,\n      redos: this.redos.toJSON(),\n      undos: this.undos.toJSON(),\n    }\n\n    return object\n  }\n\n  /**\n   * Alias `toJS`.\n   */\n\n  toJS() {\n    return this.toJSON()\n  }\n}\n\n/**\n * Attach a pseudo-symbol for type checking.\n */\n\nHistory.prototype[MODEL_TYPES.HISTORY] = true\n\n/**\n * Check whether to merge a new operation `o` into the previous operation `p`.\n *\n * @param {Object} o\n * @param {Object} p\n * @return {Boolean}\n */\n\nfunction shouldMerge(o, p) {\n  if (!p) return false\n\n  const merge =\n    (o.type == 'set_selection' && p.type == 'set_selection') ||\n    (o.type == 'insert_text' &&\n      p.type == 'insert_text' &&\n      o.offset == p.offset + p.text.length &&\n      isEqual(o.path, p.path)) ||\n    (o.type == 'remove_text' &&\n      p.type == 'remove_text' &&\n      o.offset + o.text.length == p.offset &&\n      isEqual(o.path, p.path))\n\n  return merge\n}\n\n/**\n * Check whether to skip a new operation `o`, given previous operation `p`.\n *\n * @param {Object} o\n * @param {Object} p\n * @return {Boolean}\n */\n\nfunction shouldSkip(o, p) {\n  if (!p) return false\n\n  const skip = o.type == 'set_selection' && p.type == 'set_selection'\n\n  return skip\n}\n\n/**\n * Export.\n *\n * @type {History}\n */\n\nexport default History\n","import { List } from 'immutable'\n\nimport Text from '../models/text'\n\n/**\n * Define the core schema rules, order-sensitive.\n *\n * @type {Array}\n */\n\nconst CORE_SCHEMA_RULES = [\n  /**\n   * Only allow block nodes in documents.\n   *\n   * @type {Object}\n   */\n\n  {\n    validateNode(node) {\n      if (node.object != 'document') return\n      const invalids = node.nodes.filter(n => n.object != 'block')\n      if (!invalids.size) return\n\n      return change => {\n        invalids.forEach(child => {\n          change.removeNodeByKey(child.key, { normalize: false })\n        })\n      }\n    },\n  },\n\n  /**\n   * Only allow block nodes or inline and text nodes in blocks.\n   *\n   * @type {Object}\n   */\n\n  {\n    validateNode(node) {\n      if (node.object != 'block') return\n      const first = node.nodes.first()\n      if (!first) return\n      const objects = first.object == 'block' ? ['block'] : ['inline', 'text']\n      const invalids = node.nodes.filter(n => !objects.includes(n.object))\n      if (!invalids.size) return\n\n      return change => {\n        invalids.forEach(child => {\n          change.removeNodeByKey(child.key, { normalize: false })\n        })\n      }\n    },\n  },\n\n  /**\n   * Only allow inline and text nodes in inlines.\n   *\n   * @type {Object}\n   */\n\n  {\n    validateNode(node) {\n      if (node.object != 'inline') return\n      const invalids = node.nodes.filter(\n        n => n.object != 'inline' && n.object != 'text'\n      )\n      if (!invalids.size) return\n\n      return change => {\n        invalids.forEach(child => {\n          change.removeNodeByKey(child.key, { normalize: false })\n        })\n      }\n    },\n  },\n\n  /**\n   * Ensure that block and inline nodes have at least one text child.\n   *\n   * @type {Object}\n   */\n\n  {\n    validateNode(node) {\n      if (node.object != 'block' && node.object != 'inline') return\n      if (node.nodes.size > 0) return\n\n      return change => {\n        const text = Text.create()\n        change.insertNodeByKey(node.key, 0, text, { normalize: false })\n      }\n    },\n  },\n\n  /**\n   * Ensure that inline non-void nodes are never empty.\n   *\n   * This rule is applied to all blocks and inlines, because when they contain an empty\n   * inline, we need to remove the empty inline from that parent node. If `validate`\n   * was to be memoized, it should be against the parent node, not the empty inline itself.\n   *\n   * @type {Object}\n   */\n\n  {\n    validateNode(node) {\n      if (node.object != 'inline' && node.object != 'block') return\n\n      const invalids = node.nodes.filter(\n        child => child.object === 'inline' && child.isEmpty\n      )\n\n      if (!invalids.size) return\n\n      return change => {\n        // If all of the block's nodes are invalid, insert an empty text node so\n        // that the selection will be preserved when they are all removed.\n        if (node.nodes.size == invalids.size) {\n          const text = Text.create()\n          change.insertNodeByKey(node.key, 1, text, { normalize: false })\n        }\n\n        invalids.forEach(child => {\n          change.removeNodeByKey(child.key, { normalize: false })\n        })\n      }\n    },\n  },\n\n  /**\n   * Ensure that inline void nodes are surrounded by text nodes, by adding extra\n   * blank text nodes if necessary.\n   *\n   * @type {Object}\n   */\n\n  {\n    validateNode(node) {\n      if (node.object != 'block' && node.object != 'inline') return\n\n      const invalids = node.nodes.reduce((list, child, index) => {\n        if (child.object !== 'inline') return list\n\n        const prev = index > 0 ? node.nodes.get(index - 1) : null\n        const next = node.nodes.get(index + 1)\n\n        // We don't test if \"prev\" is inline, since it has already been\n        // processed in the loop\n        const insertBefore = !prev\n        const insertAfter = !next || next.object == 'inline'\n\n        if (insertAfter || insertBefore) {\n          list = list.push({ insertAfter, insertBefore, index })\n        }\n\n        return list\n      }, new List())\n\n      if (!invalids.size) return\n\n      return change => {\n        // Shift for every text node inserted previously.\n        let shift = 0\n\n        invalids.forEach(({ index, insertAfter, insertBefore }) => {\n          if (insertBefore) {\n            change.insertNodeByKey(node.key, shift + index, Text.create(), {\n              normalize: false,\n            })\n            shift++\n          }\n\n          if (insertAfter) {\n            change.insertNodeByKey(node.key, shift + index + 1, Text.create(), {\n              normalize: false,\n            })\n            shift++\n          }\n        })\n      }\n    },\n  },\n\n  /**\n   * Merge adjacent text nodes.\n   *\n   * @type {Object}\n   */\n\n  {\n    validateNode(node) {\n      if (node.object != 'block' && node.object != 'inline') return\n\n      const invalids = node.nodes\n        .map((child, i) => {\n          const next = node.nodes.get(i + 1)\n          if (child.object != 'text') return\n          if (!next || next.object != 'text') return\n          return next\n        })\n        .filter(Boolean)\n\n      if (!invalids.size) return\n\n      return change => {\n        // Reverse the list to handle consecutive merges, since the earlier nodes\n        // will always exist after each merge.\n        invalids.reverse().forEach(n => {\n          change.mergeNodeByKey(n.key, { normalize: false })\n        })\n      }\n    },\n  },\n\n  /**\n   * Prevent extra empty text nodes, except when adjacent to inline void nodes.\n   *\n   * @type {Object}\n   */\n\n  {\n    validateNode(node) {\n      if (node.object != 'block' && node.object != 'inline') return\n      const { nodes } = node\n      if (nodes.size <= 1) return\n\n      const invalids = nodes.filter((desc, i) => {\n        if (desc.object != 'text') return\n        if (desc.text.length > 0) return\n\n        const prev = i > 0 ? nodes.get(i - 1) : null\n        const next = nodes.get(i + 1)\n\n        // If it's the first node, and the next is a void, preserve it.\n        if (!prev && next.object == 'inline') return\n\n        // It it's the last node, and the previous is an inline, preserve it.\n        if (!next && prev.object == 'inline') return\n\n        // If it's surrounded by inlines, preserve it.\n        if (next && prev && next.object == 'inline' && prev.object == 'inline')\n          return\n\n        // Otherwise, remove it.\n        return true\n      })\n\n      if (!invalids.size) return\n\n      return change => {\n        invalids.forEach(text => {\n          change.removeNodeByKey(text.key, { normalize: false })\n        })\n      }\n    },\n  },\n]\n\n/**\n * Export.\n *\n * @type {Array}\n */\n\nexport default CORE_SCHEMA_RULES\n","import logger from 'slate-dev-logger'\nimport { Record } from 'immutable'\n\nimport MODEL_TYPES from '../constants/model-types'\nimport memoize from '../utils/memoize'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  plugins: [],\n}\n\n/**\n * Stack.\n *\n * @type {Stack}\n */\n\nclass Stack extends Record(DEFAULTS) {\n  /**\n   * Constructor.\n   *\n   * @param {Object} attrs\n   */\n\n  static create(attrs = {}) {\n    const { plugins = [] } = attrs\n    const stack = new Stack({ plugins })\n    return stack\n  }\n\n  /**\n   * Check if `any` is a `Stack`.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isStack(any) {\n    return !!(any && any[MODEL_TYPES.STACK])\n  }\n\n  /**\n   * Object.\n   *\n   * @return {String}\n   */\n\n  get object() {\n    return 'stack'\n  }\n\n  get kind() {\n    logger.deprecate(\n      'slate@0.32.0',\n      'The `kind` property of Slate objects has been renamed to `object`.'\n    )\n    return this.object\n  }\n\n  /**\n   * Get all plugins with `property`.\n   *\n   * @param {String} property\n   * @return {Array}\n   */\n\n  getPluginsWith(property) {\n    return this.plugins.filter(plugin => plugin[property] != null)\n  }\n\n  /**\n   * Iterate the plugins with `property`, returning the first non-null value.\n   *\n   * @param {String} property\n   * @param {Any} ...args\n   */\n\n  find(property, ...args) {\n    const plugins = this.getPluginsWith(property)\n\n    for (const plugin of plugins) {\n      const ret = plugin[property](...args)\n      if (ret != null) return ret\n    }\n  }\n\n  /**\n   * Iterate the plugins with `property`, returning all the non-null values.\n   *\n   * @param {String} property\n   * @param {Any} ...args\n   * @return {Array}\n   */\n\n  map(property, ...args) {\n    const plugins = this.getPluginsWith(property)\n    const array = []\n\n    for (const plugin of plugins) {\n      const ret = plugin[property](...args)\n      if (ret != null) array.push(ret)\n    }\n\n    return array\n  }\n\n  /**\n   * Iterate the plugins with `property`, breaking on any a non-null values.\n   *\n   * @param {String} property\n   * @param {Any} ...args\n   */\n\n  run(property, ...args) {\n    const plugins = this.getPluginsWith(property)\n\n    for (const plugin of plugins) {\n      const ret = plugin[property](...args)\n      if (ret != null) return\n    }\n  }\n\n  /**\n   * Iterate the plugins with `property`, reducing to a set of React children.\n   *\n   * @param {String} property\n   * @param {Object} props\n   * @param {Any} ...args\n   */\n\n  render(property, props, ...args) {\n    const plugins = this.getPluginsWith(property)\n      .slice()\n      .reverse()\n    let { children = null } = props\n\n    for (const plugin of plugins) {\n      const ret = plugin[property](props, ...args)\n      if (ret == null) continue\n      props.children = children = ret\n    }\n\n    return children\n  }\n}\n\n/**\n * Attach a pseudo-symbol for type checking.\n */\n\nStack.prototype[MODEL_TYPES.STACK] = true\n\n/**\n * Memoize read methods.\n */\n\nmemoize(Stack.prototype, ['getPluginsWith'])\n\n/**\n * Export.\n *\n * @type {Stack}\n */\n\nexport default Stack\n","import Debug from 'debug'\nimport isPlainObject from 'is-plain-object'\nimport logger from 'slate-dev-logger'\nimport mergeWith from 'lodash/mergeWith'\nimport { Record } from 'immutable'\n\nimport {\n  CHILD_OBJECT_INVALID,\n  CHILD_REQUIRED,\n  CHILD_TYPE_INVALID,\n  CHILD_UNKNOWN,\n  FIRST_CHILD_OBJECT_INVALID,\n  FIRST_CHILD_TYPE_INVALID,\n  LAST_CHILD_OBJECT_INVALID,\n  LAST_CHILD_TYPE_INVALID,\n  NODE_DATA_INVALID,\n  NODE_IS_VOID_INVALID,\n  NODE_MARK_INVALID,\n  NODE_TEXT_INVALID,\n  PARENT_OBJECT_INVALID,\n  PARENT_TYPE_INVALID,\n} from 'slate-schema-violations'\n\nimport CORE_SCHEMA_RULES from '../constants/core-schema-rules'\nimport MODEL_TYPES from '../constants/model-types'\nimport Stack from './stack'\nimport memoize from '../utils/memoize'\n\n/**\n * Debug.\n *\n * @type {Function}\n */\n\nconst debug = Debug('slate:schema')\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  stack: Stack.create(),\n  document: {},\n  blocks: {},\n  inlines: {},\n}\n\n/**\n * Schema.\n *\n * @type {Schema}\n */\n\nclass Schema extends Record(DEFAULTS) {\n  /**\n   * Create a new `Schema` with `attrs`.\n   *\n   * @param {Object|Schema} attrs\n   * @return {Schema}\n   */\n\n  static create(attrs = {}) {\n    if (Schema.isSchema(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      return Schema.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Schema.create\\` only accepts objects or schemas, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Schema` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Schema}\n   */\n\n  static fromJSON(object) {\n    if (Schema.isSchema(object)) {\n      return object\n    }\n\n    let { plugins } = object\n\n    if (object.rules) {\n      throw new Error(\n        'Schemas in Slate have changed! They are no longer accept a `rules` property.'\n      )\n    }\n\n    if (object.nodes) {\n      throw new Error(\n        'Schemas in Slate have changed! They are no longer accept a `nodes` property.'\n      )\n    }\n\n    if (!plugins) {\n      plugins = [{ schema: object }]\n    }\n\n    const schema = resolveSchema(plugins)\n    const stack = Stack.create({ plugins: [...CORE_SCHEMA_RULES, ...plugins] })\n    const ret = new Schema({ ...schema, stack })\n    return ret\n  }\n\n  /**\n   * Alias `fromJS`.\n   */\n\n  static fromJS = Schema.fromJSON\n\n  /**\n   * Check if `any` is a `Schema`.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isSchema(any) {\n    return !!(any && any[MODEL_TYPES.SCHEMA])\n  }\n\n  /**\n   * Object.\n   *\n   * @return {String}\n   */\n\n  get object() {\n    return 'schema'\n  }\n\n  get kind() {\n    logger.deprecate(\n      'slate@0.32.0',\n      'The `kind` property of Slate objects has been renamed to `object`.'\n    )\n    return this.object\n  }\n\n  /**\n   * Get the rule for an `object`.\n   *\n   * @param {Mixed} object\n   * @return {Object}\n   */\n\n  getRule(object) {\n    switch (object.object) {\n      case 'document':\n        return this.document\n      case 'block':\n        return this.blocks[object.type]\n      case 'inline':\n        return this.inlines[object.type]\n    }\n  }\n\n  /**\n   * Get a dictionary of the parent rule validations by child type.\n   *\n   * @return {Object|Null}\n   */\n\n  getParentRules() {\n    const { blocks, inlines } = this\n    const parents = {}\n\n    for (const key in blocks) {\n      const rule = blocks[key]\n      if (rule.parent == null) continue\n      parents[key] = rule\n    }\n\n    for (const key in inlines) {\n      const rule = inlines[key]\n      if (rule.parent == null) continue\n      parents[key] = rule\n    }\n\n    return Object.keys(parents).length == 0 ? null : parents\n  }\n\n  /**\n   * Fail validation by returning a normalizing change function.\n   *\n   * @param {String} violation\n   * @param {Object} context\n   * @return {Function}\n   */\n\n  fail(violation, context) {\n    return change => {\n      debug(`normalizing`, { violation, context })\n      const { rule } = context\n      const { size } = change.operations\n      if (rule.normalize) rule.normalize(change, violation, context)\n      if (change.operations.size > size) return\n      this.normalize(change, violation, context)\n    }\n  }\n\n  /**\n   * Normalize an invalid value with `violation` and `context`.\n   *\n   * @param {Change} change\n   * @param {String} violation\n   * @param {Mixed} context\n   */\n\n  normalize(change, violation, context) {\n    switch (violation) {\n      case CHILD_OBJECT_INVALID:\n      case CHILD_TYPE_INVALID:\n      case CHILD_UNKNOWN:\n      case FIRST_CHILD_OBJECT_INVALID:\n      case FIRST_CHILD_TYPE_INVALID:\n      case LAST_CHILD_OBJECT_INVALID:\n      case LAST_CHILD_TYPE_INVALID: {\n        const { child, node } = context\n        return child.object == 'text' &&\n          node.object == 'block' &&\n          node.nodes.size == 1\n          ? change.removeNodeByKey(node.key)\n          : change.removeNodeByKey(child.key)\n      }\n\n      case CHILD_REQUIRED:\n      case NODE_TEXT_INVALID:\n      case PARENT_OBJECT_INVALID:\n      case PARENT_TYPE_INVALID: {\n        const { node } = context\n        return node.object == 'document'\n          ? node.nodes.forEach(child => change.removeNodeByKey(child.key))\n          : change.removeNodeByKey(node.key)\n      }\n\n      case NODE_DATA_INVALID: {\n        const { node, key } = context\n        return node.data.get(key) === undefined && node.object != 'document'\n          ? change.removeNodeByKey(node.key)\n          : change.setNodeByKey(node.key, { data: node.data.delete(key) })\n      }\n\n      case NODE_IS_VOID_INVALID: {\n        const { node } = context\n        return change.setNodeByKey(node.key, { isVoid: !node.isVoid })\n      }\n\n      case NODE_MARK_INVALID: {\n        const { node, mark } = context\n        return node\n          .getTexts()\n          .forEach(t => change.removeMarkByKey(t.key, 0, t.text.length, mark))\n      }\n    }\n  }\n\n  /**\n   * Validate a `node` with the schema, returning a function that will fix the\n   * invalid node, or void if the node is valid.\n   *\n   * @param {Node} node\n   * @return {Function|Void}\n   */\n\n  validateNode(node) {\n    const ret = this.stack.find('validateNode', node)\n    if (ret) return ret\n\n    if (node.object == 'text') return\n\n    const rule = this.getRule(node) || {}\n    const parents = this.getParentRules()\n    const ctx = { node, rule }\n\n    if (rule.isVoid != null) {\n      if (node.isVoid != rule.isVoid) {\n        return this.fail(NODE_IS_VOID_INVALID, ctx)\n      }\n    }\n\n    if (rule.data != null) {\n      for (const key in rule.data) {\n        const fn = rule.data[key]\n        const value = node.data.get(key)\n\n        if (!fn(value)) {\n          return this.fail(NODE_DATA_INVALID, { ...ctx, key, value })\n        }\n      }\n    }\n\n    if (rule.marks != null) {\n      const marks = node.getMarks().toArray()\n\n      for (const mark of marks) {\n        if (!rule.marks.some(def => def.type === mark.type)) {\n          return this.fail(NODE_MARK_INVALID, { ...ctx, mark })\n        }\n      }\n    }\n\n    if (rule.text != null) {\n      const { text } = node\n\n      if (!rule.text.test(text)) {\n        return this.fail(NODE_TEXT_INVALID, { ...ctx, text })\n      }\n    }\n\n    if (rule.first != null) {\n      const { objects, types } = rule.first\n      const child = node.nodes.first()\n\n      if (child && objects && !objects.includes(child.object)) {\n        return this.fail(FIRST_CHILD_OBJECT_INVALID, { ...ctx, child })\n      }\n\n      if (child && types && !types.includes(child.type)) {\n        return this.fail(FIRST_CHILD_TYPE_INVALID, { ...ctx, child })\n      }\n    }\n\n    if (rule.last != null) {\n      const { objects, types } = rule.last\n      const child = node.nodes.last()\n\n      if (child && objects && !objects.includes(child.object)) {\n        return this.fail(LAST_CHILD_OBJECT_INVALID, { ...ctx, child })\n      }\n\n      if (child && types && !types.includes(child.type)) {\n        return this.fail(LAST_CHILD_TYPE_INVALID, { ...ctx, child })\n      }\n    }\n\n    if (rule.nodes != null || parents != null) {\n      const children = node.nodes.toArray()\n      const defs = rule.nodes != null ? rule.nodes.slice() : []\n\n      let offset\n      let min\n      let index\n      let def\n      let max\n      let child\n\n      function nextDef() {\n        offset = offset == null ? null : 0\n        def = defs.shift()\n        min = def && (def.min == null ? 0 : def.min)\n        max = def && (def.max == null ? Infinity : def.max)\n        return !!def\n      }\n\n      function nextChild() {\n        index = index == null ? 0 : index + 1\n        offset = offset == null ? 0 : offset + 1\n        child = children[index]\n        if (max != null && offset == max) nextDef()\n        return !!child\n      }\n      function rewind() {\n        offset -= 1\n        index -= 1\n      }\n\n      if (rule.nodes != null) {\n        nextDef()\n      }\n\n      while (nextChild()) {\n        if (\n          parents != null &&\n          child.object != 'text' &&\n          child.type in parents\n        ) {\n          const r = parents[child.type]\n\n          if (\n            r.parent.objects != null &&\n            !r.parent.objects.includes(node.object)\n          ) {\n            return this.fail(PARENT_OBJECT_INVALID, {\n              node: child,\n              parent: node,\n              rule: r,\n            })\n          }\n\n          if (r.parent.types != null && !r.parent.types.includes(node.type)) {\n            return this.fail(PARENT_TYPE_INVALID, {\n              node: child,\n              parent: node,\n              rule: r,\n            })\n          }\n        }\n\n        if (rule.nodes != null) {\n          if (!def) {\n            return this.fail(CHILD_UNKNOWN, { ...ctx, child, index })\n          }\n\n          if (def.objects != null && !def.objects.includes(child.object)) {\n            if (offset >= min && nextDef()) {\n              rewind()\n              continue\n            }\n            return this.fail(CHILD_OBJECT_INVALID, { ...ctx, child, index })\n          }\n\n          if (def.types != null && !def.types.includes(child.type)) {\n            if (offset >= min && nextDef()) {\n              rewind()\n              continue\n            }\n            return this.fail(CHILD_TYPE_INVALID, { ...ctx, child, index })\n          }\n        }\n      }\n\n      if (rule.nodes != null) {\n        while (min != null) {\n          if (offset < min) {\n            return this.fail(CHILD_REQUIRED, { ...ctx, index })\n          }\n\n          nextDef()\n        }\n      }\n    }\n  }\n\n  /**\n   * Return a JSON representation of the schema.\n   *\n   * @return {Object}\n   */\n\n  toJSON() {\n    const object = {\n      object: this.object,\n      document: this.document,\n      blocks: this.blocks,\n      inlines: this.inlines,\n    }\n\n    return object\n  }\n\n  /**\n   * Alias `toJS`.\n   */\n\n  toJS() {\n    return this.toJSON()\n  }\n}\n\n/**\n * Resolve a set of schema rules from an array of `plugins`.\n *\n * @param {Array} plugins\n * @return {Object}\n */\n\nfunction resolveSchema(plugins = []) {\n  const schema = {\n    document: {},\n    blocks: {},\n    inlines: {},\n  }\n\n  plugins\n    .slice()\n    .reverse()\n    .forEach(plugin => {\n      if (!plugin.schema) return\n\n      if (plugin.schema.rules) {\n        throw new Error(\n          'Schemas in Slate have changed! They are no longer accept a `rules` property.'\n        )\n      }\n\n      if (plugin.schema.nodes) {\n        throw new Error(\n          'Schemas in Slate have changed! They are no longer accept a `nodes` property.'\n        )\n      }\n\n      const { document = {}, blocks = {}, inlines = {} } = plugin.schema\n      const d = resolveDocumentRule(document)\n      const bs = {}\n      const is = {}\n\n      for (const key in blocks) {\n        bs[key] = resolveNodeRule('block', key, blocks[key])\n      }\n\n      for (const key in inlines) {\n        is[key] = resolveNodeRule('inline', key, inlines[key])\n      }\n\n      mergeWith(schema.document, d, customizer)\n      mergeWith(schema.blocks, bs, customizer)\n      mergeWith(schema.inlines, is, customizer)\n    })\n\n  return schema\n}\n\n/**\n * Resolve a document rule `obj`.\n *\n * @param {Object} obj\n * @return {Object}\n */\n\nfunction resolveDocumentRule(obj) {\n  return {\n    data: {},\n    nodes: null,\n    ...obj,\n  }\n}\n\n/**\n * Resolve a node rule with `type` from `obj`.\n *\n * @param {String} object\n * @param {String} type\n * @param {Object} obj\n * @return {Object}\n */\n\nfunction resolveNodeRule(object, type, obj) {\n  return {\n    data: {},\n    isVoid: null,\n    nodes: null,\n    first: null,\n    last: null,\n    parent: null,\n    text: null,\n    ...obj,\n  }\n}\n\n/**\n * A Lodash customizer for merging schema definitions. Special cases `objects`\n * and `types` arrays to be unioned, and ignores new `null` values.\n *\n * @param {Mixed} target\n * @param {Mixed} source\n * @return {Array|Void}\n */\n\nfunction customizer(target, source, key) {\n  if (key == 'objects' || key == 'types') {\n    return target == null ? source : target.concat(source)\n  } else {\n    return source == null ? target : source\n  }\n}\n\n/**\n * Attach a pseudo-symbol for type checking.\n */\n\nSchema.prototype[MODEL_TYPES.SCHEMA] = true\n\n/**\n * Memoize read methods.\n */\n\nmemoize(Schema.prototype, ['getParentRules'])\n\n/**\n * Export.\n *\n * @type {Schema}\n */\n\nexport default Schema\n","import isPlainObject from 'is-plain-object'\nimport logger from 'slate-dev-logger'\nimport { Record, Set, List, Map } from 'immutable'\n\nimport MODEL_TYPES from '../constants/model-types'\nimport Change from './change'\nimport Data from './data'\nimport Document from './document'\nimport History from './history'\nimport Range from './range'\nimport Schema from './schema'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  data: new Map(),\n  decorations: null,\n  document: Document.create(),\n  history: History.create(),\n  schema: Schema.create(),\n  selection: Range.create(),\n}\n\n/**\n * Value.\n *\n * @type {Value}\n */\n\nclass Value extends Record(DEFAULTS) {\n  /**\n   * Create a new `Value` with `attrs`.\n   *\n   * @param {Object|Value} attrs\n   * @param {Object} options\n   * @return {Value}\n   */\n\n  static create(attrs = {}, options = {}) {\n    if (Value.isValue(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      return Value.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Value.create\\` only accepts objects or values, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a dictionary of settable value properties from `attrs`.\n   *\n   * @param {Object|Value} attrs\n   * @return {Object}\n   */\n\n  static createProperties(attrs = {}) {\n    if (Value.isValue(attrs)) {\n      return {\n        data: attrs.data,\n        decorations: attrs.decorations,\n        schema: attrs.schema,\n      }\n    }\n\n    if (isPlainObject(attrs)) {\n      const props = {}\n      if ('data' in attrs) props.data = Data.create(attrs.data)\n      if ('decorations' in attrs)\n        props.decorations = Range.createList(attrs.decorations)\n      if ('schema' in attrs) props.schema = Schema.create(attrs.schema)\n      return props\n    }\n\n    throw new Error(\n      `\\`Value.createProperties\\` only accepts objects or values, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Value` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @param {Object} options\n   *   @property {Boolean} normalize\n   *   @property {Array} plugins\n   * @return {Value}\n   */\n\n  static fromJSON(object, options = {}) {\n    let { document = {}, selection = {}, schema = {} } = object\n\n    let data = new Map()\n\n    document = Document.fromJSON(document)\n    selection = Range.fromJSON(selection)\n    schema = Schema.fromJSON(schema)\n\n    // Allow plugins to set a default value for `data`.\n    if (options.plugins) {\n      for (const plugin of options.plugins) {\n        if (plugin.data) data = data.merge(plugin.data)\n      }\n    }\n\n    // Then merge in the `data` provided.\n    if ('data' in object) {\n      data = data.merge(object.data)\n    }\n\n    if (selection.isUnset) {\n      const text = document.getFirstText()\n      if (text) selection = selection.collapseToStartOf(text)\n    }\n\n    let value = new Value({\n      data,\n      document,\n      selection,\n      schema,\n    })\n\n    if (options.normalize !== false) {\n      value = value.change({ save: false }).normalize().value\n    }\n\n    return value\n  }\n\n  /**\n   * Alias `fromJS`.\n   */\n\n  static fromJS = Value.fromJSON\n\n  /**\n   * Check if a `value` is a `Value`.\n   *\n   * @param {Any} value\n   * @return {Boolean}\n   */\n\n  static isValue(value) {\n    return !!(value && value[MODEL_TYPES.VALUE])\n  }\n\n  /**\n   * Object.\n   *\n   * @return {String}\n   */\n\n  get object() {\n    return 'value'\n  }\n\n  get kind() {\n    logger.deprecate(\n      'slate@0.32.0',\n      'The `kind` property of Slate objects has been renamed to `object`.'\n    )\n    return this.object\n  }\n\n  /**\n   * Are there undoable events?\n   *\n   * @return {Boolean}\n   */\n\n  get hasUndos() {\n    return this.history.undos.size > 0\n  }\n\n  /**\n   * Are there redoable events?\n   *\n   * @return {Boolean}\n   */\n\n  get hasRedos() {\n    return this.history.redos.size > 0\n  }\n\n  /**\n   * Is the current selection blurred?\n   *\n   * @return {Boolean}\n   */\n\n  get isBlurred() {\n    return this.selection.isBlurred\n  }\n\n  /**\n   * Is the current selection focused?\n   *\n   * @return {Boolean}\n   */\n\n  get isFocused() {\n    return this.selection.isFocused\n  }\n\n  /**\n   * Is the current selection collapsed?\n   *\n   * @return {Boolean}\n   */\n\n  get isCollapsed() {\n    return this.selection.isCollapsed\n  }\n\n  /**\n   * Is the current selection expanded?\n   *\n   * @return {Boolean}\n   */\n\n  get isExpanded() {\n    return this.selection.isExpanded\n  }\n\n  /**\n   * Is the current selection backward?\n   *\n   * @return {Boolean} isBackward\n   */\n\n  get isBackward() {\n    return this.selection.isBackward\n  }\n\n  /**\n   * Is the current selection forward?\n   *\n   * @return {Boolean}\n   */\n\n  get isForward() {\n    return this.selection.isForward\n  }\n\n  /**\n   * Get the current start key.\n   *\n   * @return {String}\n   */\n\n  get startKey() {\n    return this.selection.startKey\n  }\n\n  /**\n   * Get the current end key.\n   *\n   * @return {String}\n   */\n\n  get endKey() {\n    return this.selection.endKey\n  }\n\n  /**\n   * Get the current start offset.\n   *\n   * @return {String}\n   */\n\n  get startOffset() {\n    return this.selection.startOffset\n  }\n\n  /**\n   * Get the current end offset.\n   *\n   * @return {String}\n   */\n\n  get endOffset() {\n    return this.selection.endOffset\n  }\n\n  /**\n   * Get the current anchor key.\n   *\n   * @return {String}\n   */\n\n  get anchorKey() {\n    return this.selection.anchorKey\n  }\n\n  /**\n   * Get the current focus key.\n   *\n   * @return {String}\n   */\n\n  get focusKey() {\n    return this.selection.focusKey\n  }\n\n  /**\n   * Get the current anchor offset.\n   *\n   * @return {String}\n   */\n\n  get anchorOffset() {\n    return this.selection.anchorOffset\n  }\n\n  /**\n   * Get the current focus offset.\n   *\n   * @return {String}\n   */\n\n  get focusOffset() {\n    return this.selection.focusOffset\n  }\n\n  /**\n   * Get the current start text node's closest block parent.\n   *\n   * @return {Block}\n   */\n\n  get startBlock() {\n    return this.startKey && this.document.getClosestBlock(this.startKey)\n  }\n\n  /**\n   * Get the current end text node's closest block parent.\n   *\n   * @return {Block}\n   */\n\n  get endBlock() {\n    return this.endKey && this.document.getClosestBlock(this.endKey)\n  }\n\n  /**\n   * Get the current anchor text node's closest block parent.\n   *\n   * @return {Block}\n   */\n\n  get anchorBlock() {\n    return this.anchorKey && this.document.getClosestBlock(this.anchorKey)\n  }\n\n  /**\n   * Get the current focus text node's closest block parent.\n   *\n   * @return {Block}\n   */\n\n  get focusBlock() {\n    return this.focusKey && this.document.getClosestBlock(this.focusKey)\n  }\n\n  /**\n   * Get the current start text node's closest inline parent.\n   *\n   * @return {Inline}\n   */\n\n  get startInline() {\n    return this.startKey && this.document.getClosestInline(this.startKey)\n  }\n\n  /**\n   * Get the current end text node's closest inline parent.\n   *\n   * @return {Inline}\n   */\n\n  get endInline() {\n    return this.endKey && this.document.getClosestInline(this.endKey)\n  }\n\n  /**\n   * Get the current anchor text node's closest inline parent.\n   *\n   * @return {Inline}\n   */\n\n  get anchorInline() {\n    return this.anchorKey && this.document.getClosestInline(this.anchorKey)\n  }\n\n  /**\n   * Get the current focus text node's closest inline parent.\n   *\n   * @return {Inline}\n   */\n\n  get focusInline() {\n    return this.focusKey && this.document.getClosestInline(this.focusKey)\n  }\n\n  /**\n   * Get the current start text node.\n   *\n   * @return {Text}\n   */\n\n  get startText() {\n    return this.startKey && this.document.getDescendant(this.startKey)\n  }\n\n  /**\n   * Get the current end node.\n   *\n   * @return {Text}\n   */\n\n  get endText() {\n    return this.endKey && this.document.getDescendant(this.endKey)\n  }\n\n  /**\n   * Get the current anchor node.\n   *\n   * @return {Text}\n   */\n\n  get anchorText() {\n    return this.anchorKey && this.document.getDescendant(this.anchorKey)\n  }\n\n  /**\n   * Get the current focus node.\n   *\n   * @return {Text}\n   */\n\n  get focusText() {\n    return this.focusKey && this.document.getDescendant(this.focusKey)\n  }\n\n  /**\n   * Get the next block node.\n   *\n   * @return {Block}\n   */\n\n  get nextBlock() {\n    return this.endKey && this.document.getNextBlock(this.endKey)\n  }\n\n  /**\n   * Get the previous block node.\n   *\n   * @return {Block}\n   */\n\n  get previousBlock() {\n    return this.startKey && this.document.getPreviousBlock(this.startKey)\n  }\n\n  /**\n   * Get the next inline node.\n   *\n   * @return {Inline}\n   */\n\n  get nextInline() {\n    return this.endKey && this.document.getNextInline(this.endKey)\n  }\n\n  /**\n   * Get the previous inline node.\n   *\n   * @return {Inline}\n   */\n\n  get previousInline() {\n    return this.startKey && this.document.getPreviousInline(this.startKey)\n  }\n\n  /**\n   * Get the next text node.\n   *\n   * @return {Text}\n   */\n\n  get nextText() {\n    return this.endKey && this.document.getNextText(this.endKey)\n  }\n\n  /**\n   * Get the previous text node.\n   *\n   * @return {Text}\n   */\n\n  get previousText() {\n    return this.startKey && this.document.getPreviousText(this.startKey)\n  }\n\n  /**\n   * Get the characters in the current selection.\n   *\n   * @return {List<Character>}\n   */\n\n  get characters() {\n    return this.selection.isUnset\n      ? new List()\n      : this.document.getCharactersAtRange(this.selection)\n  }\n\n  /**\n   * Get the marks of the current selection.\n   *\n   * @return {Set<Mark>}\n   */\n\n  get marks() {\n    return this.selection.isUnset\n      ? new Set()\n      : this.selection.marks || this.document.getMarksAtRange(this.selection)\n  }\n\n  /**\n   * Get the active marks of the current selection.\n   *\n   * @return {Set<Mark>}\n   */\n\n  get activeMarks() {\n    return this.selection.isUnset\n      ? new Set()\n      : this.selection.marks ||\n          this.document.getActiveMarksAtRange(this.selection)\n  }\n\n  /**\n   * Get the block nodes in the current selection.\n   *\n   * @return {List<Block>}\n   */\n\n  get blocks() {\n    return this.selection.isUnset\n      ? new List()\n      : this.document.getBlocksAtRange(this.selection)\n  }\n\n  /**\n   * Get the fragment of the current selection.\n   *\n   * @return {Document}\n   */\n\n  get fragment() {\n    return this.selection.isUnset\n      ? Document.create()\n      : this.document.getFragmentAtRange(this.selection)\n  }\n\n  /**\n   * Get the inline nodes in the current selection.\n   *\n   * @return {List<Inline>}\n   */\n\n  get inlines() {\n    return this.selection.isUnset\n      ? new List()\n      : this.document.getInlinesAtRange(this.selection)\n  }\n\n  /**\n   * Get the text nodes in the current selection.\n   *\n   * @return {List<Text>}\n   */\n\n  get texts() {\n    return this.selection.isUnset\n      ? new List()\n      : this.document.getTextsAtRange(this.selection)\n  }\n\n  /**\n   * Check whether the selection is empty.\n   *\n   * @return {Boolean}\n   */\n\n  get isEmpty() {\n    if (this.isCollapsed) return true\n    if (this.endOffset != 0 && this.startOffset != 0) return false\n    return this.fragment.isEmpty\n  }\n\n  /**\n   * Check whether the selection is collapsed in a void node.\n   *\n   * @return {Boolean}\n   */\n\n  get isInVoid() {\n    if (this.isExpanded) return false\n    return this.document.hasVoidParent(this.startKey)\n  }\n\n  /**\n   * Create a new `Change` with the current value as a starting point.\n   *\n   * @param {Object} attrs\n   * @return {Change}\n   */\n\n  change(attrs = {}) {\n    return new Change({ ...attrs, value: this })\n  }\n\n  /**\n   * Return a JSON representation of the value.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      document: this.document.toJSON(options),\n    }\n\n    if (options.preserveData) {\n      object.data = this.data.toJSON()\n    }\n\n    if (options.preserveDecorations) {\n      object.decorations = this.decorations\n        ? this.decorations.toArray().map(d => d.toJSON())\n        : null\n    }\n\n    if (options.preserveHistory) {\n      object.history = this.history.toJSON()\n    }\n\n    if (options.preserveSelection) {\n      object.selection = this.selection.toJSON()\n    }\n\n    if (options.preserveSchema) {\n      object.schema = this.schema.toJSON()\n    }\n\n    if (options.preserveSelection && !options.preserveKeys) {\n      const { document, selection } = this\n      object.selection.anchorPath = selection.isSet\n        ? document.getPath(selection.anchorKey)\n        : null\n      object.selection.focusPath = selection.isSet\n        ? document.getPath(selection.focusKey)\n        : null\n      delete object.selection.anchorKey\n      delete object.selection.focusKey\n    }\n\n    return object\n  }\n\n  /**\n   * Alias `toJS`.\n   */\n\n  toJS(options) {\n    return this.toJSON(options)\n  }\n}\n\n/**\n * Attach a pseudo-symbol for type checking.\n */\n\nValue.prototype[MODEL_TYPES.VALUE] = true\n\n/**\n * Export.\n */\n\nexport default Value\n","import isPlainObject from 'is-plain-object'\nimport logger from 'slate-dev-logger'\nimport { List, Record } from 'immutable'\n\nimport MODEL_TYPES from '../constants/model-types'\nimport OPERATION_ATTRIBUTES from '../constants/operation-attributes'\nimport Mark from './mark'\nimport Node from './node'\nimport Range from './range'\nimport Value from './value'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  length: undefined,\n  mark: undefined,\n  marks: undefined,\n  newPath: undefined,\n  node: undefined,\n  offset: undefined,\n  path: undefined,\n  position: undefined,\n  properties: undefined,\n  selection: undefined,\n  target: undefined,\n  text: undefined,\n  type: undefined,\n  value: undefined,\n}\n\n/**\n * Operation.\n *\n * @type {Operation}\n */\n\nclass Operation extends Record(DEFAULTS) {\n  /**\n   * Create a new `Operation` with `attrs`.\n   *\n   * @param {Object|Array|List|String|Operation} attrs\n   * @return {Operation}\n   */\n\n  static create(attrs = {}) {\n    if (Operation.isOperation(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      return Operation.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Operation.create\\` only accepts objects or operations, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Operations` from `elements`.\n   *\n   * @param {Array<Operation|Object>|List<Operation|Object>} elements\n   * @return {List<Operation>}\n   */\n\n  static createList(elements = []) {\n    if (List.isList(elements) || Array.isArray(elements)) {\n      const list = new List(elements.map(Operation.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Operation.createList\\` only accepts arrays or lists, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a `Operation` from a JSON `object`.\n   *\n   * @param {Object|Operation} object\n   * @return {Operation}\n   */\n\n  static fromJSON(object) {\n    if (Operation.isOperation(object)) {\n      return object\n    }\n\n    const { type, value } = object\n    const ATTRIBUTES = OPERATION_ATTRIBUTES[type]\n    const attrs = { type }\n\n    if (!ATTRIBUTES) {\n      throw new Error(\n        `\\`Operation.fromJSON\\` was passed an unrecognized operation type: \"${type}\"`\n      )\n    }\n\n    for (const key of ATTRIBUTES) {\n      let v = object[key]\n\n      if (v === undefined) {\n        // Skip keys for objects that should not be serialized, and are only used\n        // for providing the local-only invert behavior for the history stack.\n        if (key == 'document') continue\n        if (key == 'selection') continue\n        if (key == 'value') continue\n        if (key == 'node' && type != 'insert_node') continue\n\n        throw new Error(\n          `\\`Operation.fromJSON\\` was passed a \"${type}\" operation without the required \"${key}\" attribute.`\n        )\n      }\n\n      if (key == 'mark') {\n        v = Mark.create(v)\n      }\n\n      if (key == 'marks' && v != null) {\n        v = Mark.createSet(v)\n      }\n\n      if (key == 'node') {\n        v = Node.create(v)\n      }\n\n      if (key == 'selection') {\n        v = Range.create(v)\n      }\n\n      if (key == 'value') {\n        v = Value.create(v)\n      }\n\n      if (key == 'properties' && type == 'merge_node') {\n        v = Node.createProperties(v)\n      }\n\n      if (key == 'properties' && type == 'set_mark') {\n        v = Mark.createProperties(v)\n      }\n\n      if (key == 'properties' && type == 'set_node') {\n        v = Node.createProperties(v)\n      }\n\n      if (key == 'properties' && type == 'set_selection') {\n        const { anchorKey, focusKey, ...rest } = v\n        v = Range.createProperties(rest)\n\n        if (anchorKey !== undefined) {\n          v.anchorPath =\n            anchorKey === null ? null : value.document.getPath(anchorKey)\n        }\n\n        if (focusKey !== undefined) {\n          v.focusPath =\n            focusKey === null ? null : value.document.getPath(focusKey)\n        }\n      }\n\n      if (key == 'properties' && type == 'set_value') {\n        v = Value.createProperties(v)\n      }\n\n      if (key == 'properties' && type == 'split_node') {\n        v = Node.createProperties(v)\n      }\n\n      attrs[key] = v\n    }\n\n    const node = new Operation(attrs)\n    return node\n  }\n\n  /**\n   * Alias `fromJS`.\n   */\n\n  static fromJS = Operation.fromJSON\n\n  /**\n   * Check if `any` is a `Operation`.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isOperation(any) {\n    return !!(any && any[MODEL_TYPES.OPERATION])\n  }\n\n  /**\n   * Check if `any` is a list of operations.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isOperationList(any) {\n    return List.isList(any) && any.every(item => Operation.isOperation(item))\n  }\n\n  /**\n   * Object.\n   *\n   * @return {String}\n   */\n\n  get object() {\n    return 'operation'\n  }\n\n  get kind() {\n    logger.deprecate(\n      'slate@0.32.0',\n      'The `kind` property of Slate objects has been renamed to `object`.'\n    )\n    return this.object\n  }\n\n  /**\n   * Return a JSON representation of the operation.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const { object, type } = this\n    const json = { object, type }\n    const ATTRIBUTES = OPERATION_ATTRIBUTES[type]\n\n    for (const key of ATTRIBUTES) {\n      let value = this[key]\n\n      // Skip keys for objects that should not be serialized, and are only used\n      // for providing the local-only invert behavior for the history stack.\n      if (key == 'document') continue\n      if (key == 'selection') continue\n      if (key == 'value') continue\n      if (key == 'node' && type != 'insert_node') continue\n\n      if (key == 'mark' || key == 'marks' || key == 'node') {\n        value = value.toJSON()\n      }\n\n      if (key == 'properties' && type == 'merge_node') {\n        const v = {}\n        if ('data' in value) v.data = value.data.toJS()\n        if ('type' in value) v.type = value.type\n        value = v\n      }\n\n      if (key == 'properties' && type == 'set_mark') {\n        const v = {}\n        if ('data' in value) v.data = value.data.toJS()\n        if ('type' in value) v.type = value.type\n        value = v\n      }\n\n      if (key == 'properties' && type == 'set_node') {\n        const v = {}\n        if ('data' in value) v.data = value.data.toJS()\n        if ('isVoid' in value) v.isVoid = value.isVoid\n        if ('type' in value) v.type = value.type\n        value = v\n      }\n\n      if (key == 'properties' && type == 'set_selection') {\n        const v = {}\n        if ('anchorOffset' in value) v.anchorOffset = value.anchorOffset\n        if ('anchorPath' in value) v.anchorPath = value.anchorPath\n        if ('focusOffset' in value) v.focusOffset = value.focusOffset\n        if ('focusPath' in value) v.focusPath = value.focusPath\n        if ('isBackward' in value) v.isBackward = value.isBackward\n        if ('isFocused' in value) v.isFocused = value.isFocused\n        if ('marks' in value)\n          v.marks = value.marks == null ? null : value.marks.toJSON()\n        value = v\n      }\n\n      if (key == 'properties' && type == 'set_value') {\n        const v = {}\n        if ('data' in value) v.data = value.data.toJS()\n        if ('decorations' in value) v.decorations = value.decorations.toJS()\n        if ('schema' in value) v.schema = value.schema.toJS()\n        value = v\n      }\n\n      if (key == 'properties' && type == 'split_node') {\n        const v = {}\n        if ('data' in value) v.data = value.data.toJS()\n        if ('type' in value) v.type = value.type\n        value = v\n      }\n\n      json[key] = value\n    }\n\n    return json\n  }\n\n  /**\n   * Alias `toJS`.\n   */\n\n  toJS(options) {\n    return this.toJSON(options)\n  }\n}\n\n/**\n * Attach a pseudo-symbol for type checking.\n */\n\nOperation.prototype[MODEL_TYPES.OPERATION] = true\n\n/**\n * Export.\n *\n * @type {Operation}\n */\n\nexport default Operation\n","import Debug from 'debug'\nimport pick from 'lodash/pick'\n\nimport Operation from '../models/operation'\n\n/**\n * Debug.\n *\n * @type {Function}\n */\n\nconst debug = Debug('slate:operation:invert')\n\n/**\n * Invert an `op`.\n *\n * @param {Object} op\n * @return {Object}\n */\n\nfunction invertOperation(op) {\n  op = Operation.create(op)\n  const { type } = op\n  debug(type, op)\n\n  /**\n   * Insert node.\n   */\n\n  if (type == 'insert_node') {\n    const inverse = op.set('type', 'remove_node')\n    return inverse\n  }\n\n  /**\n   * Remove node.\n   */\n\n  if (type == 'remove_node') {\n    const inverse = op.set('type', 'insert_node')\n    return inverse\n  }\n\n  /**\n   * Move node.\n   */\n\n  if (type == 'move_node') {\n    const { newPath, path } = op\n    let inversePath = newPath\n    let inverseNewPath = path\n\n    const pathLast = path.length - 1\n    const newPathLast = newPath.length - 1\n\n    // If the node's old position was a left sibling of an ancestor of\n    // its new position, we need to adjust part of the path by -1.\n    if (\n      path.length < inversePath.length &&\n      path.slice(0, pathLast).every((e, i) => e == inversePath[i]) &&\n      path[pathLast] < inversePath[pathLast]\n    ) {\n      inversePath = inversePath\n        .slice(0, pathLast)\n        .concat([inversePath[pathLast] - 1])\n        .concat(inversePath.slice(pathLast + 1, inversePath.length))\n    }\n\n    // If the node's new position is an ancestor of the old position,\n    // or a left sibling of an ancestor of its old position, we need\n    // to adjust part of the path by 1.\n    if (\n      newPath.length < inverseNewPath.length &&\n      newPath.slice(0, newPathLast).every((e, i) => e == inverseNewPath[i]) &&\n      newPath[newPathLast] <= inverseNewPath[newPathLast]\n    ) {\n      inverseNewPath = inverseNewPath\n        .slice(0, newPathLast)\n        .concat([inverseNewPath[newPathLast] + 1])\n        .concat(inverseNewPath.slice(newPathLast + 1, inverseNewPath.length))\n    }\n\n    const inverse = op.set('path', inversePath).set('newPath', inverseNewPath)\n    return inverse\n  }\n\n  /**\n   * Merge node.\n   */\n\n  if (type == 'merge_node') {\n    const { path } = op\n    const { length } = path\n    const last = length - 1\n    const inversePath = path.slice(0, last).concat([path[last] - 1])\n    const inverse = op.set('type', 'split_node').set('path', inversePath)\n    return inverse\n  }\n\n  /**\n   * Split node.\n   */\n\n  if (type == 'split_node') {\n    const { path } = op\n    const { length } = path\n    const last = length - 1\n    const inversePath = path.slice(0, last).concat([path[last] + 1])\n    const inverse = op.set('type', 'merge_node').set('path', inversePath)\n    return inverse\n  }\n\n  /**\n   * Set node.\n   */\n\n  if (type == 'set_node') {\n    const { properties, node } = op\n    const inverseNode = node.merge(properties)\n    const inverseProperties = pick(node, Object.keys(properties))\n    const inverse = op\n      .set('node', inverseNode)\n      .set('properties', inverseProperties)\n    return inverse\n  }\n\n  /**\n   * Insert text.\n   */\n\n  if (type == 'insert_text') {\n    const inverse = op.set('type', 'remove_text')\n    return inverse\n  }\n\n  /**\n   * Remove text.\n   */\n\n  if (type == 'remove_text') {\n    const inverse = op.set('type', 'insert_text')\n    return inverse\n  }\n\n  /**\n   * Add mark.\n   */\n\n  if (type == 'add_mark') {\n    const inverse = op.set('type', 'remove_mark')\n    return inverse\n  }\n\n  /**\n   * Remove mark.\n   */\n\n  if (type == 'remove_mark') {\n    const inverse = op.set('type', 'add_mark')\n    return inverse\n  }\n\n  /**\n   * Set mark.\n   */\n\n  if (type == 'set_mark') {\n    const { properties, mark } = op\n    const inverseMark = mark.merge(properties)\n    const inverseProperties = pick(mark, Object.keys(properties))\n    const inverse = op\n      .set('mark', inverseMark)\n      .set('properties', inverseProperties)\n    return inverse\n  }\n\n  /**\n   * Set selection.\n   */\n\n  if (type == 'set_selection') {\n    const { properties, selection, value } = op\n    const { anchorPath, focusPath, ...props } = properties\n    const { document } = value\n\n    if (anchorPath !== undefined) {\n      props.anchorKey =\n        anchorPath === null ? null : document.assertPath(anchorPath).key\n    }\n\n    if (focusPath !== undefined) {\n      props.focusKey =\n        focusPath === null ? null : document.assertPath(focusPath).key\n    }\n\n    const inverseSelection = selection.merge(props)\n    const inverseProps = pick(selection, Object.keys(props))\n\n    if (anchorPath !== undefined) {\n      inverseProps.anchorPath =\n        inverseProps.anchorKey === null\n          ? null\n          : document.getPath(inverseProps.anchorKey)\n      delete inverseProps.anchorKey\n    }\n\n    if (focusPath !== undefined) {\n      inverseProps.focusPath =\n        inverseProps.focusKey === null\n          ? null\n          : document.getPath(inverseProps.focusKey)\n      delete inverseProps.focusKey\n    }\n\n    const inverse = op\n      .set('selection', inverseSelection)\n      .set('properties', inverseProps)\n    return inverse\n  }\n\n  /**\n   * Set value.\n   */\n\n  if (type == 'set_value') {\n    const { properties, value } = op\n    const inverseValue = value.merge(properties)\n    const inverseProperties = pick(value, Object.keys(properties))\n    const inverse = op\n      .set('value', inverseValue)\n      .set('properties', inverseProperties)\n    return inverse\n  }\n}\n\n/**\n * Export.\n *\n * @type {Function}\n */\n\nexport default invertOperation\n","import invert from '../operations/invert'\nimport omit from 'lodash/omit'\n\n/**\n * Changes.\n *\n * @type {Object}\n */\n\nconst Changes = {}\n\n/**\n * Redo to the next value in the history.\n *\n * @param {Change} change\n */\n\nChanges.redo = change => {\n  let { value } = change\n  let { history } = value\n  if (!history) return\n\n  let { undos, redos } = history\n  const next = redos.peek()\n  if (!next) return\n\n  // Shift the next value into the undo stack.\n  redos = redos.pop()\n  undos = undos.push(next)\n\n  // Replay the next operations.\n  next.forEach(op => {\n    const { type, properties } = op\n\n    // When the operation mutates the selection, omit its `isFocused` value to\n    // prevent the editor focus from changing during redoing.\n    if (type == 'set_selection') {\n      op = op.set('properties', omit(properties, 'isFocused'))\n    }\n\n    change.applyOperation(op, { save: false })\n  })\n\n  // Update the history.\n  value = change.value\n  history = history.set('undos', undos).set('redos', redos)\n  value = value.set('history', history)\n  change.value = value\n}\n\n/**\n * Undo the previous operations in the history.\n *\n * @param {Change} change\n */\n\nChanges.undo = change => {\n  let { value } = change\n  let { history } = value\n  if (!history) return\n\n  let { undos, redos } = history\n  const previous = undos.peek()\n  if (!previous) return\n\n  // Shift the previous operations into the redo stack.\n  undos = undos.pop()\n  redos = redos.push(previous)\n\n  // Replay the inverse of the previous operations.\n  previous\n    .slice()\n    .reverse()\n    .map(invert)\n    .forEach(inverse => {\n      const { type, properties } = inverse\n\n      // When the operation mutates the selection, omit its `isFocused` value to\n      // prevent the editor focus from changing during undoing.\n      if (type == 'set_selection') {\n        inverse = inverse.set('properties', omit(properties, 'isFocused'))\n      }\n\n      change.applyOperation(inverse, { save: false })\n    })\n\n  // Update the history.\n  value = change.value\n  history = history.set('undos', undos).set('redos', redos)\n  value = value.set('history', history)\n  change.value = value\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Changes\n","import isEmpty from 'is-empty'\nimport pick from 'lodash/pick'\n\nimport Range from '../models/range'\n\n/**\n * Changes.\n *\n * @type {Object}\n */\n\nconst Changes = {}\n\n/**\n * Set `properties` on the selection.\n *\n * @param {Change} change\n * @param {Object} properties\n */\n\nChanges.select = (change, properties, options = {}) => {\n  properties = Range.createProperties(properties)\n\n  const { snapshot = false } = options\n  const { value } = change\n  const { document, selection } = value\n  const props = {}\n  const sel = selection.toJSON()\n  const next = selection.merge(properties).normalize(document)\n  properties = pick(next, Object.keys(properties))\n\n  // Remove any properties that are already equal to the current selection. And\n  // create a dictionary of the previous values for all of the properties that\n  // are being changed, for the inverse operation.\n  for (const k in properties) {\n    if (snapshot == false && properties[k] == sel[k]) continue\n    props[k] = properties[k]\n  }\n\n  // If the selection moves, clear any marks, unless the new selection\n  // properties change the marks in some way.\n  const moved = ['anchorKey', 'anchorOffset', 'focusKey', 'focusOffset'].some(\n    p => props.hasOwnProperty(p)\n  )\n\n  if (sel.marks && properties.marks == sel.marks && moved) {\n    props.marks = null\n  }\n\n  // If there are no new properties to set, abort.\n  if (isEmpty(props)) {\n    return\n  }\n\n  // Apply the operation.\n  change.applyOperation(\n    {\n      type: 'set_selection',\n      value,\n      properties: props,\n      selection: sel,\n    },\n    snapshot ? { skip: false, merge: false } : {}\n  )\n}\n\n/**\n * Select the whole document.\n *\n * @param {Change} change\n */\n\nChanges.selectAll = change => {\n  const { value } = change\n  const { document, selection } = value\n  const next = selection.moveToRangeOf(document)\n  change.select(next)\n}\n\n/**\n * Snapshot the current selection.\n *\n * @param {Change} change\n */\n\nChanges.snapshotSelection = change => {\n  const { value } = change\n  const { selection } = value\n  change.select(selection, { snapshot: true })\n}\n\n/**\n * Move the anchor point backward, accounting for being at the start of a block.\n *\n * @param {Change} change\n */\n\nChanges.moveAnchorCharBackward = change => {\n  const { value } = change\n  const { document, selection, anchorText, anchorBlock } = value\n  const { anchorOffset } = selection\n  const previousText = document.getPreviousText(anchorText.key)\n  const isInVoid = document.hasVoidParent(anchorText.key)\n  const isPreviousInVoid =\n    previousText && document.hasVoidParent(previousText.key)\n\n  if (!isInVoid && anchorOffset > 0) {\n    change.moveAnchor(-1)\n    return\n  }\n\n  if (!previousText) {\n    return\n  }\n\n  change.moveAnchorToEndOf(previousText)\n\n  if (!isInVoid && !isPreviousInVoid && anchorBlock.hasNode(previousText.key)) {\n    change.moveAnchor(-1)\n  }\n}\n\n/**\n * Move the anchor point forward, accounting for being at the end of a block.\n *\n * @param {Change} change\n */\n\nChanges.moveAnchorCharForward = change => {\n  const { value } = change\n  const { document, selection, anchorText, anchorBlock } = value\n  const { anchorOffset } = selection\n  const nextText = document.getNextText(anchorText.key)\n  const isInVoid = document.hasVoidParent(anchorText.key)\n  const isNextInVoid = nextText && document.hasVoidParent(nextText.key)\n\n  if (!isInVoid && anchorOffset < anchorText.text.length) {\n    change.moveAnchor(1)\n    return\n  }\n\n  if (!nextText) {\n    return\n  }\n\n  change.moveAnchorToStartOf(nextText)\n\n  if (!isInVoid && !isNextInVoid && anchorBlock.hasNode(nextText.key)) {\n    change.moveAnchor(1)\n  }\n}\n\n/**\n * Move the focus point backward, accounting for being at the start of a block.\n *\n * @param {Change} change\n */\n\nChanges.moveFocusCharBackward = change => {\n  const { value } = change\n  const { document, selection, focusText, focusBlock } = value\n  const { focusOffset } = selection\n  const previousText = document.getPreviousText(focusText.key)\n  const isInVoid = document.hasVoidParent(focusText.key)\n  const isPreviousInVoid =\n    previousText && document.hasVoidParent(previousText.key)\n\n  if (!isInVoid && focusOffset > 0) {\n    change.moveFocus(-1)\n    return\n  }\n\n  if (!previousText) {\n    return\n  }\n\n  change.moveFocusToEndOf(previousText)\n\n  if (!isInVoid && !isPreviousInVoid && focusBlock.hasNode(previousText.key)) {\n    change.moveFocus(-1)\n  }\n}\n\n/**\n * Move the focus point forward, accounting for being at the end of a block.\n *\n * @param {Change} change\n */\n\nChanges.moveFocusCharForward = change => {\n  const { value } = change\n  const { document, selection, focusText, focusBlock } = value\n  const { focusOffset } = selection\n  const nextText = document.getNextText(focusText.key)\n  const isInVoid = document.hasVoidParent(focusText.key)\n  const isNextInVoid = nextText && document.hasVoidParent(nextText.key)\n\n  if (!isInVoid && focusOffset < focusText.text.length) {\n    change.moveFocus(1)\n    return\n  }\n\n  if (!nextText) {\n    return\n  }\n\n  change.moveFocusToStartOf(nextText)\n\n  if (!isInVoid && !isNextInVoid && focusBlock.hasNode(nextText.key)) {\n    change.moveFocus(1)\n  }\n}\n\n/**\n * Mix in move methods.\n */\n\nconst MOVE_DIRECTIONS = ['Forward', 'Backward']\n\nMOVE_DIRECTIONS.forEach(direction => {\n  const anchor = `moveAnchorChar${direction}`\n  const focus = `moveFocusChar${direction}`\n\n  Changes[`moveChar${direction}`] = change => {\n    change[anchor]()[focus]()\n  }\n\n  Changes[`moveStartChar${direction}`] = change => {\n    if (change.value.isBackward) {\n      change[focus]()\n    } else {\n      change[anchor]()\n    }\n  }\n\n  Changes[`moveEndChar${direction}`] = change => {\n    if (change.value.isBackward) {\n      change[anchor]()\n    } else {\n      change[focus]()\n    }\n  }\n\n  Changes[`extendChar${direction}`] = change => {\n    change[`moveFocusChar${direction}`]()\n  }\n\n  Changes[`collapseChar${direction}`] = change => {\n    const collapse =\n      direction == 'Forward' ? 'collapseToEnd' : 'collapseToStart'\n    change[collapse]()[`moveChar${direction}`]()\n  }\n})\n\n/**\n * Mix in alias methods.\n */\n\nconst ALIAS_METHODS = [\n  ['collapseLineBackward', 'collapseToStartOfBlock'],\n  ['collapseLineForward', 'collapseToEndOfBlock'],\n  ['extendLineBackward', 'extendToStartOfBlock'],\n  ['extendLineForward', 'extendToEndOfBlock'],\n]\n\nALIAS_METHODS.forEach(([alias, method]) => {\n  Changes[alias] = function(change, ...args) {\n    change[method](change, ...args)\n  }\n})\n\n/**\n * Mix in selection changes that are just a proxy for the selection method.\n */\n\nconst PROXY_TRANSFORMS = [\n  'blur',\n  'collapseTo',\n  'collapseToAnchor',\n  'collapseToEnd',\n  'collapseToEndOf',\n  'collapseToFocus',\n  'collapseToStart',\n  'collapseToStartOf',\n  'extend',\n  'extendTo',\n  'extendToEndOf',\n  'extendToStartOf',\n  'flip',\n  'focus',\n  'move',\n  'moveAnchor',\n  'moveAnchorOffsetTo',\n  'moveAnchorTo',\n  'moveAnchorToEndOf',\n  'moveAnchorToStartOf',\n  'moveEnd',\n  'moveEndOffsetTo',\n  'moveEndTo',\n  'moveFocus',\n  'moveFocusOffsetTo',\n  'moveFocusTo',\n  'moveFocusToEndOf',\n  'moveFocusToStartOf',\n  'moveOffsetsTo',\n  'moveStart',\n  'moveStartOffsetTo',\n  'moveStartTo',\n  'moveTo',\n  'moveToEnd',\n  'moveToEndOf',\n  'moveToRangeOf',\n  'moveToStart',\n  'moveToStartOf',\n  'deselect',\n]\n\nPROXY_TRANSFORMS.forEach(method => {\n  Changes[method] = (change, ...args) => {\n    const normalize = method != 'deselect'\n    const { value } = change\n    const { document, selection } = value\n    let next = selection[method](...args)\n    if (normalize) next = next.normalize(document)\n    change.select(next)\n  }\n})\n\n/**\n * Mix in node-related changes.\n */\n\nconst PREFIXES = [\n  'moveTo',\n  'moveAnchorTo',\n  'moveFocusTo',\n  'moveStartTo',\n  'moveEndTo',\n  'collapseTo',\n  'extendTo',\n]\n\nconst DIRECTIONS = ['Next', 'Previous']\n\nconst OBJECTS = ['Block', 'Inline', 'Text']\n\nPREFIXES.forEach(prefix => {\n  const edges = ['Start', 'End']\n\n  if (prefix == 'moveTo') {\n    edges.push('Range')\n  }\n\n  edges.forEach(edge => {\n    const method = `${prefix}${edge}Of`\n\n    OBJECTS.forEach(object => {\n      const getNode = object == 'Text' ? 'getNode' : `getClosest${object}`\n\n      Changes[`${method}${object}`] = change => {\n        const { value } = change\n        const { document, selection } = value\n        const node = document[getNode](selection.startKey)\n        if (!node) return\n        change[method](node)\n      }\n\n      DIRECTIONS.forEach(direction => {\n        const getDirectionNode = `get${direction}${object}`\n        const directionKey = direction == 'Next' ? 'startKey' : 'endKey'\n\n        Changes[`${method}${direction}${object}`] = change => {\n          const { value } = change\n          const { document, selection } = value\n          const node = document[getNode](selection[directionKey])\n          if (!node) return\n          const target = document[getDirectionNode](node.key)\n          if (!target) return\n          change[method](target)\n        }\n      })\n    })\n  })\n})\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Changes\n","import Value from '../models/value'\n\n/**\n * Changes.\n *\n * @type {Object}\n */\n\nconst Changes = {}\n\n/**\n * Set `properties` on the value.\n *\n * @param {Change} change\n * @param {Object|Value} properties\n * @param {Object} options\n */\n\nChanges.setValue = (change, properties, options = {}) => {\n  properties = Value.createProperties(properties)\n  const { value } = change\n\n  change.applyOperation(\n    {\n      type: 'set_value',\n      properties,\n      value,\n    },\n    options\n  )\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Changes\n","/**\n * Changes.\n *\n * @type {Object}\n */\n\nconst Changes = {}\n\n/**\n * Normalize the value with its schema.\n *\n * @param {Change} change\n */\n\nChanges.normalize = change => {\n  change.normalizeDocument()\n}\n\n/**\n * Normalize the document with the value's schema.\n *\n * @param {Change} change\n */\n\nChanges.normalizeDocument = change => {\n  const { value } = change\n  const { document } = value\n  change.normalizeNodeByKey(document.key)\n}\n\n/**\n * Normalize a `node` and its children with the value's schema.\n *\n * @param {Change} change\n * @param {Node|String} key\n */\n\nChanges.normalizeNodeByKey = (change, key) => {\n  const { value } = change\n  let { document, schema } = value\n  const node = document.assertNode(key)\n\n  normalizeNodeAndChildren(change, node, schema)\n\n  document = change.value.document\n  const ancestors = document.getAncestors(key)\n  if (!ancestors) return\n\n  ancestors.forEach(ancestor => {\n    normalizeNode(change, ancestor, schema)\n  })\n}\n\n/**\n * Normalize a `node` and its children with a `schema`.\n *\n * @param {Change} change\n * @param {Node} node\n * @param {Schema} schema\n */\n\nfunction normalizeNodeAndChildren(change, node, schema) {\n  if (node.object == 'text') {\n    normalizeNode(change, node, schema)\n    return\n  }\n\n  let child = node.getFirstInvalidDescendant(schema)\n  let path = change.value.document.getPath(node.key)\n  while (node && child) {\n    normalizeNodeAndChildren(change, child, schema)\n    node = change.value.document.refindNode(path, node.key)\n    if (!node) {\n      path = []\n      child = null\n    } else {\n      path = change.value.document.refindPath(path, node.key)\n      child = node.getFirstInvalidDescendant(schema)\n    }\n  }\n\n  // Normalize the node itself if it still exists.\n  if (node) {\n    normalizeNode(change, node, schema)\n  }\n}\n\n/**\n * Normalize a `node` with a `schema`, but not its children.\n *\n * @param {Change} change\n * @param {Node} node\n * @param {Schema} schema\n */\n\nfunction normalizeNode(change, node, schema) {\n  const max = schema.stack.plugins.length + 1\n  let iterations = 0\n\n  function iterate(c, n) {\n    const normalize = n.validate(schema)\n    if (!normalize) return\n\n    // Run the `normalize` function to fix the node.\n    let path = c.value.document.getPath(n.key)\n    normalize(c)\n\n    // Re-find the node reference, in case it was updated. If the node no longer\n    // exists, we're done for this branch.\n    n = c.value.document.refindNode(path, n.key)\n    if (!n) return\n\n    path = c.value.document.refindPath(path, n.key)\n\n    // Increment the iterations counter, and check to make sure that we haven't\n    // exceeded the max. Without this check, it's easy for the `validate` or\n    // `normalize` function of a schema rule to be written incorrectly and for\n    // an infinite invalid loop to occur.\n    iterations++\n\n    if (iterations > max) {\n      throw new Error(\n        'A schema rule could not be validated after sufficient iterations. This is usually due to a `rule.validate` or `rule.normalize` function of a schema being incorrectly written, causing an infinite loop.'\n      )\n    }\n\n    // Otherwise, iterate again.\n    iterate(c, n)\n  }\n\n  iterate(change, node)\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Changes\n","import AtCurrentRange from './at-current-range'\nimport AtRange from './at-range'\nimport ByKey from './by-key'\nimport OnHistory from './on-history'\nimport OnSelection from './on-selection'\nimport OnValue from './on-value'\nimport WithSchema from './with-schema'\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default {\n  ...AtCurrentRange,\n  ...AtRange,\n  ...ByKey,\n  ...OnHistory,\n  ...OnSelection,\n  ...OnValue,\n  ...WithSchema,\n}\n","import Debug from 'debug'\n\nimport Operation from '../models/operation'\n\n/**\n * Debug.\n *\n * @type {Function}\n */\n\nconst debug = Debug('slate:operation:apply')\n\n/**\n * Applying functions.\n *\n * @type {Object}\n */\n\nconst APPLIERS = {\n  /**\n   * Add mark to text at `offset` and `length` in node by `path`.\n   *\n   * @param {Value} value\n   * @param {Operation} operation\n   * @return {Value}\n   */\n\n  add_mark(value, operation) {\n    const { path, offset, length, mark } = operation\n    let { document } = value\n    let node = document.assertPath(path)\n    node = node.addMark(offset, length, mark)\n    document = document.updateNode(node)\n    value = value.set('document', document)\n    return value\n  },\n\n  /**\n   * Insert a `node` at `index` in a node by `path`.\n   *\n   * @param {Value} value\n   * @param {Operation} operation\n   * @return {Value}\n   */\n\n  insert_node(value, operation) {\n    const { path, node } = operation\n    const index = path[path.length - 1]\n    const rest = path.slice(0, -1)\n    let { document } = value\n    let parent = document.assertPath(rest)\n    parent = parent.insertNode(index, node)\n    document = document.updateNode(parent)\n    value = value.set('document', document)\n    return value\n  },\n\n  /**\n   * Insert `text` at `offset` in node by `path`.\n   *\n   * @param {Value} value\n   * @param {Operation} operation\n   * @return {Value}\n   */\n\n  insert_text(value, operation) {\n    const { path, offset, text, marks } = operation\n    let { document, selection } = value\n    const { anchorKey, focusKey, anchorOffset, focusOffset } = selection\n    let node = document.assertPath(path)\n\n    // Update the document\n    node = node.insertText(offset, text, marks)\n    document = document.updateNode(node)\n\n    // Update the selection\n    if (anchorKey == node.key && anchorOffset >= offset) {\n      selection = selection.moveAnchor(text.length)\n    }\n    if (focusKey == node.key && focusOffset >= offset) {\n      selection = selection.moveFocus(text.length)\n    }\n\n    value = value.set('document', document).set('selection', selection)\n    return value\n  },\n\n  /**\n   * Merge a node at `path` with the previous node.\n   *\n   * @param {Value} value\n   * @param {Operation} operation\n   * @return {Value}\n   */\n\n  merge_node(value, operation) {\n    const { path } = operation\n    const withPath = path\n      .slice(0, path.length - 1)\n      .concat([path[path.length - 1] - 1])\n    let { document, selection } = value\n    const one = document.assertPath(withPath)\n    const two = document.assertPath(path)\n    let parent = document.getParent(one.key)\n    const oneIndex = parent.nodes.indexOf(one)\n    const twoIndex = parent.nodes.indexOf(two)\n\n    // Perform the merge in the document.\n    parent = parent.mergeNode(oneIndex, twoIndex)\n    document = document.updateNode(parent)\n\n    // If the nodes are text nodes and the selection is inside the second node\n    // update it to refer to the first node instead.\n    if (one.object == 'text') {\n      const { anchorKey, anchorOffset, focusKey, focusOffset } = selection\n      let normalize = false\n\n      if (anchorKey == two.key) {\n        selection = selection.moveAnchorTo(\n          one.key,\n          one.text.length + anchorOffset\n        )\n        normalize = true\n      }\n\n      if (focusKey == two.key) {\n        selection = selection.moveFocusTo(\n          one.key,\n          one.text.length + focusOffset\n        )\n        normalize = true\n      }\n\n      if (normalize) {\n        selection = selection.normalize(document)\n      }\n    }\n\n    // Update the document and selection.\n    value = value.set('document', document).set('selection', selection)\n    return value\n  },\n\n  /**\n   * Move a node by `path` to `newPath`.\n   *\n   * @param {Value} value\n   * @param {Operation} operation\n   * @return {Value}\n   */\n\n  move_node(value, operation) {\n    const { path, newPath } = operation\n    const newIndex = newPath[newPath.length - 1]\n    const newParentPath = newPath.slice(0, -1)\n    const oldParentPath = path.slice(0, -1)\n    const oldIndex = path[path.length - 1]\n    let { document } = value\n    const node = document.assertPath(path)\n\n    // Remove the node from its current parent.\n    let parent = document.getParent(node.key)\n    parent = parent.removeNode(oldIndex)\n    document = document.updateNode(parent)\n\n    // Find the new target...\n    let target\n\n    // If the old path and the rest of the new path are the same, then the new\n    // target is the old parent.\n    if (\n      oldParentPath.every((x, i) => x === newParentPath[i]) &&\n      oldParentPath.length === newParentPath.length\n    ) {\n      target = parent\n    } else if (\n      oldParentPath.every((x, i) => x === newParentPath[i]) &&\n      oldIndex < newParentPath[oldParentPath.length]\n    ) {\n      // Otherwise, if the old path removal resulted in the new path being no longer\n      // correct, we need to decrement the new path at the old path's last index.\n      newParentPath[oldParentPath.length]--\n      target = document.assertPath(newParentPath)\n    } else {\n      // Otherwise, we can just grab the target normally...\n      target = document.assertPath(newParentPath)\n    }\n\n    // Insert the new node to its new parent.\n    target = target.insertNode(newIndex, node)\n    document = document.updateNode(target)\n    value = value.set('document', document)\n    return value\n  },\n\n  /**\n   * Remove mark from text at `offset` and `length` in node by `path`.\n   *\n   * @param {Value} value\n   * @param {Operation} operation\n   * @return {Value}\n   */\n\n  remove_mark(value, operation) {\n    const { path, offset, length, mark } = operation\n    let { document } = value\n    let node = document.assertPath(path)\n    node = node.removeMark(offset, length, mark)\n    document = document.updateNode(node)\n    value = value.set('document', document)\n    return value\n  },\n\n  /**\n   * Remove a node by `path`.\n   *\n   * @param {Value} value\n   * @param {Operation} operation\n   * @return {Value}\n   */\n\n  remove_node(value, operation) {\n    const { path } = operation\n    let { document, selection } = value\n    const { startKey, endKey } = selection\n    const node = document.assertPath(path)\n\n    // If the selection is set, check to see if it needs to be updated.\n    if (selection.isSet) {\n      const hasStartNode = node.hasNode(startKey)\n      const hasEndNode = node.hasNode(endKey)\n      const first = node.object == 'text' ? node : node.getFirstText() || node\n      const last = node.object == 'text' ? node : node.getLastText() || node\n      const prev = document.getPreviousText(first.key)\n      const next = document.getNextText(last.key)\n\n      // If the start point was in this node, update it to be just before/after.\n      if (hasStartNode) {\n        if (prev) {\n          selection = selection.moveStartTo(prev.key, prev.text.length)\n        } else if (next) {\n          selection = selection.moveStartTo(next.key, 0)\n        } else {\n          selection = selection.deselect()\n        }\n      }\n\n      // If the end point was in this node, update it to be just before/after.\n      if (selection.isSet && hasEndNode) {\n        if (prev) {\n          selection = selection.moveEndTo(prev.key, prev.text.length)\n        } else if (next) {\n          selection = selection.moveEndTo(next.key, 0)\n        } else {\n          selection = selection.deselect()\n        }\n      }\n\n      // If the selection wasn't deselected, normalize it.\n      if (selection.isSet) {\n        selection = selection.normalize(document)\n      }\n    }\n\n    // Remove the node from the document.\n    let parent = document.getParent(node.key)\n    const index = parent.nodes.indexOf(node)\n    parent = parent.removeNode(index)\n    document = document.updateNode(parent)\n\n    // Update the document and selection.\n    value = value.set('document', document).set('selection', selection)\n    return value\n  },\n\n  /**\n   * Remove `text` at `offset` in node by `path`.\n   *\n   * @param {Value} value\n   * @param {Operation} operation\n   * @return {Value}\n   */\n\n  remove_text(value, operation) {\n    const { path, offset, text } = operation\n    const { length } = text\n    const rangeOffset = offset + length\n    let { document, selection } = value\n    const { anchorKey, focusKey, anchorOffset, focusOffset } = selection\n    let node = document.assertPath(path)\n\n    if (anchorKey == node.key) {\n      if (anchorOffset >= rangeOffset) {\n        selection = selection.moveAnchor(-length)\n      } else if (anchorOffset > offset) {\n        selection = selection.moveAnchorTo(anchorKey, offset)\n      }\n    }\n\n    if (focusKey == node.key) {\n      if (focusOffset >= rangeOffset) {\n        selection = selection.moveFocus(-length)\n      } else if (focusOffset > offset) {\n        selection = selection.moveFocusTo(focusKey, offset)\n      }\n    }\n\n    node = node.removeText(offset, length)\n    document = document.updateNode(node)\n    value = value.set('document', document).set('selection', selection)\n    return value\n  },\n\n  /**\n   * Set `properties` on mark on text at `offset` and `length` in node by `path`.\n   *\n   * @param {Value} value\n   * @param {Operation} operation\n   * @return {Value}\n   */\n\n  set_mark(value, operation) {\n    const { path, offset, length, mark, properties } = operation\n    let { document } = value\n    let node = document.assertPath(path)\n    node = node.updateMark(offset, length, mark, properties)\n    document = document.updateNode(node)\n    value = value.set('document', document)\n    return value\n  },\n\n  /**\n   * Set `properties` on a node by `path`.\n   *\n   * @param {Value} value\n   * @param {Operation} operation\n   * @return {Value}\n   */\n\n  set_node(value, operation) {\n    const { path, properties } = operation\n    let { document } = value\n    let node = document.assertPath(path)\n    node = node.merge(properties)\n    document = document.updateNode(node)\n    value = value.set('document', document)\n    return value\n  },\n\n  /**\n   * Set `properties` on the selection.\n   *\n   * @param {Value} value\n   * @param {Operation} operation\n   * @return {Value}\n   */\n\n  set_selection(value, operation) {\n    const { properties } = operation\n    const { anchorPath, focusPath, ...props } = properties\n    let { document, selection } = value\n\n    if (anchorPath !== undefined) {\n      props.anchorKey =\n        anchorPath === null ? null : document.assertPath(anchorPath).key\n    }\n\n    if (focusPath !== undefined) {\n      props.focusKey =\n        focusPath === null ? null : document.assertPath(focusPath).key\n    }\n\n    selection = selection.merge(props)\n    selection = selection.normalize(document)\n    value = value.set('selection', selection)\n    return value\n  },\n\n  /**\n   * Set `properties` on `value`.\n   *\n   * @param {Value} value\n   * @param {Operation} operation\n   * @return {Value}\n   */\n\n  set_value(value, operation) {\n    const { properties } = operation\n    value = value.merge(properties)\n    return value\n  },\n\n  /**\n   * Split a node by `path` at `offset`.\n   *\n   * @param {Value} value\n   * @param {Operation} operation\n   * @return {Value}\n   */\n\n  split_node(value, operation) {\n    const { path, position, properties } = operation\n    let { document, selection } = value\n\n    // Calculate a few things...\n    const node = document.assertPath(path)\n    let parent = document.getParent(node.key)\n    const index = parent.nodes.indexOf(node)\n\n    // Split the node by its parent.\n    parent = parent.splitNode(index, position)\n    if (properties) {\n      const splitNode = parent.nodes.get(index + 1)\n      if (splitNode.object !== 'text') {\n        parent = parent.updateNode(splitNode.merge(properties))\n      }\n    }\n    document = document.updateNode(parent)\n\n    // Determine whether we need to update the selection...\n    const { startKey, endKey, startOffset, endOffset } = selection\n    const next = document.getNextText(node.key)\n    let normalize = false\n\n    // If the start point is after or equal to the split, update it.\n    if (node.key == startKey && position <= startOffset) {\n      selection = selection.moveStartTo(next.key, startOffset - position)\n      normalize = true\n    }\n\n    // If the end point is after or equal to the split, update it.\n    if (node.key == endKey && position <= endOffset) {\n      selection = selection.moveEndTo(next.key, endOffset - position)\n      normalize = true\n    }\n\n    // Normalize the selection if we changed it, since the methods we use might\n    // leave it in a non-normalized value.\n    if (normalize) {\n      selection = selection.normalize(document)\n    }\n\n    // Return the updated value.\n    value = value.set('document', document).set('selection', selection)\n    return value\n  },\n}\n\n/**\n * Apply an `operation` to a `value`.\n *\n * @param {Value} value\n * @param {Object|Operation} operation\n * @return {Value} value\n */\n\nfunction applyOperation(value, operation) {\n  operation = Operation.create(operation)\n  const { type } = operation\n  const apply = APPLIERS[type]\n\n  if (!apply) {\n    throw new Error(`Unknown operation type: \"${type}\".`)\n  }\n\n  debug(type, operation)\n  value = apply(value, operation)\n  return value\n}\n\n/**\n * Export.\n *\n * @type {Function}\n */\n\nexport default applyOperation\n","import Debug from 'debug'\nimport isPlainObject from 'is-plain-object'\nimport logger from 'slate-dev-logger'\nimport pick from 'lodash/pick'\nimport { List } from 'immutable'\n\nimport MODEL_TYPES from '../constants/model-types'\nimport Changes from '../changes'\nimport Operation from './operation'\nimport apply from '../operations/apply'\n\n/**\n * Debug.\n *\n * @type {Function}\n */\n\nconst debug = Debug('slate:change')\n\n/**\n * Change.\n *\n * @type {Change}\n */\n\nclass Change {\n  /**\n   * Check if `any` is a `Change`.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isChange(any) {\n    return !!(any && any[MODEL_TYPES.CHANGE])\n  }\n\n  /**\n   * Create a new `Change` with `attrs`.\n   *\n   * @param {Object} attrs\n   *   @property {Value} value\n   */\n\n  constructor(attrs) {\n    const { value } = attrs\n    this.value = value\n    this.operations = new List()\n    this.flags = {\n      normalize: true,\n      ...pick(attrs, ['merge', 'save', 'normalize']),\n    }\n  }\n\n  /**\n   * Object.\n   *\n   * @return {String}\n   */\n\n  get object() {\n    return 'change'\n  }\n\n  get kind() {\n    logger.deprecate(\n      'slate@0.32.0',\n      'The `kind` property of Slate objects has been renamed to `object`.'\n    )\n    return this.object\n  }\n\n  /**\n   * Apply an `operation` to the current value, saving the operation to the\n   * history if needed.\n   *\n   * @param {Operation|Object} operation\n   * @param {Object} options\n   * @return {Change}\n   */\n\n  applyOperation(operation, options = {}) {\n    const { operations, flags } = this\n    let { value } = this\n    let { history } = value\n\n    // Add in the current `value` in case the operation was serialized.\n    if (isPlainObject(operation)) {\n      operation = { ...operation, value }\n    }\n\n    operation = Operation.create(operation)\n\n    // Default options to the change-level flags, this allows for setting\n    // specific options for all of the operations of a given change.\n    options = { ...flags, ...options }\n\n    // Derive the default option values.\n    const {\n      merge = operations.size == 0 ? null : true,\n      save = true,\n      skip = null,\n    } = options\n\n    // Apply the operation to the value.\n    debug('apply', { operation, save, merge })\n    value = apply(value, operation)\n\n    // If needed, save the operation to the history.\n    if (history && save) {\n      history = history.save(operation, { merge, skip })\n      value = value.set('history', history)\n    }\n\n    // Update the mutable change object.\n    this.value = value\n    this.operations = operations.push(operation)\n    return this\n  }\n\n  /**\n   * Apply a series of `operations` to the current value.\n   *\n   * @param {Array|List} operations\n   * @param {Object} options\n   * @return {Change}\n   */\n\n  applyOperations(operations, options) {\n    operations.forEach(op => this.applyOperation(op, options))\n    return this\n  }\n\n  /**\n   * Call a change `fn` with arguments.\n   *\n   * @param {Function} fn\n   * @param {Mixed} ...args\n   * @return {Change}\n   */\n\n  call(fn, ...args) {\n    fn(this, ...args)\n    return this\n  }\n\n  /**\n   * Applies a series of change mutations and defers normalization until the end.\n   *\n   * @param {Function} customChange - function that accepts a change object and executes change operations\n   * @return {Change}\n   */\n\n  withoutNormalization(customChange) {\n    const original = this.flags.normalize\n    this.setOperationFlag('normalize', false)\n    try {\n      customChange(this)\n      // if the change function worked then run normalization\n      this.normalizeDocument()\n    } finally {\n      // restore the flag to whatever it was\n      this.setOperationFlag('normalize', original)\n    }\n    return this\n  }\n\n  /**\n   * Set an operation flag by `key` to `value`.\n   *\n   * @param {String} key\n   * @param {Any} value\n   * @return {Change}\n   */\n\n  setOperationFlag(key, value) {\n    this.flags[key] = value\n    return this\n  }\n\n  /**\n   * Get the `value` of the specified flag by its `key`. Optionally accepts an `options`\n   * object with override flags.\n   *\n   * @param {String} key\n   * @param {Object} options\n   * @return {Change}\n   */\n\n  getFlag(key, options = {}) {\n    return options[key] !== undefined ? options[key] : this.flags[key]\n  }\n\n  /**\n   * Unset an operation flag by `key`.\n   *\n   * @param {String} key\n   * @return {Change}\n   */\n\n  unsetOperationFlag(key) {\n    delete this.flags[key]\n    return this\n  }\n}\n\n/**\n * Attach a pseudo-symbol for type checking.\n */\n\nChange.prototype[MODEL_TYPES.CHANGE] = true\n\n/**\n * Add a change method for each of the changes.\n */\n\nObject.keys(Changes).forEach(type => {\n  Change.prototype[type] = function(...args) {\n    debug(type, { args })\n    this.call(Changes[type], ...args)\n    return this\n  }\n})\n\n/**\n * Export.\n *\n * @type {Change}\n */\n\nexport default Change\n","import apply from './apply'\nimport invert from './invert'\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default {\n  apply,\n  invert,\n}\n","import Block from './models/block'\nimport Change from './models/change'\nimport Changes from './changes'\nimport Character from './models/character'\nimport Data from './models/data'\nimport Document from './models/document'\nimport History from './models/history'\nimport Inline from './models/inline'\nimport Leaf from './models/leaf'\nimport Mark from './models/mark'\nimport Node from './models/node'\nimport Operation from './models/operation'\nimport Operations from './operations'\nimport Range from './models/range'\nimport Schema from './models/schema'\nimport Stack from './models/stack'\nimport Text from './models/text'\nimport Value from './models/value'\nimport { resetKeyGenerator, setKeyGenerator } from './utils/generate-key'\nimport { resetMemoization, useMemoization } from './utils/memoize'\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport {\n  Block,\n  Change,\n  Changes,\n  Character,\n  Data,\n  Document,\n  History,\n  Inline,\n  Leaf,\n  Mark,\n  Node,\n  Operation,\n  Operations,\n  Range,\n  Schema,\n  Stack,\n  Text,\n  Value,\n  resetKeyGenerator,\n  setKeyGenerator,\n  resetMemoization,\n  useMemoization,\n}\n\nexport default {\n  Block,\n  Changes,\n  Character,\n  Data,\n  Document,\n  History,\n  Inline,\n  Leaf,\n  Mark,\n  Node,\n  Operation,\n  Operations,\n  Range,\n  Schema,\n  Stack,\n  Text,\n  Value,\n  resetKeyGenerator,\n  setKeyGenerator,\n  resetMemoization,\n  useMemoization,\n}\n"],"names":["Data","attrs","Map","isMap","isPlainObject","fromJSON","Error","object","fromJS","MODEL_TYPES","ENABLED","CACHE_KEY","LEAF","UNDEFINED","UNSET","undefined","memoize","properties","property","original","args","apply","__cache_key","__cache","__cache_no_args","takesArguments","length","cachedValue","keys","getIn","value","v","setIn","map","key","get","parent","child","set","resetMemoization","Number","MAX_SAFE_INTEGER","useMemoization","enabled","DEFAULTS","Mark","schema","__getComponent","type","data","toJSON","deprecate","isMark","elements","Set","isSet","Array","isArray","marks","create","props","mark","any","MARK","every","item","Record","prototype","Range","node","anchorOffset","first","getFirst","anchorKey","last","getLast","text","start","end","hasAnchorIn","hasDescendant","focusKey","focusOffset","hasFocusIn","isCollapsed","hasAnchorAtStartOf","hasAnchorAtEndOf","merge","isBackward","n","offset","moveAnchorOffsetTo","moveFocusOffsetTo","moveFocusTo","moveAnchorTo","range","flip","moveAnchorToStartOf","moveFocusToEndOf","anchorOffsetType","focusOffsetType","warn","anchorNode","getDescendant","focusNode","getFirstText","anchorText","getTextAtOffset","getOffset","focusText","areDescendantsSorted","isFocused","toArray","m","isRange","List","isList","list","anchorPath","focusPath","createSet","obj","RANGE","MOVE_METHODS","forEach","p","s","EDGE_METHODS","hasEdge","anchor","focus","ALIAS_METHODS","alias","method","getLastText","Character","isCharacter","split","character","CHARACTER","Leaf","characters","createList","char","isLeaf","leaf","generate","generateKey","setKeyGenerator","func","resetKeyGenerator","Text","index","addMarks","i","union","decorations","size","startKey","endKey","startOffset","endOffset","hasStart","hasEnd","__getDecorations","getDecoratedCharacters","leaves","prevChar","prevLeaf","push","prevMarks","isSame","is","array","getMarksAsArray","OrderedSet","reduce","concat","getNode","chars","slice","remove","filterNot","options","getLeaves","r","preserveKeys","newMark","has","add","validateNode","validate","string","isText","l","getCharacters","TEXT","isIndexInRange","Node","second","assertKey","getKeysAsArray","firstIndex","indexOf","secondIndex","getChild","descendant","path","getDescendantAtPath","iterator","matches","forEachDescendant","nodes","found","ret","hasChild","ancestors","find","getAncestors","unshift","getBlocksAsArray","isLeafBlock","getBlocksAtRangeAsArray","normalize","isUnset","startBlock","getClosestBlock","endBlock","blocks","getBlocksByTypeAsArray","getCharactersAsArray","arr","getCharactersAtRangeAsArray","getTextsAtRange","filter","rest","findLast","getClosest","isVoid","one","two","assertDescendant","oneParent","getParent","twoParent","includes","stack","startAt","getFurthestAncestor","getDepth","descendantFound","Document","startText","endText","previous","position","splitNode","updateNode","getNextText","startNode","getNextSibling","endNode","startIndex","endIndex","getFurthest","result","shift","reverse","takeUntil","getInlinesAsArray","isLeafInline","getInlinesAtRangeAsArray","getTextsAtRangeAsArray","getClosestInline","exists","getInlinesByTypeAsArray","inlines","desc","getMarksAtRangeAsArray","getInsertMarksAtRangeAsArray","getActiveMarksAtRangeAsArray","getMarksAtCollapsedRangeAsArray","getCharactersAtRange","memo","c","getPreviousText","intersect","getMarksByTypeAsArray","block","next","after","skipUntil","getTexts","isExpanded","assertNode","ancestor","getPath","__getPlaceholder","before","isSelected","isBlurred","dir","direction","getTextsAsArray","texts","getClosestVoid","regenerateKey","mapDescendants","insert","withIndex","removeNode","insertNode","findIndex","splice","befores","take","afters","skip","getFirstInvalidDescendant","isNode","kind","Block","Inline","isBlock","isInline","isDocument","arg","some","isEmpty","getText","inline","INLINE","Object","getOwnPropertyNames","document","DOCUMENT","BLOCK","Changes","PROXY_TRANSFORMS","change","selection","methodAtRange","setBlock","setBlocks","setInline","setInlines","addMark","addMarkAtRange","sel","select","getActiveMarksAtRange","delete","deleteAtRange","collapseToStart","insertBlock","insertBlockAtRange","collapseToEndOf","insertFragment","fragment","startInline","lastText","lastInline","isAppending","hasEdgeAtStartOf","hasEdgeAtEndOf","insertFragmentAtRange","newTexts","newText","takeLast","collapseToStartOf","move","insertInline","insertInlineAtRange","insertText","getInsertMarksAtRange","insertTextAtRange","splitBlock","depth","splitBlockAtRange","collapseToEnd","removeMark","removeMarkAtRange","toggleMark","activeMarks","wrapText","prefix","suffix","wrapTextAtRange","moveStart","moveEnd","isForward","SURROGATE_START","SURROGATE_END","SPACE","CHAMELEON","PUNCTUATION","isSurrogate","code","isWord","remaining","test","charAt","getCharLength","charCodeAt","getCharOffset","getCharOffsetBackward","getCharOffsetForward","getWordOffset","started","getWordOffsetBackward","o","getWordOffsetForward","getFlag","addMarkByKey","addMarksAtRange","snapshotSelection","isStartVoid","hasVoidParent","isEndVoid","isHanging","prevText","startVoid","nextText","removeNodeByKey","endVoid","removeTextByKey","startLength","endLength","getCommonAncestor","startChild","endChild","startParent","startParentIndex","endParentIndex","startChildIndex","endChildIndex","middles","lonely","getFurthestOnlyChildAncestor","moveNodeByKey","mergeNodeByKey","normalizeNodeByKey","deleteCharBackwardAtRange","String","deleteBackwardAtRange","deleteLineBackwardAtRange","deleteWordBackwardAtRange","voidParent","isAtStartOf","prev","prevBlock","prevVoid","traversed","deleteCharForwardAtRange","deleteForwardAtRange","deleteLineForwardAtRange","deleteWordForwardAtRange","nextBlock","getNextBlock","moveToStartOf","isAtEndOf","nextVoid","extra","insertNodeByKey","splitDescendantsByKey","isAtStart","getBlocks","firstBlock","lastBlock","lonelyParent","lonelyChild","removeDescendant","newIndex","nextChild","nextNodes","lastIndex","inlineChild","inlineIndex","splitNodeByKey","insertTextByKey","commonAncestor","normalizeAncestor","removeMarkByKey","setBlocksAtRange","getBlocksAtRange","sets","setNodeByKey","setBlockAtRange","setInlinesAtRange","getInlinesAtRange","setInlineAtRange","height","h","splitInlineAtRange","Infinity","toggleMarkAtRange","equals","unwrapBlockAtRange","createProperties","wrappers","isSuperset","toOrderedSet","toList","children","b","firstMatch","lastMatch","firstText","normalizeDocument","unwrapInlineAtRange","wrapBlockAtRange","clear","firstblock","lastblock","siblings","p1","p2","indexes","ind","wrapInlineAtRange","inlineParent","wrapInlineByKey","startInner","startInnerIndex","endInner","startInlines","endInlines","operations","bx","by","ax","ay","Math","max","min","applyOperations","insertFragmentByKey","applyOperation","getMarksAtIndex","getPreviousSibling","newKey","newPath","removeAllMarksByKey","state","removals","replaceNodeByKey","newNode","setMarkByKey","target","textKey","textOffset","a","prevIndex","unwrapInlineByKey","moveToRangeOf","unwrapBlockByKey","unwrapNodeByKey","isFirst","isLast","parentParent","parentIndex","wrapBlockByKey","wrapNodeByKey","OPERATION_ATTRIBUTES","debug","Debug","Stack","History","operation","history","undos","redos","prevBatch","peek","prevOperation","shouldSkip","shouldMerge","batch","pop","isHistory","HISTORY","isEqual","CORE_SCHEMA_RULES","invalids","objects","insertBefore","insertAfter","Boolean","plugins","plugin","getPluginsWith","STACK","Schema","parents","rule","violation","context","CHILD_OBJECT_INVALID","CHILD_TYPE_INVALID","CHILD_UNKNOWN","FIRST_CHILD_OBJECT_INVALID","FIRST_CHILD_TYPE_INVALID","LAST_CHILD_OBJECT_INVALID","LAST_CHILD_TYPE_INVALID","CHILD_REQUIRED","NODE_TEXT_INVALID","PARENT_OBJECT_INVALID","PARENT_TYPE_INVALID","NODE_DATA_INVALID","NODE_IS_VOID_INVALID","NODE_MARK_INVALID","t","getRule","getParentRules","ctx","fail","fn","getMarks","def","types","nextDef","defs","rewind","isSchema","rules","resolveSchema","SCHEMA","d","resolveDocumentRule","bs","resolveNodeRule","customizer","source","Value","Change","preserveData","preserveDecorations","preserveHistory","preserveSelection","preserveSchema","getPreviousBlock","getNextInline","getPreviousInline","getMarksAtRange","getFragmentAtRange","isValue","save","VALUE","Operation","json","ATTRIBUTES","toJS","isOperation","OPERATION","invertOperation","op","inverse","inversePath","inverseNewPath","pathLast","newPathLast","e","inverseNode","inverseProperties","pick","inverseMark","assertPath","inverseSelection","inverseProps","inverseValue","redo","omit","undo","invert","snapshot","k","moved","hasOwnProperty","selectAll","moveAnchorCharBackward","anchorBlock","previousText","isInVoid","isPreviousInVoid","moveAnchor","moveAnchorToEndOf","hasNode","moveAnchorCharForward","isNextInVoid","moveFocusCharBackward","focusBlock","moveFocus","moveFocusCharForward","moveFocusToStartOf","MOVE_DIRECTIONS","collapse","PREFIXES","DIRECTIONS","OBJECTS","edges","edge","getDirectionNode","directionKey","setValue","normalizeNodeAndChildren","refindNode","refindPath","normalizeNode","iterations","iterate","AtCurrentRange","AtRange","ByKey","OnHistory","OnSelection","OnValue","WithSchema","APPLIERS","withPath","oneIndex","twoIndex","mergeNode","newParentPath","oldParentPath","oldIndex","x","hasStartNode","hasEndNode","moveStartTo","deselect","moveEndTo","rangeOffset","removeText","updateMark","CHANGE","flags","customChange","setOperationFlag","call"],"mappings":"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"}